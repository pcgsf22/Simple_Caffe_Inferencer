// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace caffe {
class BlobShapeDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<BlobShape>
_instance;
} _BlobShape_default_instance_;
class BlobProtoDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<BlobProto>
_instance;
} _BlobProto_default_instance_;
class BlobProtoVectorDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<BlobProtoVector>
_instance;
} _BlobProtoVector_default_instance_;
class DatumDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<Datum>
_instance;
} _Datum_default_instance_;
class FillerParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<FillerParameter>
_instance;
} _FillerParameter_default_instance_;
class NetParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<NetParameter>
_instance;
} _NetParameter_default_instance_;
class SolverParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SolverParameter>
_instance;
} _SolverParameter_default_instance_;
class SolverStateDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SolverState>
_instance;
} _SolverState_default_instance_;
class NetStateDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<NetState>
_instance;
} _NetState_default_instance_;
class NetStateRuleDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<NetStateRule>
_instance;
} _NetStateRule_default_instance_;
class ParamSpecDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ParamSpec>
_instance;
} _ParamSpec_default_instance_;
class LayerParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<LayerParameter>
_instance;
} _LayerParameter_default_instance_;
class AugmentationCoeffDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<AugmentationCoeff>
_instance;
} _AugmentationCoeff_default_instance_;
class AugmentationParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<AugmentationParameter>
_instance;
} _AugmentationParameter_default_instance_;
class RandomGeneratorParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<RandomGeneratorParameter>
_instance;
} _RandomGeneratorParameter_default_instance_;
class L1LossParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<L1LossParameter>
_instance;
} _L1LossParameter_default_instance_;
class CorrelationParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<CorrelationParameter>
_instance;
} _CorrelationParameter_default_instance_;
class DownsampleParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<DownsampleParameter>
_instance;
} _DownsampleParameter_default_instance_;
class ReaderParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ReaderParameter>
_instance;
} _ReaderParameter_default_instance_;
class WriterParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<WriterParameter>
_instance;
} _WriterParameter_default_instance_;
class ResampleParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ResampleParameter>
_instance;
} _ResampleParameter_default_instance_;
class MeanParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<MeanParameter>
_instance;
} _MeanParameter_default_instance_;
class CoeffScheduleParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<CoeffScheduleParameter>
_instance;
} _CoeffScheduleParameter_default_instance_;
class TransformationParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter>
_instance;
} _TransformationParameter_default_instance_;
class LossParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<LossParameter>
_instance;
} _LossParameter_default_instance_;
class AccuracyParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter>
_instance;
} _AccuracyParameter_default_instance_;
class ArgMaxParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ArgMaxParameter>
_instance;
} _ArgMaxParameter_default_instance_;
class ConcatParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter>
_instance;
} _ConcatParameter_default_instance_;
class BatchNormParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter>
_instance;
} _BatchNormParameter_default_instance_;
class BiasParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<BiasParameter>
_instance;
} _BiasParameter_default_instance_;
class ContrastiveLossParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ContrastiveLossParameter>
_instance;
} _ContrastiveLossParameter_default_instance_;
class ConvolutionParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter>
_instance;
} _ConvolutionParameter_default_instance_;
class CropParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<CropParameter>
_instance;
} _CropParameter_default_instance_;
class DataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<DataParameter>
_instance;
} _DataParameter_default_instance_;
class DropoutParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter>
_instance;
} _DropoutParameter_default_instance_;
class DummyDataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<DummyDataParameter>
_instance;
} _DummyDataParameter_default_instance_;
class EltwiseParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter>
_instance;
} _EltwiseParameter_default_instance_;
class ELUParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ELUParameter>
_instance;
} _ELUParameter_default_instance_;
class EmbedParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<EmbedParameter>
_instance;
} _EmbedParameter_default_instance_;
class ExpParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ExpParameter>
_instance;
} _ExpParameter_default_instance_;
class FlattenParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<FlattenParameter>
_instance;
} _FlattenParameter_default_instance_;
class HDF5DataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<HDF5DataParameter>
_instance;
} _HDF5DataParameter_default_instance_;
class HDF5OutputParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<HDF5OutputParameter>
_instance;
} _HDF5OutputParameter_default_instance_;
class HingeLossParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<HingeLossParameter>
_instance;
} _HingeLossParameter_default_instance_;
class ImageDataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ImageDataParameter>
_instance;
} _ImageDataParameter_default_instance_;
class InfogainLossParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<InfogainLossParameter>
_instance;
} _InfogainLossParameter_default_instance_;
class InnerProductParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter>
_instance;
} _InnerProductParameter_default_instance_;
class InputParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<InputParameter>
_instance;
} _InputParameter_default_instance_;
class LogParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<LogParameter>
_instance;
} _LogParameter_default_instance_;
class LRNParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<LRNParameter>
_instance;
} _LRNParameter_default_instance_;
class MemoryDataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<MemoryDataParameter>
_instance;
} _MemoryDataParameter_default_instance_;
class MVNParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<MVNParameter>
_instance;
} _MVNParameter_default_instance_;
class ParameterParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ParameterParameter>
_instance;
} _ParameterParameter_default_instance_;
class PoolingParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter>
_instance;
} _PoolingParameter_default_instance_;
class PowerParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<PowerParameter>
_instance;
} _PowerParameter_default_instance_;
class PythonParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<PythonParameter>
_instance;
} _PythonParameter_default_instance_;
class RecurrentParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<RecurrentParameter>
_instance;
} _RecurrentParameter_default_instance_;
class ReductionParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ReductionParameter>
_instance;
} _ReductionParameter_default_instance_;
class ReLUParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter>
_instance;
} _ReLUParameter_default_instance_;
class ReshapeParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ReshapeParameter>
_instance;
} _ReshapeParameter_default_instance_;
class ScaleParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ScaleParameter>
_instance;
} _ScaleParameter_default_instance_;
class SigmoidParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SigmoidParameter>
_instance;
} _SigmoidParameter_default_instance_;
class SliceParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SliceParameter>
_instance;
} _SliceParameter_default_instance_;
class SoftmaxParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParameter>
_instance;
} _SoftmaxParameter_default_instance_;
class TanHParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<TanHParameter>
_instance;
} _TanHParameter_default_instance_;
class TileParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<TileParameter>
_instance;
} _TileParameter_default_instance_;
class ThresholdParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<ThresholdParameter>
_instance;
} _ThresholdParameter_default_instance_;
class WindowDataParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<WindowDataParameter>
_instance;
} _WindowDataParameter_default_instance_;
class SPPParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<SPPParameter>
_instance;
} _SPPParameter_default_instance_;
class V1LayerParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<V1LayerParameter>
_instance;
} _V1LayerParameter_default_instance_;
class V0LayerParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<V0LayerParameter>
_instance;
} _V0LayerParameter_default_instance_;
class PReLUParameterDefaultTypeInternal {
public:
::google::protobuf::internal::ExplicitlyConstructed<PReLUParameter>
_instance;
} _PReLUParameter_default_instance_;
}  // namespace caffe
namespace protobuf_caffe_2eproto {
void InitDefaultsBlobShapeImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_BlobShape_default_instance_;
new (ptr) ::caffe::BlobShape();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::BlobShape::InitAsDefaultInstance();
}

void InitDefaultsBlobShape() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlobShapeImpl);
}

void InitDefaultsBlobProtoImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobShape();
{
void* ptr = &::caffe::_BlobProto_default_instance_;
new (ptr) ::caffe::BlobProto();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::BlobProto::InitAsDefaultInstance();
}

void InitDefaultsBlobProto() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlobProtoImpl);
}

void InitDefaultsBlobProtoVectorImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobProto();
{
void* ptr = &::caffe::_BlobProtoVector_default_instance_;
new (ptr) ::caffe::BlobProtoVector();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::BlobProtoVector::InitAsDefaultInstance();
}

void InitDefaultsBlobProtoVector() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlobProtoVectorImpl);
}

void InitDefaultsDatumImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_Datum_default_instance_;
new (ptr) ::caffe::Datum();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::Datum::InitAsDefaultInstance();
}

void InitDefaultsDatum() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDatumImpl);
}

void InitDefaultsFillerParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::caffe::FillerParameter::_default_type_.DefaultConstruct();
*::caffe::FillerParameter::_default_type_.get_mutable() = ::std::string("constant", 8);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::FillerParameter::_default_type_.get_mutable());
{
void* ptr = &::caffe::_FillerParameter_default_instance_;
new (ptr) ::caffe::FillerParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::FillerParameter::InitAsDefaultInstance();
}

void InitDefaultsFillerParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFillerParameterImpl);
}

void InitDefaultsNetParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobShape();
protobuf_caffe_2eproto::InitDefaultsNetState();
protobuf_caffe_2eproto::InitDefaultsLayerParameter();
protobuf_caffe_2eproto::InitDefaultsV1LayerParameter();
{
void* ptr = &::caffe::_NetParameter_default_instance_;
new (ptr) ::caffe::NetParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::NetParameter::InitAsDefaultInstance();
}

void InitDefaultsNetParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetParameterImpl);
}

void InitDefaultsSolverParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsNetParameter();
protobuf_caffe_2eproto::InitDefaultsNetState();
::caffe::SolverParameter::_default_regularization_type_.DefaultConstruct();
*::caffe::SolverParameter::_default_regularization_type_.get_mutable() = ::std::string("L2", 2);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::SolverParameter::_default_regularization_type_.get_mutable());
::caffe::SolverParameter::_default_type_.DefaultConstruct();
*::caffe::SolverParameter::_default_type_.get_mutable() = ::std::string("SGD", 3);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::SolverParameter::_default_type_.get_mutable());
{
void* ptr = &::caffe::_SolverParameter_default_instance_;
new (ptr) ::caffe::SolverParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SolverParameter::InitAsDefaultInstance();
}

void InitDefaultsSolverParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSolverParameterImpl);
}

void InitDefaultsSolverStateImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobProto();
{
void* ptr = &::caffe::_SolverState_default_instance_;
new (ptr) ::caffe::SolverState();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SolverState::InitAsDefaultInstance();
}

void InitDefaultsSolverState() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSolverStateImpl);
}

void InitDefaultsNetStateImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_NetState_default_instance_;
new (ptr) ::caffe::NetState();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::NetState::InitAsDefaultInstance();
}

void InitDefaultsNetState() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetStateImpl);
}

void InitDefaultsNetStateRuleImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_NetStateRule_default_instance_;
new (ptr) ::caffe::NetStateRule();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::NetStateRule::InitAsDefaultInstance();
}

void InitDefaultsNetStateRule() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetStateRuleImpl);
}

void InitDefaultsParamSpecImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ParamSpec_default_instance_;
new (ptr) ::caffe::ParamSpec();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ParamSpec::InitAsDefaultInstance();
}

void InitDefaultsParamSpec() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParamSpecImpl);
}

void InitDefaultsLayerParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsParamSpec();
protobuf_caffe_2eproto::InitDefaultsBlobProto();
protobuf_caffe_2eproto::InitDefaultsNetStateRule();
protobuf_caffe_2eproto::InitDefaultsTransformationParameter();
protobuf_caffe_2eproto::InitDefaultsLossParameter();
protobuf_caffe_2eproto::InitDefaultsAccuracyParameter();
protobuf_caffe_2eproto::InitDefaultsArgMaxParameter();
protobuf_caffe_2eproto::InitDefaultsBatchNormParameter();
protobuf_caffe_2eproto::InitDefaultsBiasParameter();
protobuf_caffe_2eproto::InitDefaultsConcatParameter();
protobuf_caffe_2eproto::InitDefaultsContrastiveLossParameter();
protobuf_caffe_2eproto::InitDefaultsConvolutionParameter();
protobuf_caffe_2eproto::InitDefaultsCropParameter();
protobuf_caffe_2eproto::InitDefaultsDataParameter();
protobuf_caffe_2eproto::InitDefaultsDropoutParameter();
protobuf_caffe_2eproto::InitDefaultsDummyDataParameter();
protobuf_caffe_2eproto::InitDefaultsEltwiseParameter();
protobuf_caffe_2eproto::InitDefaultsELUParameter();
protobuf_caffe_2eproto::InitDefaultsEmbedParameter();
protobuf_caffe_2eproto::InitDefaultsExpParameter();
protobuf_caffe_2eproto::InitDefaultsFlattenParameter();
protobuf_caffe_2eproto::InitDefaultsHDF5DataParameter();
protobuf_caffe_2eproto::InitDefaultsHDF5OutputParameter();
protobuf_caffe_2eproto::InitDefaultsHingeLossParameter();
protobuf_caffe_2eproto::InitDefaultsImageDataParameter();
protobuf_caffe_2eproto::InitDefaultsInfogainLossParameter();
protobuf_caffe_2eproto::InitDefaultsInnerProductParameter();
protobuf_caffe_2eproto::InitDefaultsInputParameter();
protobuf_caffe_2eproto::InitDefaultsLogParameter();
protobuf_caffe_2eproto::InitDefaultsLRNParameter();
protobuf_caffe_2eproto::InitDefaultsMemoryDataParameter();
protobuf_caffe_2eproto::InitDefaultsMVNParameter();
protobuf_caffe_2eproto::InitDefaultsParameterParameter();
protobuf_caffe_2eproto::InitDefaultsPoolingParameter();
protobuf_caffe_2eproto::InitDefaultsPowerParameter();
protobuf_caffe_2eproto::InitDefaultsPReLUParameter();
protobuf_caffe_2eproto::InitDefaultsPythonParameter();
protobuf_caffe_2eproto::InitDefaultsRecurrentParameter();
protobuf_caffe_2eproto::InitDefaultsReductionParameter();
protobuf_caffe_2eproto::InitDefaultsReLUParameter();
protobuf_caffe_2eproto::InitDefaultsReshapeParameter();
protobuf_caffe_2eproto::InitDefaultsScaleParameter();
protobuf_caffe_2eproto::InitDefaultsSigmoidParameter();
protobuf_caffe_2eproto::InitDefaultsSoftmaxParameter();
protobuf_caffe_2eproto::InitDefaultsSPPParameter();
protobuf_caffe_2eproto::InitDefaultsSliceParameter();
protobuf_caffe_2eproto::InitDefaultsTanHParameter();
protobuf_caffe_2eproto::InitDefaultsThresholdParameter();
protobuf_caffe_2eproto::InitDefaultsTileParameter();
protobuf_caffe_2eproto::InitDefaultsWindowDataParameter();
protobuf_caffe_2eproto::InitDefaultsCoeffScheduleParameter();
protobuf_caffe_2eproto::InitDefaultsAugmentationParameter();
protobuf_caffe_2eproto::InitDefaultsCorrelationParameter();
protobuf_caffe_2eproto::InitDefaultsL1LossParameter();
protobuf_caffe_2eproto::InitDefaultsWriterParameter();
protobuf_caffe_2eproto::InitDefaultsReaderParameter();
protobuf_caffe_2eproto::InitDefaultsMeanParameter();
protobuf_caffe_2eproto::InitDefaultsResampleParameter();
protobuf_caffe_2eproto::InitDefaultsDownsampleParameter();
{
void* ptr = &::caffe::_LayerParameter_default_instance_;
new (ptr) ::caffe::LayerParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::LayerParameter::InitAsDefaultInstance();
}

void InitDefaultsLayerParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLayerParameterImpl);
}

void InitDefaultsAugmentationCoeffImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_AugmentationCoeff_default_instance_;
new (ptr) ::caffe::AugmentationCoeff();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::AugmentationCoeff::InitAsDefaultInstance();
}

void InitDefaultsAugmentationCoeff() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAugmentationCoeffImpl);
}

void InitDefaultsAugmentationParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsRandomGeneratorParameter();
::caffe::AugmentationParameter::_default_mode_.DefaultConstruct();
*::caffe::AugmentationParameter::_default_mode_.get_mutable() = ::std::string("add", 3);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::AugmentationParameter::_default_mode_.get_mutable());
{
void* ptr = &::caffe::_AugmentationParameter_default_instance_;
new (ptr) ::caffe::AugmentationParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::AugmentationParameter::InitAsDefaultInstance();
}

void InitDefaultsAugmentationParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAugmentationParameterImpl);
}

void InitDefaultsRandomGeneratorParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::caffe::RandomGeneratorParameter::_default_rand_type_.DefaultConstruct();
*::caffe::RandomGeneratorParameter::_default_rand_type_.get_mutable() = ::std::string("uniform", 7);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::RandomGeneratorParameter::_default_rand_type_.get_mutable());
{
void* ptr = &::caffe::_RandomGeneratorParameter_default_instance_;
new (ptr) ::caffe::RandomGeneratorParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::RandomGeneratorParameter::InitAsDefaultInstance();
}

void InitDefaultsRandomGeneratorParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRandomGeneratorParameterImpl);
}

void InitDefaultsL1LossParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_L1LossParameter_default_instance_;
new (ptr) ::caffe::L1LossParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::L1LossParameter::InitAsDefaultInstance();
}

void InitDefaultsL1LossParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsL1LossParameterImpl);
}

void InitDefaultsCorrelationParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_CorrelationParameter_default_instance_;
new (ptr) ::caffe::CorrelationParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::CorrelationParameter::InitAsDefaultInstance();
}

void InitDefaultsCorrelationParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCorrelationParameterImpl);
}

void InitDefaultsDownsampleParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_DownsampleParameter_default_instance_;
new (ptr) ::caffe::DownsampleParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::DownsampleParameter::InitAsDefaultInstance();
}

void InitDefaultsDownsampleParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDownsampleParameterImpl);
}

void InitDefaultsReaderParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ReaderParameter_default_instance_;
new (ptr) ::caffe::ReaderParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ReaderParameter::InitAsDefaultInstance();
}

void InitDefaultsReaderParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReaderParameterImpl);
}

void InitDefaultsWriterParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_WriterParameter_default_instance_;
new (ptr) ::caffe::WriterParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::WriterParameter::InitAsDefaultInstance();
}

void InitDefaultsWriterParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWriterParameterImpl);
}

void InitDefaultsResampleParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ResampleParameter_default_instance_;
new (ptr) ::caffe::ResampleParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ResampleParameter::InitAsDefaultInstance();
}

void InitDefaultsResampleParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResampleParameterImpl);
}

void InitDefaultsMeanParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_MeanParameter_default_instance_;
new (ptr) ::caffe::MeanParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::MeanParameter::InitAsDefaultInstance();
}

void InitDefaultsMeanParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeanParameterImpl);
}

void InitDefaultsCoeffScheduleParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_CoeffScheduleParameter_default_instance_;
new (ptr) ::caffe::CoeffScheduleParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::CoeffScheduleParameter::InitAsDefaultInstance();
}

void InitDefaultsCoeffScheduleParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCoeffScheduleParameterImpl);
}

void InitDefaultsTransformationParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_TransformationParameter_default_instance_;
new (ptr) ::caffe::TransformationParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::TransformationParameter::InitAsDefaultInstance();
}

void InitDefaultsTransformationParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransformationParameterImpl);
}

void InitDefaultsLossParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_LossParameter_default_instance_;
new (ptr) ::caffe::LossParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::LossParameter::InitAsDefaultInstance();
}

void InitDefaultsLossParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLossParameterImpl);
}

void InitDefaultsAccuracyParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_AccuracyParameter_default_instance_;
new (ptr) ::caffe::AccuracyParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::AccuracyParameter::InitAsDefaultInstance();
}

void InitDefaultsAccuracyParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccuracyParameterImpl);
}

void InitDefaultsArgMaxParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ArgMaxParameter_default_instance_;
new (ptr) ::caffe::ArgMaxParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ArgMaxParameter::InitAsDefaultInstance();
}

void InitDefaultsArgMaxParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsArgMaxParameterImpl);
}

void InitDefaultsConcatParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ConcatParameter_default_instance_;
new (ptr) ::caffe::ConcatParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ConcatParameter::InitAsDefaultInstance();
}

void InitDefaultsConcatParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConcatParameterImpl);
}

void InitDefaultsBatchNormParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_BatchNormParameter_default_instance_;
new (ptr) ::caffe::BatchNormParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::BatchNormParameter::InitAsDefaultInstance();
}

void InitDefaultsBatchNormParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBatchNormParameterImpl);
}

void InitDefaultsBiasParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_BiasParameter_default_instance_;
new (ptr) ::caffe::BiasParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::BiasParameter::InitAsDefaultInstance();
}

void InitDefaultsBiasParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBiasParameterImpl);
}

void InitDefaultsContrastiveLossParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ContrastiveLossParameter_default_instance_;
new (ptr) ::caffe::ContrastiveLossParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ContrastiveLossParameter::InitAsDefaultInstance();
}

void InitDefaultsContrastiveLossParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsContrastiveLossParameterImpl);
}

void InitDefaultsConvolutionParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_ConvolutionParameter_default_instance_;
new (ptr) ::caffe::ConvolutionParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ConvolutionParameter::InitAsDefaultInstance();
}

void InitDefaultsConvolutionParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConvolutionParameterImpl);
}

void InitDefaultsCropParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_CropParameter_default_instance_;
new (ptr) ::caffe::CropParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::CropParameter::InitAsDefaultInstance();
}

void InitDefaultsCropParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCropParameterImpl);
}

void InitDefaultsDataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_DataParameter_default_instance_;
new (ptr) ::caffe::DataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::DataParameter::InitAsDefaultInstance();
}

void InitDefaultsDataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataParameterImpl);
}

void InitDefaultsDropoutParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_DropoutParameter_default_instance_;
new (ptr) ::caffe::DropoutParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::DropoutParameter::InitAsDefaultInstance();
}

void InitDefaultsDropoutParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDropoutParameterImpl);
}

void InitDefaultsDummyDataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
protobuf_caffe_2eproto::InitDefaultsBlobShape();
{
void* ptr = &::caffe::_DummyDataParameter_default_instance_;
new (ptr) ::caffe::DummyDataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::DummyDataParameter::InitAsDefaultInstance();
}

void InitDefaultsDummyDataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDummyDataParameterImpl);
}

void InitDefaultsEltwiseParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_EltwiseParameter_default_instance_;
new (ptr) ::caffe::EltwiseParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::EltwiseParameter::InitAsDefaultInstance();
}

void InitDefaultsEltwiseParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEltwiseParameterImpl);
}

void InitDefaultsELUParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ELUParameter_default_instance_;
new (ptr) ::caffe::ELUParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ELUParameter::InitAsDefaultInstance();
}

void InitDefaultsELUParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsELUParameterImpl);
}

void InitDefaultsEmbedParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_EmbedParameter_default_instance_;
new (ptr) ::caffe::EmbedParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::EmbedParameter::InitAsDefaultInstance();
}

void InitDefaultsEmbedParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmbedParameterImpl);
}

void InitDefaultsExpParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ExpParameter_default_instance_;
new (ptr) ::caffe::ExpParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ExpParameter::InitAsDefaultInstance();
}

void InitDefaultsExpParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExpParameterImpl);
}

void InitDefaultsFlattenParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_FlattenParameter_default_instance_;
new (ptr) ::caffe::FlattenParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::FlattenParameter::InitAsDefaultInstance();
}

void InitDefaultsFlattenParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFlattenParameterImpl);
}

void InitDefaultsHDF5DataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_HDF5DataParameter_default_instance_;
new (ptr) ::caffe::HDF5DataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::HDF5DataParameter::InitAsDefaultInstance();
}

void InitDefaultsHDF5DataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHDF5DataParameterImpl);
}

void InitDefaultsHDF5OutputParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_HDF5OutputParameter_default_instance_;
new (ptr) ::caffe::HDF5OutputParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::HDF5OutputParameter::InitAsDefaultInstance();
}

void InitDefaultsHDF5OutputParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHDF5OutputParameterImpl);
}

void InitDefaultsHingeLossParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_HingeLossParameter_default_instance_;
new (ptr) ::caffe::HingeLossParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::HingeLossParameter::InitAsDefaultInstance();
}

void InitDefaultsHingeLossParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHingeLossParameterImpl);
}

void InitDefaultsImageDataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ImageDataParameter_default_instance_;
new (ptr) ::caffe::ImageDataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ImageDataParameter::InitAsDefaultInstance();
}

void InitDefaultsImageDataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageDataParameterImpl);
}

void InitDefaultsInfogainLossParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_InfogainLossParameter_default_instance_;
new (ptr) ::caffe::InfogainLossParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::InfogainLossParameter::InitAsDefaultInstance();
}

void InitDefaultsInfogainLossParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfogainLossParameterImpl);
}

void InitDefaultsInnerProductParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_InnerProductParameter_default_instance_;
new (ptr) ::caffe::InnerProductParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::InnerProductParameter::InitAsDefaultInstance();
}

void InitDefaultsInnerProductParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInnerProductParameterImpl);
}

void InitDefaultsInputParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobShape();
{
void* ptr = &::caffe::_InputParameter_default_instance_;
new (ptr) ::caffe::InputParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::InputParameter::InitAsDefaultInstance();
}

void InitDefaultsInputParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInputParameterImpl);
}

void InitDefaultsLogParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_LogParameter_default_instance_;
new (ptr) ::caffe::LogParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::LogParameter::InitAsDefaultInstance();
}

void InitDefaultsLogParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogParameterImpl);
}

void InitDefaultsLRNParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_LRNParameter_default_instance_;
new (ptr) ::caffe::LRNParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::LRNParameter::InitAsDefaultInstance();
}

void InitDefaultsLRNParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLRNParameterImpl);
}

void InitDefaultsMemoryDataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_MemoryDataParameter_default_instance_;
new (ptr) ::caffe::MemoryDataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::MemoryDataParameter::InitAsDefaultInstance();
}

void InitDefaultsMemoryDataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemoryDataParameterImpl);
}

void InitDefaultsMVNParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_MVNParameter_default_instance_;
new (ptr) ::caffe::MVNParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::MVNParameter::InitAsDefaultInstance();
}

void InitDefaultsMVNParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMVNParameterImpl);
}

void InitDefaultsParameterParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobShape();
{
void* ptr = &::caffe::_ParameterParameter_default_instance_;
new (ptr) ::caffe::ParameterParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ParameterParameter::InitAsDefaultInstance();
}

void InitDefaultsParameterParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParameterParameterImpl);
}

void InitDefaultsPoolingParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_PoolingParameter_default_instance_;
new (ptr) ::caffe::PoolingParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::PoolingParameter::InitAsDefaultInstance();
}

void InitDefaultsPoolingParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoolingParameterImpl);
}

void InitDefaultsPowerParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_PowerParameter_default_instance_;
new (ptr) ::caffe::PowerParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::PowerParameter::InitAsDefaultInstance();
}

void InitDefaultsPowerParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPowerParameterImpl);
}

void InitDefaultsPythonParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_PythonParameter_default_instance_;
new (ptr) ::caffe::PythonParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::PythonParameter::InitAsDefaultInstance();
}

void InitDefaultsPythonParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPythonParameterImpl);
}

void InitDefaultsRecurrentParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_RecurrentParameter_default_instance_;
new (ptr) ::caffe::RecurrentParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::RecurrentParameter::InitAsDefaultInstance();
}

void InitDefaultsRecurrentParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecurrentParameterImpl);
}

void InitDefaultsReductionParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ReductionParameter_default_instance_;
new (ptr) ::caffe::ReductionParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ReductionParameter::InitAsDefaultInstance();
}

void InitDefaultsReductionParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReductionParameterImpl);
}

void InitDefaultsReLUParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ReLUParameter_default_instance_;
new (ptr) ::caffe::ReLUParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ReLUParameter::InitAsDefaultInstance();
}

void InitDefaultsReLUParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReLUParameterImpl);
}

void InitDefaultsReshapeParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsBlobShape();
{
void* ptr = &::caffe::_ReshapeParameter_default_instance_;
new (ptr) ::caffe::ReshapeParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ReshapeParameter::InitAsDefaultInstance();
}

void InitDefaultsReshapeParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReshapeParameterImpl);
}

void InitDefaultsScaleParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_ScaleParameter_default_instance_;
new (ptr) ::caffe::ScaleParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ScaleParameter::InitAsDefaultInstance();
}

void InitDefaultsScaleParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsScaleParameterImpl);
}

void InitDefaultsSigmoidParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_SigmoidParameter_default_instance_;
new (ptr) ::caffe::SigmoidParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SigmoidParameter::InitAsDefaultInstance();
}

void InitDefaultsSigmoidParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSigmoidParameterImpl);
}

void InitDefaultsSliceParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_SliceParameter_default_instance_;
new (ptr) ::caffe::SliceParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SliceParameter::InitAsDefaultInstance();
}

void InitDefaultsSliceParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSliceParameterImpl);
}

void InitDefaultsSoftmaxParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_SoftmaxParameter_default_instance_;
new (ptr) ::caffe::SoftmaxParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SoftmaxParameter::InitAsDefaultInstance();
}

void InitDefaultsSoftmaxParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftmaxParameterImpl);
}

void InitDefaultsTanHParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_TanHParameter_default_instance_;
new (ptr) ::caffe::TanHParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::TanHParameter::InitAsDefaultInstance();
}

void InitDefaultsTanHParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTanHParameterImpl);
}

void InitDefaultsTileParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_TileParameter_default_instance_;
new (ptr) ::caffe::TileParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::TileParameter::InitAsDefaultInstance();
}

void InitDefaultsTileParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTileParameterImpl);
}

void InitDefaultsThresholdParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_ThresholdParameter_default_instance_;
new (ptr) ::caffe::ThresholdParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::ThresholdParameter::InitAsDefaultInstance();
}

void InitDefaultsThresholdParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsThresholdParameterImpl);
}

void InitDefaultsWindowDataParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::caffe::WindowDataParameter::_default_crop_mode_.DefaultConstruct();
*::caffe::WindowDataParameter::_default_crop_mode_.get_mutable() = ::std::string("warp", 4);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::WindowDataParameter::_default_crop_mode_.get_mutable());
{
void* ptr = &::caffe::_WindowDataParameter_default_instance_;
new (ptr) ::caffe::WindowDataParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::WindowDataParameter::InitAsDefaultInstance();
}

void InitDefaultsWindowDataParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWindowDataParameterImpl);
}

void InitDefaultsSPPParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
{
void* ptr = &::caffe::_SPPParameter_default_instance_;
new (ptr) ::caffe::SPPParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::SPPParameter::InitAsDefaultInstance();
}

void InitDefaultsSPPParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSPPParameterImpl);
}

void InitDefaultsV1LayerParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsNetStateRule();
protobuf_caffe_2eproto::InitDefaultsBlobProto();
protobuf_caffe_2eproto::InitDefaultsAccuracyParameter();
protobuf_caffe_2eproto::InitDefaultsArgMaxParameter();
protobuf_caffe_2eproto::InitDefaultsConcatParameter();
protobuf_caffe_2eproto::InitDefaultsContrastiveLossParameter();
protobuf_caffe_2eproto::InitDefaultsConvolutionParameter();
protobuf_caffe_2eproto::InitDefaultsDataParameter();
protobuf_caffe_2eproto::InitDefaultsDropoutParameter();
protobuf_caffe_2eproto::InitDefaultsDummyDataParameter();
protobuf_caffe_2eproto::InitDefaultsEltwiseParameter();
protobuf_caffe_2eproto::InitDefaultsExpParameter();
protobuf_caffe_2eproto::InitDefaultsHDF5DataParameter();
protobuf_caffe_2eproto::InitDefaultsHDF5OutputParameter();
protobuf_caffe_2eproto::InitDefaultsHingeLossParameter();
protobuf_caffe_2eproto::InitDefaultsImageDataParameter();
protobuf_caffe_2eproto::InitDefaultsInfogainLossParameter();
protobuf_caffe_2eproto::InitDefaultsInnerProductParameter();
protobuf_caffe_2eproto::InitDefaultsLRNParameter();
protobuf_caffe_2eproto::InitDefaultsMemoryDataParameter();
protobuf_caffe_2eproto::InitDefaultsMVNParameter();
protobuf_caffe_2eproto::InitDefaultsPoolingParameter();
protobuf_caffe_2eproto::InitDefaultsPowerParameter();
protobuf_caffe_2eproto::InitDefaultsReLUParameter();
protobuf_caffe_2eproto::InitDefaultsSigmoidParameter();
protobuf_caffe_2eproto::InitDefaultsSoftmaxParameter();
protobuf_caffe_2eproto::InitDefaultsSliceParameter();
protobuf_caffe_2eproto::InitDefaultsTanHParameter();
protobuf_caffe_2eproto::InitDefaultsThresholdParameter();
protobuf_caffe_2eproto::InitDefaultsWindowDataParameter();
protobuf_caffe_2eproto::InitDefaultsTransformationParameter();
protobuf_caffe_2eproto::InitDefaultsLossParameter();
protobuf_caffe_2eproto::InitDefaultsV0LayerParameter();
{
void* ptr = &::caffe::_V1LayerParameter_default_instance_;
new (ptr) ::caffe::V1LayerParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::V1LayerParameter::InitAsDefaultInstance();
}

void InitDefaultsV1LayerParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsV1LayerParameterImpl);
}

void InitDefaultsV0LayerParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
protobuf_caffe_2eproto::InitDefaultsBlobProto();
protobuf_caffe_2eproto::InitDefaultsHDF5OutputParameter();
::caffe::V0LayerParameter::_default_det_crop_mode_.DefaultConstruct();
*::caffe::V0LayerParameter::_default_det_crop_mode_.get_mutable() = ::std::string("warp", 4);
::google::protobuf::internal::OnShutdownDestroyString(
::caffe::V0LayerParameter::_default_det_crop_mode_.get_mutable());
{
void* ptr = &::caffe::_V0LayerParameter_default_instance_;
new (ptr) ::caffe::V0LayerParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::V0LayerParameter::InitAsDefaultInstance();
}

void InitDefaultsV0LayerParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsV0LayerParameterImpl);
}

void InitDefaultsPReLUParameterImpl() {
GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
protobuf_caffe_2eproto::InitDefaultsFillerParameter();
{
void* ptr = &::caffe::_PReLUParameter_default_instance_;
new (ptr) ::caffe::PReLUParameter();
::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
}
::caffe::PReLUParameter::InitAsDefaultInstance();
}

void InitDefaultsPReLUParameter() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPReLUParameterImpl);
}

::google::protobuf::Metadata file_level_metadata[72];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[30];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobShape, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobShape, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobShape, dim_),
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, shape_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, data_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, diff_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, double_data_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, double_diff_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, num_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProto, width_),
0,
~0u,
~0u,
~0u,
~0u,
1,
2,
3,
4,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProtoVector, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProtoVector, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BlobProtoVector, blobs_),
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, width_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, data_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, label_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, float_data_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::Datum, encoded_),
1,
2,
3,
0,
4,
~0u,
5,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, value_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, min_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, max_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, mean_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, std_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, sparse_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, variance_norm_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FillerParameter, diag_val_),
0,
1,
2,
6,
3,
7,
5,
4,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, name_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, input_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, input_shape_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, input_dim_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, force_backward_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, state_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, debug_info_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, layer_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetParameter, layers_),
0,
~0u,
~0u,
~0u,
2,
1,
3,
~0u,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, net_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, net_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, train_net_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_net_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, train_net_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_net_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, train_state_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_state_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_iter_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_interval_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_compute_loss_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, test_initialization_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, base_lr_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, display_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, average_loss_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, max_iter_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, iter_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, lr_policy_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, gamma_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, power_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, momentum_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, weight_decay_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, regularization_type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, stepsize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, stepvalue_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, clip_gradients_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, snapshot_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, snapshot_prefix_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, snapshot_diff_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, snapshot_format_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, solver_mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, device_id_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, random_seed_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, delta_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, momentum2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, rms_decay_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, debug_info_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, snapshot_after_train_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverParameter, solver_type_),
3,
7,
0,
~0u,
6,
~0u,
8,
~0u,
~0u,
9,
20,
27,
10,
11,
30,
12,
32,
1,
13,
14,
15,
16,
4,
17,
~0u,
31,
18,
2,
21,
33,
26,
19,
25,
5,
29,
34,
24,
22,
28,
23,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, iter_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, learned_net_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, history_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SolverState, current_step_),
1,
0,
~0u,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetState, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetState, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetState, phase_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetState, level_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetState, stage_),
1,
0,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, phase_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, min_level_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, max_level_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, stage_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::NetStateRule, not_stage_),
0,
1,
2,
~0u,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, name_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, share_mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, lr_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParamSpec, decay_mult_),
0,
1,
2,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, name_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, bottom_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, top_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, phase_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, loss_weight_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, blobs_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, propagate_down_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, include_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, exclude_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, transform_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, accuracy_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, argmax_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, batch_norm_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, bias_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, concat_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, contrastive_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, convolution_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, crop_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, dropout_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, dummy_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, eltwise_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, elu_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, embed_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, exp_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, flatten_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, hdf5_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, hdf5_output_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, hinge_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, image_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, infogain_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, inner_product_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, input_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, log_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, lrn_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, memory_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, mvn_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, parameter_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, pooling_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, power_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, prelu_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, python_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, recurrent_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, reduction_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, relu_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, reshape_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, scale_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, sigmoid_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, softmax_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, spp_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, slice_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, tanh_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, threshold_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, tile_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, window_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, coeff_schedule_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, augmentation_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, correlation_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, l1_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, writer_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, reader_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, mean_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, resample_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, downsample_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LayerParameter, reshape_every_iter_),
0,
1,
~0u,
~0u,
58,
~0u,
~0u,
~0u,
~0u,
~0u,
~0u,
2,
3,
4,
5,
41,
43,
6,
7,
8,
46,
9,
10,
11,
12,
42,
39,
13,
37,
14,
15,
16,
17,
18,
19,
45,
36,
20,
21,
22,
47,
23,
24,
33,
32,
48,
38,
25,
35,
44,
26,
27,
34,
28,
29,
30,
40,
31,
49,
50,
51,
52,
53,
54,
55,
56,
57,
59,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, dx_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, dy_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, zoom_x_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, zoom_y_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, gamma_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, brightness_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, contrast_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, color1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, color2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, color3_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_nomean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_nomean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_nomean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_nomean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_nomean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_nomean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_nomean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_nomean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_nomean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_withmean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_withmean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, pow_withmean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_withmean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_withmean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, add_withmean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_withmean0_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_withmean1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, mult_withmean2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, lmult_pow_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, lmult_add_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, lmult_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, col_angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, fog_amount_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, fog_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, motion_blur_angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, motion_blur_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, shadow_angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, shadow_distance_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, shadow_strength_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationCoeff, noise_),
0,
1,
2,
3,
22,
23,
38,
18,
39,
40,
41,
21,
24,
25,
26,
4,
5,
6,
27,
28,
29,
30,
31,
32,
7,
8,
9,
33,
34,
35,
36,
10,
37,
11,
12,
13,
14,
15,
16,
17,
19,
20,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, crop_width_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, crop_height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, write_augmented_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, max_multiplier_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, augment_during_test_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, recompute_mean_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, write_mean_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, mean_per_pixel_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, mean_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, bottomwidth_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, bottomheight_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, num_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, chromatic_eigvec_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, translate_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, rotate_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, zoom_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, squeeze_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, translate_x_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, translate_y_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, gamma_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, brightness_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, contrast_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, color_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, lmult_pow_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, lmult_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, lmult_add_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, sat_pow_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, sat_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, sat_add_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, col_pow_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, col_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, col_add_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, ladd_pow_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, ladd_mult_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, ladd_add_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, col_rotate_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, fog_amount_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, fog_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, motion_blur_angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, motion_blur_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, shadow_angle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, shadow_distance_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, shadow_strength_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AugmentationParameter, noise_),
37,
38,
0,
42,
35,
36,
1,
43,
~0u,
2,
40,
41,
39,
~0u,
3,
4,
5,
6,
7,
8,
9,
23,
24,
25,
26,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
27,
28,
29,
30,
31,
32,
33,
34,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, rand_type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, exp_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, mean_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, spread_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, prob_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, apply_schedule_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, discretize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RandomGeneratorParameter, multiplier_),
0,
3,
1,
2,
6,
7,
4,
5,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, l2_per_location_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, l2_prescale_by_channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, normalize_by_num_entries_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, epsilon_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::L1LossParameter, plateau_),
0,
1,
2,
4,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, kernel_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, max_displacement_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, stride_1_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, stride_2_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, single_direction_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, do_abs_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CorrelationParameter, correlation_type_),
0,
1,
2,
6,
7,
4,
3,
5,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DownsampleParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DownsampleParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DownsampleParameter, top_height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DownsampleParameter, top_width_),
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReaderParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReaderParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReaderParameter, file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReaderParameter, num_),
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, folder_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, prefix_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, suffix_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, normalize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WriterParameter, scale_),
0,
1,
2,
3,
4,
5,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, antialias_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, width_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ResampleParameter, type_),
3,
0,
1,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, operation_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, value_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, mean_scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, input_scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MeanParameter, output_scale_),
1,
0,
~0u,
2,
3,
4,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CoeffScheduleParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CoeffScheduleParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CoeffScheduleParameter, half_life_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CoeffScheduleParameter, initial_coeff_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CoeffScheduleParameter, final_coeff_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, crop_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, mean_file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, mean_value_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, force_color_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TransformationParameter, force_gray_),
5,
2,
1,
0,
~0u,
3,
4,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LossParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LossParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LossParameter, ignore_label_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LossParameter, normalization_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LossParameter, normalize_),
0,
2,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AccuracyParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AccuracyParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AccuracyParameter, top_k_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AccuracyParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::AccuracyParameter, ignore_label_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ArgMaxParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ArgMaxParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ArgMaxParameter, out_max_val_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ArgMaxParameter, top_k_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ArgMaxParameter, axis_),
0,
2,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConcatParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConcatParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConcatParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConcatParameter, concat_dim_),
1,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BatchNormParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BatchNormParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BatchNormParameter, use_global_stats_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BatchNormParameter, moving_average_fraction_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BatchNormParameter, eps_),
0,
1,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BiasParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BiasParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BiasParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BiasParameter, num_axes_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::BiasParameter, filler_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ContrastiveLossParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ContrastiveLossParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ContrastiveLossParameter, margin_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ContrastiveLossParameter, legacy_version_),
1,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, num_output_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, bias_term_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, kernel_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, stride_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, dilation_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, pad_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, pad_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, kernel_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, kernel_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, stride_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, stride_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, group_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, weight_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, bias_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, engine_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ConvolutionParameter, force_nd_im2col_),
2,
12,
~0u,
~0u,
~0u,
~0u,
3,
4,
5,
6,
7,
8,
13,
0,
1,
9,
11,
10,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CropParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CropParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CropParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::CropParameter, offset_),
0,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, source_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, batch_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, rand_skip_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, backend_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, mean_file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, crop_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, force_encoded_color_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, prefetch_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, disk_reader_threads_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, huge_video_dataset_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, limit_samples_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, preselection_file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, preselection_label_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, range_start_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, range_end_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, rand_permute_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, rand_permute_order_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, rand_permute_seed_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, slice_point_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, encoding_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, verbose_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, subtract_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, permute_every_iter_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DataParameter, block_size_),
0,
18,
4,
6,
17,
1,
3,
7,
8,
19,
21,
9,
22,
2,
11,
12,
20,
10,
13,
14,
~0u,
~0u,
15,
~0u,
16,
5,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DropoutParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DropoutParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DropoutParameter, dropout_ratio_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, data_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, shape_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, num_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::DummyDataParameter, width_),
~0u,
~0u,
~0u,
~0u,
~0u,
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EltwiseParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EltwiseParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EltwiseParameter, operation_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EltwiseParameter, coeff_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EltwiseParameter, stable_prod_grad_),
0,
~0u,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ELUParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ELUParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ELUParameter, alpha_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, num_output_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, input_dim_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, bias_term_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, weight_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::EmbedParameter, bias_filler_),
2,
3,
4,
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ExpParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ExpParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ExpParameter, base_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ExpParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ExpParameter, shift_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FlattenParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FlattenParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FlattenParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::FlattenParameter, end_axis_),
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5DataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5DataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5DataParameter, source_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5DataParameter, batch_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5DataParameter, shuffle_),
0,
1,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5OutputParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5OutputParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HDF5OutputParameter, file_name_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HingeLossParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HingeLossParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::HingeLossParameter, norm_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, source_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, batch_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, rand_skip_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, shuffle_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, new_height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, new_width_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, is_color_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, mean_file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, crop_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ImageDataParameter, root_folder_),
0,
11,
4,
5,
7,
8,
9,
10,
1,
3,
6,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InfogainLossParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InfogainLossParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InfogainLossParameter, source_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, num_output_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, bias_term_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, weight_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, bias_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InnerProductParameter, transpose_),
2,
4,
0,
1,
5,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InputParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InputParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::InputParameter, shape_),
~0u,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LogParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LogParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LogParameter, base_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LogParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LogParameter, shift_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, local_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, alpha_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, beta_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, norm_region_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, k_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::LRNParameter, engine_),
2,
3,
4,
0,
5,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, batch_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MemoryDataParameter, width_),
0,
1,
2,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MVNParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MVNParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MVNParameter, normalize_variance_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MVNParameter, across_channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::MVNParameter, eps_),
1,
0,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParameterParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParameterParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ParameterParameter, shape_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, pool_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, pad_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, pad_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, kernel_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, kernel_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, kernel_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, stride_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, stride_h_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, stride_w_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, engine_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PoolingParameter, global_pooling_),
0,
2,
7,
8,
1,
3,
4,
11,
5,
6,
9,
10,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PowerParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PowerParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PowerParameter, power_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PowerParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PowerParameter, shift_),
1,
2,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, module_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, layer_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, param_str_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PythonParameter, share_in_parallel_),
0,
1,
2,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, num_output_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, weight_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, bias_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, debug_info_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::RecurrentParameter, expose_hidden_),
2,
0,
1,
3,
4,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReductionParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReductionParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReductionParameter, operation_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReductionParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReductionParameter, coeff_),
1,
0,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReLUParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReLUParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReLUParameter, negative_slope_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReLUParameter, engine_),
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReshapeParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReshapeParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReshapeParameter, shape_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReshapeParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ReshapeParameter, num_axes_),
0,
1,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, num_axes_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, bias_term_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ScaleParameter, bias_filler_),
3,
4,
0,
2,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SigmoidParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SigmoidParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SigmoidParameter, engine_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SliceParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SliceParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SliceParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SliceParameter, slice_point_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SliceParameter, slice_dim_),
1,
~0u,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SoftmaxParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SoftmaxParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SoftmaxParameter, engine_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SoftmaxParameter, axis_),
0,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TanHParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TanHParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TanHParameter, engine_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TileParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TileParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TileParameter, axis_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::TileParameter, tiles_),
1,
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ThresholdParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ThresholdParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::ThresholdParameter, threshold_),
0,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, source_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, mean_file_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, batch_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, crop_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, fg_threshold_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, bg_threshold_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, fg_fraction_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, context_pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, crop_mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, cache_images_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::WindowDataParameter, root_folder_),
0,
9,
1,
4,
5,
6,
10,
11,
12,
8,
2,
7,
3,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SPPParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SPPParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SPPParameter, pyramid_height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SPPParameter, pool_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::SPPParameter, engine_),
0,
1,
2,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, bottom_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, top_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, name_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, include_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, exclude_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, blobs_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, blob_share_mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, blobs_lr_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, weight_decay_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, loss_weight_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, accuracy_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, argmax_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, concat_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, contrastive_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, convolution_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, dropout_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, dummy_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, eltwise_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, exp_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, hdf5_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, hdf5_output_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, hinge_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, image_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, infogain_loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, inner_product_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, lrn_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, memory_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, mvn_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, pooling_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, power_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, relu_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, sigmoid_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, softmax_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, slice_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, tanh_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, threshold_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, window_data_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, transform_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, loss_param_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V1LayerParameter, layer_),
~0u,
~0u,
0,
~0u,
~0u,
32,
~0u,
~0u,
~0u,
~0u,
~0u,
~0u,
20,
16,
2,
29,
3,
4,
5,
19,
17,
30,
6,
7,
21,
8,
9,
10,
11,
15,
24,
12,
14,
22,
27,
28,
23,
26,
18,
13,
25,
31,
1,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, name_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, type_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, num_output_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, biasterm_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, weight_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, bias_filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, kernelsize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, group_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, stride_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, pool_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, dropout_ratio_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, local_size_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, alpha_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, beta_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, k_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, source_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, scale_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, meanfile_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, batchsize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, cropsize_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, mirror_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, blobs_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, blobs_lr_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, weight_decay_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, rand_skip_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, det_fg_threshold_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, det_bg_threshold_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, det_fg_fraction_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, det_context_pad_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, det_crop_mode_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, new_num_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, new_channels_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, new_height_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, new_width_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, shuffle_images_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, concat_dim_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::V0LayerParameter, hdf5_output_param_),
0,
1,
8,
23,
5,
6,
9,
10,
24,
25,
11,
26,
27,
28,
29,
31,
2,
30,
3,
12,
13,
15,
~0u,
~0u,
~0u,
17,
32,
33,
34,
18,
4,
19,
20,
21,
14,
16,
22,
7,
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PReLUParameter, _has_bits_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PReLUParameter, _internal_metadata_),
~0u,  // no _extensions_
~0u,  // no _oneof_case_
~0u,  // no _weak_field_map_
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PReLUParameter, filler_),
GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe::PReLUParameter, channel_shared_),
0,
1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
{ 0, 6, sizeof(::caffe::BlobShape)},
{ 7, 21, sizeof(::caffe::BlobProto)},
{ 30, 36, sizeof(::caffe::BlobProtoVector)},
{ 37, 49, sizeof(::caffe::Datum)},
{ 56, 70, sizeof(::caffe::FillerParameter)},
{ 79, 93, sizeof(::caffe::NetParameter)},
{ 102, 147, sizeof(::caffe::SolverParameter)},
{ 187, 196, sizeof(::caffe::SolverState)},
{ 200, 208, sizeof(::caffe::NetState)},
{ 211, 221, sizeof(::caffe::NetStateRule)},
{ 226, 235, sizeof(::caffe::ParamSpec)},
{ 239, 312, sizeof(::caffe::LayerParameter)},
{ 380, 427, sizeof(::caffe::AugmentationCoeff)},
{ 469, 520, sizeof(::caffe::AugmentationParameter)},
{ 566, 579, sizeof(::caffe::RandomGeneratorParameter)},
{ 587, 597, sizeof(::caffe::L1LossParameter)},
{ 602, 615, sizeof(::caffe::CorrelationParameter)},
{ 623, 630, sizeof(::caffe::DownsampleParameter)},
{ 632, 639, sizeof(::caffe::ReaderParameter)},
{ 641, 652, sizeof(::caffe::WriterParameter)},
{ 658, 667, sizeof(::caffe::ResampleParameter)},
{ 671, 682, sizeof(::caffe::MeanParameter)},
{ 688, 696, sizeof(::caffe::CoeffScheduleParameter)},
{ 699, 711, sizeof(::caffe::TransformationParameter)},
{ 718, 726, sizeof(::caffe::LossParameter)},
{ 729, 737, sizeof(::caffe::AccuracyParameter)},
{ 740, 748, sizeof(::caffe::ArgMaxParameter)},
{ 751, 758, sizeof(::caffe::ConcatParameter)},
{ 760, 768, sizeof(::caffe::BatchNormParameter)},
{ 771, 779, sizeof(::caffe::BiasParameter)},
{ 782, 789, sizeof(::caffe::ContrastiveLossParameter)},
{ 791, 814, sizeof(::caffe::ConvolutionParameter)},
{ 832, 839, sizeof(::caffe::CropParameter)},
{ 841, 872, sizeof(::caffe::DataParameter)},
{ 898, 904, sizeof(::caffe::DropoutParameter)},
{ 905, 916, sizeof(::caffe::DummyDataParameter)},
{ 922, 930, sizeof(::caffe::EltwiseParameter)},
{ 933, 939, sizeof(::caffe::ELUParameter)},
{ 940, 950, sizeof(::caffe::EmbedParameter)},
{ 955, 963, sizeof(::caffe::ExpParameter)},
{ 966, 973, sizeof(::caffe::FlattenParameter)},
{ 975, 983, sizeof(::caffe::HDF5DataParameter)},
{ 986, 992, sizeof(::caffe::HDF5OutputParameter)},
{ 993, 999, sizeof(::caffe::HingeLossParameter)},
{ 1000, 1017, sizeof(::caffe::ImageDataParameter)},
{ 1029, 1035, sizeof(::caffe::InfogainLossParameter)},
{ 1036, 1047, sizeof(::caffe::InnerProductParameter)},
{ 1053, 1059, sizeof(::caffe::InputParameter)},
{ 1060, 1068, sizeof(::caffe::LogParameter)},
{ 1071, 1082, sizeof(::caffe::LRNParameter)},
{ 1088, 1097, sizeof(::caffe::MemoryDataParameter)},
{ 1101, 1109, sizeof(::caffe::MVNParameter)},
{ 1112, 1118, sizeof(::caffe::ParameterParameter)},
{ 1119, 1136, sizeof(::caffe::PoolingParameter)},
{ 1148, 1156, sizeof(::caffe::PowerParameter)},
{ 1159, 1168, sizeof(::caffe::PythonParameter)},
{ 1172, 1182, sizeof(::caffe::RecurrentParameter)},
{ 1187, 1195, sizeof(::caffe::ReductionParameter)},
{ 1198, 1205, sizeof(::caffe::ReLUParameter)},
{ 1207, 1215, sizeof(::caffe::ReshapeParameter)},
{ 1218, 1228, sizeof(::caffe::ScaleParameter)},
{ 1233, 1239, sizeof(::caffe::SigmoidParameter)},
{ 1240, 1248, sizeof(::caffe::SliceParameter)},
{ 1251, 1258, sizeof(::caffe::SoftmaxParameter)},
{ 1260, 1266, sizeof(::caffe::TanHParameter)},
{ 1267, 1274, sizeof(::caffe::TileParameter)},
{ 1276, 1282, sizeof(::caffe::ThresholdParameter)},
{ 1283, 1301, sizeof(::caffe::WindowDataParameter)},
{ 1314, 1322, sizeof(::caffe::SPPParameter)},
{ 1325, 1373, sizeof(::caffe::V1LayerParameter)},
{ 1416, 1459, sizeof(::caffe::V0LayerParameter)},
{ 1497, 1504, sizeof(::caffe::PReLUParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_BlobShape_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_BlobProto_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_BlobProtoVector_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_Datum_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_FillerParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_NetParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SolverParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SolverState_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_NetState_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_NetStateRule_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ParamSpec_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_LayerParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_AugmentationCoeff_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_AugmentationParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_RandomGeneratorParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_L1LossParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_CorrelationParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_DownsampleParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ReaderParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_WriterParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ResampleParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_MeanParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_CoeffScheduleParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_TransformationParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_LossParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_AccuracyParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ArgMaxParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ConcatParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_BatchNormParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_BiasParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ContrastiveLossParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ConvolutionParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_CropParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_DataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_DropoutParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_DummyDataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_EltwiseParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ELUParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_EmbedParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ExpParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_FlattenParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_HDF5DataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_HDF5OutputParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_HingeLossParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ImageDataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_InfogainLossParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_InnerProductParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_InputParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_LogParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_LRNParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_MemoryDataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_MVNParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ParameterParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_PoolingParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_PowerParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_PythonParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_RecurrentParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ReductionParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ReLUParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ReshapeParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ScaleParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SigmoidParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SliceParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SoftmaxParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_TanHParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_TileParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_ThresholdParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_WindowDataParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_SPPParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_V1LayerParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_V0LayerParameter_default_instance_),
reinterpret_cast<const ::google::protobuf::Message*>(&::caffe::_PReLUParameter_default_instance_),
};

void protobuf_AssignDescriptors() {
AddDescriptors();
::google::protobuf::MessageFactory* factory = NULL;
AssignDescriptors(
"caffe.proto", schemas, file_default_instances, TableStruct::offsets, factory,
file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
protobuf_AssignDescriptorsOnce();
::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 72);
}

void AddDescriptorsImpl() {
InitDefaults();
static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
"\n\013caffe.proto\022\005caffe\"\034\n\tBlobShape\022\017\n\003dim"
"\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037\n\005shape\030\007 \001(\0132"
"\020.caffe.BlobShape\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004d"
"iff\030\006 \003(\002B\002\020\001\022\027\n\013double_data\030\010 \003(\001B\002\020\001\022\027"
"\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n\003num\030\001 \001(\005:\0010\022"
"\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022"
"\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobProtoVector\022\037\n\005"
"blobs\030\001 \003(\0132\020.caffe.BlobProto\"\201\001\n\005Datum\022"
"\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005wid"
"th\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001(\005\022\022\n"
"\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001(\010:\005fals"
"e\"\234\002\n\017FillerParameter\022\026\n\004type\030\001 \001(\t:\010con"
"stant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002:\0010\022"
"\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003std\030"
"\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\022B\n\rvariance"
"_norm\030\010 \001(\0162#.caffe.FillerParameter.Vari"
"anceNorm:\006FAN_IN\022\020\n\010diag_val\030\t \003(\002\"4\n\014Va"
"rianceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007A"
"VERAGE\020\002\"\216\002\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022"
"\r\n\005input\030\003 \003(\t\022%\n\013input_shape\030\010 \003(\0132\020.ca"
"ffe.BlobShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016forc"
"e_backward\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017"
".caffe.NetState\022\031\n\ndebug_info\030\007 \001(\010:\005fal"
"se\022$\n\005layer\030d \003(\0132\025.caffe.LayerParameter"
"\022\'\n\006layers\030\002 \003(\0132\027.caffe.V1LayerParamete"
"r\"\234\n\n\017SolverParameter\022\013\n\003net\030\030 \001(\t\022&\n\tne"
"t_param\030\031 \001(\0132\023.caffe.NetParameter\022\021\n\ttr"
"ain_net\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022,\n\017train"
"_net_param\030\025 \001(\0132\023.caffe.NetParameter\022+\n"
"\016test_net_param\030\026 \003(\0132\023.caffe.NetParamet"
"er\022$\n\013train_state\030\032 \001(\0132\017.caffe.NetState"
"\022#\n\ntest_state\030\033 \003(\0132\017.caffe.NetState\022\021\n"
"\ttest_iter\030\003 \003(\005\022\030\n\rtest_interval\030\004 \001(\005:"
"\0010\022 \n\021test_compute_loss\030\023 \001(\010:\005false\022!\n\023"
"test_initialization\030  \001(\010:\004true\022\017\n\007base_"
"lr\030\005 \001(\002\022\017\n\007display\030\006 \001(\005\022\027\n\014average_los"
"s\030! \001(\005:\0011\022\020\n\010max_iter\030\007 \001(\005\022\024\n\titer_siz"
"e\030$ \001(\005:\0011\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t"
" \001(\002\022\r\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n"
"\014weight_decay\030\014 \001(\002\022\037\n\023regularization_ty"
"pe\030\035 \001(\t:\002L2\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepva"
"lue\030\" \003(\005\022\032\n\016clip_gradients\030# \001(\002:\002-1\022\023\n"
"\010snapshot\030\016 \001(\005:\0010\022\027\n\017snapshot_prefix\030\017 "
"\001(\t\022\034\n\rsnapshot_diff\030\020 \001(\010:\005false\022K\n\017sna"
"pshot_format\030% \001(\0162%.caffe.SolverParamet"
"er.SnapshotFormat:\013BINARYPROTO\022;\n\013solver"
"_mode\030\021 \001(\0162!.caffe.SolverParameter.Solv"
"erMode:\003GPU\022\024\n\tdevice_id\030\022 \001(\005:\0010\022\027\n\013ran"
"dom_seed\030\024 \001(\003:\002-1\022\021\n\004type\030( \001(\t:\003SGD\022\024\n"
"\005delta\030\037 \001(\002:\0051e-08\022\030\n\tmomentum2\030\' \001(\002:\005"
"0.999\022\021\n\trms_decay\030& \001(\002\022\031\n\ndebug_info\030\027"
" \001(\010:\005false\022\"\n\024snapshot_after_train\030\034 \001("
"\010:\004true\022;\n\013solver_type\030\036 \001(\0162!.caffe.Sol"
"verParameter.SolverType:\003SGD\"+\n\016Snapshot"
"Format\022\010\n\004HDF5\020\000\022\017\n\013BINARYPROTO\020\001\"\036\n\nSol"
"verMode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"U\n\nSolverType\022"
"\007\n\003SGD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007ADAGRAD\020\002\022\013\n\007R"
"MSPROP\020\003\022\014\n\010ADADELTA\020\004\022\010\n\004ADAM\020\005\"l\n\013Solv"
"erState\022\014\n\004iter\030\001 \001(\005\022\023\n\013learned_net\030\002 \001"
"(\t\022!\n\007history\030\003 \003(\0132\020.caffe.BlobProto\022\027\n"
"\014current_step\030\004 \001(\005:\0010\"N\n\010NetState\022!\n\005ph"
"ase\030\001 \001(\0162\014.caffe.Phase:\004TEST\022\020\n\005level\030\002"
" \001(\005:\0010\022\r\n\005stage\030\003 \003(\t\"s\n\014NetStateRule\022\033"
"\n\005phase\030\001 \001(\0162\014.caffe.Phase\022\021\n\tmin_level"
"\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005stage\030\004 \003(\t"
"\022\021\n\tnot_stage\030\005 \003(\t\"\243\001\n\tParamSpec\022\014\n\004nam"
"e\030\001 \001(\t\0221\n\nshare_mode\030\002 \001(\0162\035.caffe.Para"
"mSpec.DimCheckMode\022\022\n\007lr_mult\030\003 \001(\002:\0011\022\025"
"\n\ndecay_mult\030\004 \001(\002:\0011\"*\n\014DimCheckMode\022\n\n"
"\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\372\027\n\016LayerParam"
"eter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bott"
"om\030\003 \003(\t\022\013\n\003top\030\004 \003(\t\022\033\n\005phase\030\n \001(\0162\014.c"
"affe.Phase\022\023\n\013loss_weight\030\005 \003(\002\022\037\n\005param"
"\030\006 \003(\0132\020.caffe.ParamSpec\022\037\n\005blobs\030\007 \003(\0132"
"\020.caffe.BlobProto\022\026\n\016propagate_down\030\013 \003("
"\010\022$\n\007include\030\010 \003(\0132\023.caffe.NetStateRule\022"
"$\n\007exclude\030\t \003(\0132\023.caffe.NetStateRule\0227\n"
"\017transform_param\030d \001(\0132\036.caffe.Transform"
"ationParameter\022(\n\nloss_param\030e \001(\0132\024.caf"
"fe.LossParameter\0220\n\016accuracy_param\030f \001(\013"
"2\030.caffe.AccuracyParameter\022,\n\014argmax_par"
"am\030g \001(\0132\026.caffe.ArgMaxParameter\0224\n\020batc"
"h_norm_param\030\213\001 \001(\0132\031.caffe.BatchNormPar"
"ameter\022)\n\nbias_param\030\215\001 \001(\0132\024.caffe.Bias"
"Parameter\022,\n\014concat_param\030h \001(\0132\026.caffe."
"ConcatParameter\022\?\n\026contrastive_loss_para"
"m\030i \001(\0132\037.caffe.ContrastiveLossParameter"
"\0226\n\021convolution_param\030j \001(\0132\033.caffe.Conv"
"olutionParameter\022)\n\ncrop_param\030\220\001 \001(\0132\024."
"caffe.CropParameter\022(\n\ndata_param\030k \001(\0132"
"\024.caffe.DataParameter\022.\n\rdropout_param\030l"
" \001(\0132\027.caffe.DropoutParameter\0223\n\020dummy_d"
"ata_param\030m \001(\0132\031.caffe.DummyDataParamet"
"er\022.\n\reltwise_param\030n \001(\0132\027.caffe.Eltwis"
"eParameter\022\'\n\telu_param\030\214\001 \001(\0132\023.caffe.E"
"LUParameter\022+\n\013embed_param\030\211\001 \001(\0132\025.caff"
"e.EmbedParameter\022&\n\texp_param\030o \001(\0132\023.ca"
"ffe.ExpParameter\022/\n\rflatten_param\030\207\001 \001(\013"
"2\027.caffe.FlattenParameter\0221\n\017hdf5_data_p"
"aram\030p \001(\0132\030.caffe.HDF5DataParameter\0225\n\021"
"hdf5_output_param\030q \001(\0132\032.caffe.HDF5Outp"
"utParameter\0223\n\020hinge_loss_param\030r \001(\0132\031."
"caffe.HingeLossParameter\0223\n\020image_data_p"
"aram\030s \001(\0132\031.caffe.ImageDataParameter\0229\n"
"\023infogain_loss_param\030t \001(\0132\034.caffe.Infog"
"ainLossParameter\0229\n\023inner_product_param\030"
"u \001(\0132\034.caffe.InnerProductParameter\022+\n\013i"
"nput_param\030\217\001 \001(\0132\025.caffe.InputParameter"
"\022\'\n\tlog_param\030\206\001 \001(\0132\023.caffe.LogParamete"
"r\022&\n\tlrn_param\030v \001(\0132\023.caffe.LRNParamete"
"r\0225\n\021memory_data_param\030w \001(\0132\032.caffe.Mem"
"oryDataParameter\022&\n\tmvn_param\030x \001(\0132\023.ca"
"ffe.MVNParameter\0223\n\017parameter_param\030\221\001 \001"
"(\0132\031.caffe.ParameterParameter\022.\n\rpooling"
"_param\030y \001(\0132\027.caffe.PoolingParameter\022*\n"
"\013power_param\030z \001(\0132\025.caffe.PowerParamete"
"r\022+\n\013prelu_param\030\203\001 \001(\0132\025.caffe.PReLUPar"
"ameter\022-\n\014python_param\030\202\001 \001(\0132\026.caffe.Py"
"thonParameter\0223\n\017recurrent_param\030\222\001 \001(\0132"
"\031.caffe.RecurrentParameter\0223\n\017reduction_"
"param\030\210\001 \001(\0132\031.caffe.ReductionParameter\022"
"(\n\nrelu_param\030{ \001(\0132\024.caffe.ReLUParamete"
"r\022/\n\rreshape_param\030\205\001 \001(\0132\027.caffe.Reshap"
"eParameter\022+\n\013scale_param\030\216\001 \001(\0132\025.caffe"
".ScaleParameter\022.\n\rsigmoid_param\030| \001(\0132\027"
".caffe.SigmoidParameter\022.\n\rsoftmax_param"
"\030} \001(\0132\027.caffe.SoftmaxParameter\022\'\n\tspp_p"
"aram\030\204\001 \001(\0132\023.caffe.SPPParameter\022*\n\013slic"
"e_param\030~ \001(\0132\025.caffe.SliceParameter\022(\n\n"
"tanh_param\030\177 \001(\0132\024.caffe.TanHParameter\0223"
"\n\017threshold_param\030\200\001 \001(\0132\031.caffe.Thresho"
"ldParameter\022)\n\ntile_param\030\212\001 \001(\0132\024.caffe"
".TileParameter\0226\n\021window_data_param\030\201\001 \001"
"(\0132\032.caffe.WindowDataParameter\022<\n\024coeff_"
"schedule_param\030\224\001 \001(\0132\035.caffe.CoeffSched"
"uleParameter\0229\n\022augmentation_param\030\225\001 \001("
"\0132\034.caffe.AugmentationParameter\0227\n\021corre"
"lation_param\030\226\001 \001(\0132\033.caffe.CorrelationP"
"arameter\022.\n\rl1_loss_param\030\227\001 \001(\0132\026.caffe"
".L1LossParameter\022-\n\014writer_param\030\230\001 \001(\0132"
"\026.caffe.WriterParameter\022-\n\014reader_param\030"
"\231\001 \001(\0132\026.caffe.ReaderParameter\022)\n\nmean_p"
"aram\030\232\001 \001(\0132\024.caffe.MeanParameter\0221\n\016res"
"ample_param\030\233\001 \001(\0132\030.caffe.ResampleParam"
"eter\0225\n\020downsample_param\030\234\001 \001(\0132\032.caffe."
"DownsampleParameter\022!\n\022reshape_every_ite"
"r\030\235\001 \001(\010:\004true\"\336\007\n\021AugmentationCoeff\022\021\n\006"
"mirror\030\001 \001(\002:\0010\022\r\n\002dx\030\002 \001(\002:\0010\022\r\n\002dy\030\003 \001"
"(\002:\0010\022\020\n\005angle\030\004 \001(\002:\0010\022\021\n\006zoom_x\030\005 \001(\002:"
"\0011\022\021\n\006zoom_y\030\006 \001(\002:\0011\022\020\n\005gamma\030d \001(\002:\0011\022"
"\025\n\nbrightness\030e \001(\002:\0010\022\023\n\010contrast\030f \001(\002"
":\0011\022\021\n\006color1\030g \001(\002:\0011\022\021\n\006color2\030h \001(\002:\001"
"1\022\021\n\006color3\030i \001(\002:\0011\022\026\n\013pow_nomean0\030\n \001("
"\002:\0011\022\026\n\013pow_nomean1\030\013 \001(\002:\0011\022\026\n\013pow_nome"
"an2\030\014 \001(\002:\0011\022\026\n\013add_nomean0\030\r \001(\002:\0010\022\026\n\013"
"add_nomean1\030\016 \001(\002:\0010\022\026\n\013add_nomean2\030\017 \001("
"\002:\0010\022\027\n\014mult_nomean0\030\020 \001(\002:\0011\022\027\n\014mult_no"
"mean1\030\021 \001(\002:\0011\022\027\n\014mult_nomean2\030\022 \001(\002:\0011\022"
"\030\n\rpow_withmean0\030\023 \001(\002:\0011\022\030\n\rpow_withmea"
"n1\030\024 \001(\002:\0011\022\030\n\rpow_withmean2\030\025 \001(\002:\0011\022\030\n"
"\radd_withmean0\030\026 \001(\002:\0010\022\030\n\radd_withmean1"
"\030\027 \001(\002:\0010\022\030\n\radd_withmean2\030\030 \001(\002:\0010\022\031\n\016m"
"ult_withmean0\030\031 \001(\002:\0011\022\031\n\016mult_withmean1"
"\030\032 \001(\002:\0011\022\031\n\016mult_withmean2\030\033 \001(\002:\0011\022\024\n\t"
"lmult_pow\030\034 \001(\002:\0011\022\024\n\tlmult_add\030\035 \001(\002:\0010"
"\022\025\n\nlmult_mult\030\036 \001(\002:\0011\022\024\n\tcol_angle\030\037 \001"
"(\002:\0010\022\025\n\nfog_amount\030& \001(\002:\0010\022\023\n\010fog_size"
"\030\' \001(\002:\0010\022\034\n\021motion_blur_angle\030( \001(\002:\0010\022"
"\033\n\020motion_blur_size\030) \001(\002:\0010\022\027\n\014shadow_a"
"ngle\030* \001(\002:\0010\022\032\n\017shadow_distance\030+ \001(\002:\001"
"0\022\032\n\017shadow_strength\030, \001(\002:\0010\022\020\n\005noise\030-"
" \001(\002:\0010\"\354\017\n\025AugmentationParameter\022\025\n\ncro"
"p_width\030! \001(\r:\0010\022\026\n\013crop_height\030\" \001(\r:\0010"
"\022\031\n\017write_augmented\030\002 \001(\t:\000\022\033\n\016max_multi"
"plier\030\003 \001(\002:\003255\022\"\n\023augment_during_test\030"
"\004 \001(\010:\005false\022\031\n\016recompute_mean\030\005 \001(\r:\0010\022"
"\024\n\nwrite_mean\030\006 \001(\t:\000\022\034\n\016mean_per_pixel\030"
"\007 \001(\010:\004true\022\014\n\004mean\030\022 \003(\002\022\021\n\004mode\030\010 \001(\t:"
"\003add\022\026\n\013bottomwidth\030P \001(\r:\0010\022\027\n\014bottomhe"
"ight\030Q \001(\r:\0010\022\016\n\003num\030R \001(\r:\0010\022\030\n\020chromat"
"ic_eigvec\030S \003(\002\022/\n\006mirror\030\n \001(\0132\037.caffe."
"RandomGeneratorParameter\0222\n\ttranslate\030\013 "
"\001(\0132\037.caffe.RandomGeneratorParameter\022/\n\006"
"rotate\030\014 \001(\0132\037.caffe.RandomGeneratorPara"
"meter\022-\n\004zoom\030\r \001(\0132\037.caffe.RandomGenera"
"torParameter\0220\n\007squeeze\030\016 \001(\0132\037.caffe.Ra"
"ndomGeneratorParameter\0224\n\013translate_x\030\017 "
"\001(\0132\037.caffe.RandomGeneratorParameter\0224\n\013"
"translate_y\030\020 \001(\0132\037.caffe.RandomGenerato"
"rParameter\022.\n\005gamma\030# \001(\0132\037.caffe.Random"
"GeneratorParameter\0223\n\nbrightness\030$ \001(\0132\037"
".caffe.RandomGeneratorParameter\0221\n\010contr"
"ast\030% \001(\0132\037.caffe.RandomGeneratorParamet"
"er\022.\n\005color\030& \001(\0132\037.caffe.RandomGenerato"
"rParameter\0222\n\tlmult_pow\030\024 \001(\0132\037.caffe.Ra"
"ndomGeneratorParameter\0223\n\nlmult_mult\030\025 \001"
"(\0132\037.caffe.RandomGeneratorParameter\0222\n\tl"
"mult_add\030\026 \001(\0132\037.caffe.RandomGeneratorPa"
"rameter\0220\n\007sat_pow\030\027 \001(\0132\037.caffe.RandomG"
"eneratorParameter\0221\n\010sat_mult\030\030 \001(\0132\037.ca"
"ffe.RandomGeneratorParameter\0220\n\007sat_add\030"
"\031 \001(\0132\037.caffe.RandomGeneratorParameter\0220"
"\n\007col_pow\030\032 \001(\0132\037.caffe.RandomGeneratorP"
"arameter\0221\n\010col_mult\030\033 \001(\0132\037.caffe.Rando"
"mGeneratorParameter\0220\n\007col_add\030\034 \001(\0132\037.c"
"affe.RandomGeneratorParameter\0221\n\010ladd_po"
"w\030\035 \001(\0132\037.caffe.RandomGeneratorParameter"
"\0222\n\tladd_mult\030\036 \001(\0132\037.caffe.RandomGenera"
"torParameter\0221\n\010ladd_add\030\037 \001(\0132\037.caffe.R"
"andomGeneratorParameter\0223\n\ncol_rotate\030  "
"\001(\0132\037.caffe.RandomGeneratorParameter\0223\n\n"
"fog_amount\030d \001(\0132\037.caffe.RandomGenerator"
"Parameter\0221\n\010fog_size\030e \001(\0132\037.caffe.Rand"
"omGeneratorParameter\022:\n\021motion_blur_angl"
"e\030f \001(\0132\037.caffe.RandomGeneratorParameter"
"\0229\n\020motion_blur_size\030g \001(\0132\037.caffe.Rando"
"mGeneratorParameter\0225\n\014shadow_angle\030h \001("
"\0132\037.caffe.RandomGeneratorParameter\0228\n\017sh"
"adow_distance\030i \001(\0132\037.caffe.RandomGenera"
"torParameter\0228\n\017shadow_strength\030j \001(\0132\037."
"caffe.RandomGeneratorParameter\022.\n\005noise\030"
"k \001(\0132\037.caffe.RandomGeneratorParameter\"\317"
"\001\n\030RandomGeneratorParameter\022\032\n\trand_type"
"\030\001 \001(\t:\007uniform\022\022\n\003exp\030\002 \001(\010:\005false\022\017\n\004m"
"ean\030\004 \001(\002:\0010\022\021\n\006spread\030\005 \001(\002:\0010\022\017\n\004prob\030"
"\006 \001(\002:\0011\022\034\n\016apply_schedule\030\007 \001(\010:\004true\022\031"
"\n\ndiscretize\030\010 \001(\010:\005false\022\025\n\nmultiplier\030"
"\t \001(\002:\0011\"\256\001\n\017L1LossParameter\022\036\n\017l2_per_l"
"ocation\030\001 \001(\010:\005false\022&\n\027l2_prescale_by_c"
"hannels\030\002 \001(\010:\005false\022\'\n\030normalize_by_num"
"_entries\030\003 \001(\010:\005false\022\025\n\007epsilon\030\004 \001(\002:\004"
"0.01\022\023\n\007plateau\030\271\027 \001(\002:\0010\"\263\002\n\024Correlatio"
"nParameter\022\016\n\003pad\030\002 \001(\r:\0010\022\023\n\013kernel_siz"
"e\030\003 \001(\r\022\030\n\020max_displacement\030\004 \001(\r\022\023\n\010str"
"ide_1\030\005 \001(\r:\0011\022\023\n\010stride_2\030\006 \001(\r:\0011\022\033\n\020s"
"ingle_direction\030\010 \001(\005:\0010\022\025\n\006do_abs\030\007 \001(\010"
":\005false\022O\n\020correlation_type\030\017 \001(\0162+.caff"
"e.CorrelationParameter.CorrelationType:\010"
"MULTIPLY\"-\n\017CorrelationType\022\014\n\010MULTIPLY\020"
"\000\022\014\n\010SUBTRACT\020\001\"B\n\023DownsampleParameter\022\025"
"\n\ntop_height\030\001 \001(\r:\0010\022\024\n\ttop_width\030\002 \001(\r"
":\0010\"/\n\017ReaderParameter\022\014\n\004file\030\001 \002(\t\022\016\n\003"
"num\030\002 \001(\r:\0011\"\203\001\n\017WriterParameter\022\016\n\004file"
"\030\001 \001(\t:\000\022\020\n\006folder\030\002 \001(\t:\000\022\020\n\006prefix\030\003 \001"
"(\t:\000\022\020\n\006suffix\030\004 \001(\t:\000\022\030\n\tnormalize\030\005 \001("
"\010:\005false\022\020\n\005scale\030\006 \001(\002:\0011\"\306\001\n\021ResampleP"
"arameter\022\027\n\tantialias\030\004 \001(\010:\004true\022\r\n\005wid"
"th\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022;\n\004type\030\003 \001(\0162%"
".caffe.ResampleParameter.ResampleType:\006L"
"INEAR\"<\n\014ResampleType\022\013\n\007NEAREST\020\001\022\n\n\006LI"
"NEAR\020\002\022\t\n\005CUBIC\020\003\022\010\n\004AREA\020\004\"\323\001\n\rMeanPara"
"meter\0225\n\toperation\030\001 \002(\0162\".caffe.MeanPar"
"ameter.MeanOperation\022\014\n\004file\030\002 \001(\t\022\r\n\005va"
"lue\030\003 \003(\002\022\025\n\nmean_scale\030\004 \001(\002:\0011\022\026\n\013inpu"
"t_scale\030\005 \001(\002:\0011\022\027\n\014output_scale\030\006 \001(\002:\001"
"1\"&\n\rMeanOperation\022\007\n\003ADD\020\001\022\014\n\010SUBTRACT\020"
"\004\"`\n\026CoeffScheduleParameter\022\024\n\thalf_life"
"\030\001 \001(\002:\0011\022\030\n\rinitial_coeff\030\002 \001(\002:\0011\022\026\n\013f"
"inal_coeff\030\003 \001(\002:\0011\"\266\001\n\027TransformationPa"
"rameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mirror\030\002 \001("
"\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:\0010\022\021\n\tmean_f"
"ile\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022\032\n\013force_c"
"olor\030\006 \001(\010:\005false\022\031\n\nforce_gray\030\007 \001(\010:\005f"
"alse\"\302\001\n\rLossParameter\022\024\n\014ignore_label\030\001"
" \001(\005\022D\n\rnormalization\030\003 \001(\0162&.caffe.Loss"
"Parameter.NormalizationMode:\005VALID\022\021\n\tno"
"rmalize\030\002 \001(\010\"B\n\021NormalizationMode\022\010\n\004FU"
"LL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004NONE\020"
"\003\"L\n\021AccuracyParameter\022\020\n\005top_k\030\001 \001(\r:\0011"
"\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ignore_label\030\003 \001(\005\""
"M\n\017ArgMaxParameter\022\032\n\013out_max_val\030\001 \001(\010:"
"\005false\022\020\n\005top_k\030\002 \001(\r:\0011\022\014\n\004axis\030\003 \001(\005\"9"
"\n\017ConcatParameter\022\017\n\004axis\030\002 \001(\005:\0011\022\025\n\nco"
"ncat_dim\030\001 \001(\r:\0011\"j\n\022BatchNormParameter\022"
"\030\n\020use_global_stats\030\001 \001(\010\022&\n\027moving_aver"
"age_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps\030\003 \001(\002:\005"
"1e-05\"]\n\rBiasParameter\022\017\n\004axis\030\001 \001(\005:\0011\022"
"\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.c"
"affe.FillerParameter\"L\n\030ContrastiveLossP"
"arameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016legacy_ve"
"rsion\030\002 \001(\010:\005false\"\374\003\n\024ConvolutionParame"
"ter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001"
"(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003"
"(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation\030\022 \003(\r\022\020\n\005"
"pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n\010kern"
"el_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010stride_h"
"\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005group\030\005 \001(\r:"
"\0011\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.Filler"
"Parameter\022+\n\013bias_filler\030\010 \001(\0132\026.caffe.F"
"illerParameter\022;\n\006engine\030\017 \001(\0162\".caffe.C"
"onvolutionParameter.Engine:\007DEFAULT\022\017\n\004a"
"xis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001(\010:\005f"
"alse\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t"
"\n\005CUDNN\020\002\"0\n\rCropParameter\022\017\n\004axis\030\001 \001(\005"
":\0012\022\016\n\006offset\030\002 \003(\r\"\303\007\n\rDataParameter\022\016\n"
"\006source\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n\t"
"rand_skip\030\007 \001(\r:\0010\0221\n\007backend\030\010 \001(\0162\027.ca"
"ffe.DataParameter.DB:\007LEVELDB\022\020\n\005scale\030\002"
" \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_size\030"
"\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\"\n\023force"
"_encoded_color\030\t \001(\010:\005false\022\023\n\010prefetch\030"
"\n \001(\r:\0014\022\037\n\023disk_reader_threads\030\241\037 \001(\r:\001"
"1\022\"\n\022huge_video_dataset\030\3306 \001(\010:\005false\022\032\n"
"\rlimit_samples\030\3316 \001(\005:\002-1\022\032\n\021preselectio"
"n_file\030\271\027 \001(\t\022\033\n\022preselection_label\030\272\027 \001"
"(\005\022\027\n\013range_start\030\273\027 \001(\005:\0010\022\026\n\trange_end"
"\030\274\027 \001(\005:\002-1\022\034\n\014rand_permute\030\275\027 \001(\010:\005fals"
"e\022Y\n\022rand_permute_order\030\276\027 \001(\0162\".caffe.D"
"ataParameter.RANDPERMORDER:\030FIRST_PERMUT"
"E_THEN_RANGE\022\035\n\021rand_permute_seed\030\277\027 \001(\r"
":\0010\022\024\n\013slice_point\030\300\027 \003(\r\0227\n\010encoding\030\301\027"
" \003(\0162$.caffe.DataParameter.CHANNELENCODI"
"NG\022\027\n\007verbose\030\302\027 \001(\010:\005false\022\021\n\010subtract\030"
"\303\027 \003(\002\022\036\n\022permute_every_iter\030\304\027 \001(\r:\0010\022\026"
"\n\nblock_size\030\305\027 \001(\r:\0010\"\033\n\002DB\022\013\n\007LEVELDB\020"
"\000\022\010\n\004LMDB\020\001\"7\n\017CHANNELENCODING\022\t\n\005UINT8\020"
"\001\022\016\n\nUINT16FLOW\020\002\022\t\n\005BOOL1\020\003\"K\n\rRANDPERM"
"ORDER\022\034\n\030FIRST_PERMUTE_THEN_RANGE\020\000\022\034\n\030F"
"IRST_RANGE_THEN_PERMUTE\020\001\".\n\020DropoutPara"
"meter\022\032\n\rdropout_ratio\030\001 \001(\002:\0030.5\"\240\001\n\022Du"
"mmyDataParameter\022+\n\013data_filler\030\001 \003(\0132\026."
"caffe.FillerParameter\022\037\n\005shape\030\006 \003(\0132\020.c"
"affe.BlobShape\022\013\n\003num\030\002 \003(\r\022\020\n\010channels\030"
"\003 \003(\r\022\016\n\006height\030\004 \003(\r\022\r\n\005width\030\005 \003(\r\"\245\001\n"
"\020EltwiseParameter\0229\n\toperation\030\001 \001(\0162!.c"
"affe.EltwiseParameter.EltwiseOp:\003SUM\022\r\n\005"
"coeff\030\002 \003(\002\022\036\n\020stable_prod_grad\030\003 \001(\010:\004t"
"rue\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000\022\007\n\003SUM\020\001\022\007\n\003M"
"AX\020\002\" \n\014ELUParameter\022\020\n\005alpha\030\001 \001(\002:\0011\"\254"
"\001\n\016EmbedParameter\022\022\n\nnum_output\030\001 \001(\r\022\021\n"
"\tinput_dim\030\002 \001(\r\022\027\n\tbias_term\030\003 \001(\010:\004tru"
"e\022-\n\rweight_filler\030\004 \001(\0132\026.caffe.FillerP"
"arameter\022+\n\013bias_filler\030\005 \001(\0132\026.caffe.Fi"
"llerParameter\"D\n\014ExpParameter\022\020\n\004base\030\001 "
"\001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002"
":\0010\"9\n\020FlattenParameter\022\017\n\004axis\030\001 \001(\005:\0011"
"\022\024\n\010end_axis\030\002 \001(\005:\002-1\"O\n\021HDF5DataParame"
"ter\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\022"
"\026\n\007shuffle\030\003 \001(\010:\005false\"(\n\023HDF5OutputPar"
"ameter\022\021\n\tfile_name\030\001 \001(\t\"^\n\022HingeLossPa"
"rameter\0220\n\004norm\030\001 \001(\0162\036.caffe.HingeLossP"
"arameter.Norm:\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020"
"\002\"\227\002\n\022ImageDataParameter\022\016\n\006source\030\001 \001(\t"
"\022\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n\trand_skip\030\007 \001"
"(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005false\022\025\n\nnew_hei"
"ght\030\t \001(\r:\0010\022\024\n\tnew_width\030\n \001(\r:\0010\022\026\n\010is"
"_color\030\013 \001(\010:\004true\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\t"
"mean_file\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n"
"\006mirror\030\006 \001(\010:\005false\022\025\n\013root_folder\030\014 \001("
"\t:\000\"\'\n\025InfogainLossParameter\022\016\n\006source\030\001"
" \001(\t\"\313\001\n\025InnerProductParameter\022\022\n\nnum_ou"
"tput\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022-\n\rw"
"eight_filler\030\003 \001(\0132\026.caffe.FillerParamet"
"er\022+\n\013bias_filler\030\004 \001(\0132\026.caffe.FillerPa"
"rameter\022\017\n\004axis\030\005 \001(\005:\0011\022\030\n\ttranspose\030\006 "
"\001(\010:\005false\"1\n\016InputParameter\022\037\n\005shape\030\001 "
"\003(\0132\020.caffe.BlobShape\"D\n\014LogParameter\022\020\n"
"\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shi"
"ft\030\003 \001(\002:\0010\"\270\002\n\014LRNParameter\022\025\n\nlocal_si"
"ze\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\0011\022\022\n\004beta\030\003 "
"\001(\002:\0040.75\022D\n\013norm_region\030\004 \001(\0162\036.caffe.L"
"RNParameter.NormRegion:\017ACROSS_CHANNELS\022"
"\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030\006 \001(\0162\032.caffe.LR"
"NParameter.Engine:\007DEFAULT\"5\n\nNormRegion"
"\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016WITHIN_CHANNEL\020"
"\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005C"
"UDNN\020\002\"Z\n\023MemoryDataParameter\022\022\n\nbatch_s"
"ize\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\022\016\n\006height\030\003 "
"\001(\r\022\r\n\005width\030\004 \001(\r\"d\n\014MVNParameter\022 \n\022no"
"rmalize_variance\030\001 \001(\010:\004true\022\036\n\017across_c"
"hannels\030\002 \001(\010:\005false\022\022\n\003eps\030\003 \001(\002:\0051e-09"
"\"5\n\022ParameterParameter\022\037\n\005shape\030\001 \001(\0132\020."
"caffe.BlobShape\"\242\003\n\020PoolingParameter\0225\n\004"
"pool\030\001 \001(\0162\".caffe.PoolingParameter.Pool"
"Method:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005pad_h\030\t \001"
"(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013kernel_size\030\002"
" \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010kernel_w\030\006 \001(\r"
"\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride_h\030\007 \001(\r\022\020\n"
"\010stride_w\030\010 \001(\r\0227\n\006engine\030\013 \001(\0162\036.caffe."
"PoolingParameter.Engine:\007DEFAULT\022\035\n\016glob"
"al_pooling\030\014 \001(\010:\005false\".\n\nPoolMethod\022\007\n"
"\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engin"
"e\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"F\n\016"
"PowerParameter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scal"
"e\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"g\n\017PythonPa"
"rameter\022\016\n\006module\030\001 \001(\t\022\r\n\005layer\030\002 \001(\t\022\023"
"\n\tparam_str\030\003 \001(\t:\000\022 \n\021share_in_parallel"
"\030\004 \001(\010:\005false\"\300\001\n\022RecurrentParameter\022\025\n\n"
"num_output\030\001 \001(\r:\0010\022-\n\rweight_filler\030\002 \001"
"(\0132\026.caffe.FillerParameter\022+\n\013bias_fille"
"r\030\003 \001(\0132\026.caffe.FillerParameter\022\031\n\ndebug"
"_info\030\004 \001(\010:\005false\022\034\n\rexpose_hidden\030\005 \001("
"\010:\005false\"\255\001\n\022ReductionParameter\022=\n\topera"
"tion\030\001 \001(\0162%.caffe.ReductionParameter.Re"
"ductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022\020\n\005coeff"
"\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020\001\022\010\n\004ASU"
"M\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215\001\n\rReLUParamet"
"er\022\031\n\016negative_slope\030\001 \001(\002:\0010\0224\n\006engine\030"
"\002 \001(\0162\033.caffe.ReLUParameter.Engine:\007DEFA"
"ULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n"
"\005CUDNN\020\002\"Z\n\020ReshapeParameter\022\037\n\005shape\030\001 "
"\001(\0132\020.caffe.BlobShape\022\017\n\004axis\030\002 \001(\005:\0010\022\024"
"\n\010num_axes\030\003 \001(\005:\002-1\"\245\001\n\016ScaleParameter\022"
"\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n"
"\006filler\030\003 \001(\0132\026.caffe.FillerParameter\022\030\n"
"\tbias_term\030\004 \001(\010:\005false\022+\n\013bias_filler\030\005"
" \001(\0132\026.caffe.FillerParameter\"x\n\020SigmoidP"
"arameter\0227\n\006engine\030\001 \001(\0162\036.caffe.Sigmoid"
"Parameter.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007D"
"EFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016SliceP"
"arameter\022\017\n\004axis\030\003 \001(\005:\0011\022\023\n\013slice_point"
"\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001(\r:\0011\"\211\001\n\020Softmax"
"Parameter\0227\n\006engine\030\001 \001(\0162\036.caffe.Softma"
"xParameter.Engine:\007DEFAULT\022\017\n\004axis\030\002 \001(\005"
":\0011\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n"
"\005CUDNN\020\002\"r\n\rTanHParameter\0224\n\006engine\030\001 \001("
"\0162\033.caffe.TanHParameter.Engine:\007DEFAULT\""
"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUD"
"NN\020\002\"/\n\rTileParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\r"
"\n\005tiles\030\002 \001(\005\"*\n\022ThresholdParameter\022\024\n\tt"
"hreshold\030\001 \001(\002:\0010\"\301\002\n\023WindowDataParamete"
"r\022\016\n\006source\030\001 \001(\t\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tm"
"ean_file\030\003 \001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\tcr"
"op_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022"
"\031\n\014fg_threshold\030\007 \001(\002:\0030.5\022\031\n\014bg_thresho"
"ld\030\010 \001(\002:\0030.5\022\031\n\013fg_fraction\030\t \001(\002:\0040.25"
"\022\026\n\013context_pad\030\n \001(\r:\0010\022\027\n\tcrop_mode\030\013 "
"\001(\t:\004warp\022\033\n\014cache_images\030\014 \001(\010:\005false\022\025"
"\n\013root_folder\030\r \001(\t:\000\"\353\001\n\014SPPParameter\022\026"
"\n\016pyramid_height\030\001 \001(\r\0221\n\004pool\030\002 \001(\0162\036.c"
"affe.SPPParameter.PoolMethod:\003MAX\0223\n\006eng"
"ine\030\006 \001(\0162\032.caffe.SPPParameter.Engine:\007D"
"EFAULT\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016"
"\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n"
"\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\340\023\n\020V1LayerParameter"
"\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004name\030\004 "
"\001(\t\022$\n\007include\030  \003(\0132\023.caffe.NetStateRul"
"e\022$\n\007exclude\030! \003(\0132\023.caffe.NetStateRule\022"
"/\n\004type\030\005 \001(\0162!.caffe.V1LayerParameter.L"
"ayerType\022\037\n\005blobs\030\006 \003(\0132\020.caffe.BlobProt"
"o\022\016\n\005param\030\351\007 \003(\t\022>\n\017blob_share_mode\030\352\007 "
"\003(\0162$.caffe.V1LayerParameter.DimCheckMod"
"e\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_decay\030\010 \003("
"\002\022\023\n\013loss_weight\030# \003(\002\0220\n\016accuracy_param"
"\030\033 \001(\0132\030.caffe.AccuracyParameter\022,\n\014argm"
"ax_param\030\027 \001(\0132\026.caffe.ArgMaxParameter\022,"
"\n\014concat_param\030\t \001(\0132\026.caffe.ConcatParam"
"eter\022\?\n\026contrastive_loss_param\030( \001(\0132\037.c"
"affe.ContrastiveLossParameter\0226\n\021convolu"
"tion_param\030\n \001(\0132\033.caffe.ConvolutionPara"
"meter\022(\n\ndata_param\030\013 \001(\0132\024.caffe.DataPa"
"rameter\022.\n\rdropout_param\030\014 \001(\0132\027.caffe.D"
"ropoutParameter\0223\n\020dummy_data_param\030\032 \001("
"\0132\031.caffe.DummyDataParameter\022.\n\reltwise_"
"param\030\030 \001(\0132\027.caffe.EltwiseParameter\022&\n\t"
"exp_param\030) \001(\0132\023.caffe.ExpParameter\0221\n\017"
"hdf5_data_param\030\r \001(\0132\030.caffe.HDF5DataPa"
"rameter\0225\n\021hdf5_output_param\030\016 \001(\0132\032.caf"
"fe.HDF5OutputParameter\0223\n\020hinge_loss_par"
"am\030\035 \001(\0132\031.caffe.HingeLossParameter\0223\n\020i"
"mage_data_param\030\017 \001(\0132\031.caffe.ImageDataP"
"arameter\0229\n\023infogain_loss_param\030\020 \001(\0132\034."
"caffe.InfogainLossParameter\0229\n\023inner_pro"
"duct_param\030\021 \001(\0132\034.caffe.InnerProductPar"
"ameter\022&\n\tlrn_param\030\022 \001(\0132\023.caffe.LRNPar"
"ameter\0225\n\021memory_data_param\030\026 \001(\0132\032.caff"
"e.MemoryDataParameter\022&\n\tmvn_param\030\" \001(\013"
"2\023.caffe.MVNParameter\022.\n\rpooling_param\030\023"
" \001(\0132\027.caffe.PoolingParameter\022*\n\013power_p"
"aram\030\025 \001(\0132\025.caffe.PowerParameter\022(\n\nrel"
"u_param\030\036 \001(\0132\024.caffe.ReLUParameter\022.\n\rs"
"igmoid_param\030& \001(\0132\027.caffe.SigmoidParame"
"ter\022.\n\rsoftmax_param\030\' \001(\0132\027.caffe.Softm"
"axParameter\022*\n\013slice_param\030\037 \001(\0132\025.caffe"
".SliceParameter\022(\n\ntanh_param\030% \001(\0132\024.ca"
"ffe.TanHParameter\0222\n\017threshold_param\030\031 \001"
"(\0132\031.caffe.ThresholdParameter\0225\n\021window_"
"data_param\030\024 \001(\0132\032.caffe.WindowDataParam"
"eter\0227\n\017transform_param\030$ \001(\0132\036.caffe.Tr"
"ansformationParameter\022(\n\nloss_param\030* \001("
"\0132\024.caffe.LossParameter\022&\n\005layer\030\001 \001(\0132\027"
".caffe.V0LayerParameter\"\330\004\n\tLayerType\022\010\n"
"\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY\020\001\022\n\n\006ARG"
"MAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020CONTRASTI"
"VE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004DATA\020\005\022\021\n\r"
"DECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n\nDUMMY_DA"
"TA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELTWISE\020\031\022\007\n"
"\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DATA\020\t\022\017\n\013HD"
"F5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006IM2COL\020\013\022"
"\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOSS\020\r\022\021\n\rIN"
"NER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMORY_DATA\020\035\022"
"\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022\007\n\003MVN\020\"\022"
"\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU\020\022\022\013\n\007SIG"
"MOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY_LOSS\020\033\022\013"
"\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMAX_LOSS"
"\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TANH\020\027\022\017\n\013WI"
"NDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\"*\n\014DimCheckMo"
"de\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\375\007\n\020V0Lay"
"erParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022"
"\022\n\nnum_output\030\003 \001(\r\022\026\n\010biasterm\030\004 \001(\010:\004t"
"rue\022-\n\rweight_filler\030\005 \001(\0132\026.caffe.Fille"
"rParameter\022+\n\013bias_filler\030\006 \001(\0132\026.caffe."
"FillerParameter\022\016\n\003pad\030\007 \001(\r:\0010\022\022\n\nkerne"
"lsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r:\0011\022\021\n\006stride\030"
"\n \001(\r:\0011\0225\n\004pool\030\013 \001(\0162\".caffe.V0LayerPa"
"rameter.PoolMethod:\003MAX\022\032\n\rdropout_ratio"
"\030\014 \001(\002:\0030.5\022\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005al"
"pha\030\016 \001(\002:\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014\n\001k\030\026 "
"\001(\002:\0011\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021 \001(\002:\0011"
"\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbatchsize\030\023 \001(\r\022\023\n"
"\010cropsize\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(\010:\005fals"
"e\022\037\n\005blobs\0302 \003(\0132\020.caffe.BlobProto\022\020\n\010bl"
"obs_lr\0303 \003(\002\022\024\n\014weight_decay\0304 \003(\002\022\024\n\tra"
"nd_skip\0305 \001(\r:\0010\022\035\n\020det_fg_threshold\0306 \001"
"(\002:\0030.5\022\035\n\020det_bg_threshold\0307 \001(\002:\0030.5\022\035"
"\n\017det_fg_fraction\0308 \001(\002:\0040.25\022\032\n\017det_con"
"text_pad\030: \001(\r:\0010\022\033\n\rdet_crop_mode\030; \001(\t"
":\004warp\022\022\n\007new_num\030< \001(\005:\0010\022\027\n\014new_channe"
"ls\030= \001(\005:\0010\022\025\n\nnew_height\030> \001(\005:\0010\022\024\n\tne"
"w_width\030\? \001(\005:\0010\022\035\n\016shuffle_images\030@ \001(\010"
":\005false\022\025\n\nconcat_dim\030A \001(\r:\0011\0226\n\021hdf5_o"
"utput_param\030\351\007 \001(\0132\032.caffe.HDF5OutputPar"
"ameter\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016"
"\n\nSTOCHASTIC\020\002\"W\n\016PReLUParameter\022&\n\006fill"
"er\030\001 \001(\0132\026.caffe.FillerParameter\022\035\n\016chan"
"nel_shared\030\002 \001(\010:\005false*\034\n\005Phase\022\t\n\005TRAI"
"N\020\000\022\010\n\004TEST\020\001"
};
::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
descriptor, 21053);
::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
"caffe.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
StaticDescriptorInitializer() {
AddDescriptors();
}
} static_descriptor_initializer;
}  // namespace protobuf_caffe_2eproto
namespace caffe {
const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[0];
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[1];
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[2];
}
bool SolverParameter_SolverMode_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[3];
}
bool SolverParameter_SolverType_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[4];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CorrelationParameter_CorrelationType_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[5];
}
bool CorrelationParameter_CorrelationType_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CorrelationParameter_CorrelationType CorrelationParameter::MULTIPLY;
const CorrelationParameter_CorrelationType CorrelationParameter::SUBTRACT;
const CorrelationParameter_CorrelationType CorrelationParameter::CorrelationType_MIN;
const CorrelationParameter_CorrelationType CorrelationParameter::CorrelationType_MAX;
const int CorrelationParameter::CorrelationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResampleParameter_ResampleType_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[6];
}
bool ResampleParameter_ResampleType_IsValid(int value) {
switch (value) {
case 1:
case 2:
case 3:
case 4:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResampleParameter_ResampleType ResampleParameter::NEAREST;
const ResampleParameter_ResampleType ResampleParameter::LINEAR;
const ResampleParameter_ResampleType ResampleParameter::CUBIC;
const ResampleParameter_ResampleType ResampleParameter::AREA;
const ResampleParameter_ResampleType ResampleParameter::ResampleType_MIN;
const ResampleParameter_ResampleType ResampleParameter::ResampleType_MAX;
const int ResampleParameter::ResampleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MeanParameter_MeanOperation_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[7];
}
bool MeanParameter_MeanOperation_IsValid(int value) {
switch (value) {
case 1:
case 4:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeanParameter_MeanOperation MeanParameter::ADD;
const MeanParameter_MeanOperation MeanParameter::SUBTRACT;
const MeanParameter_MeanOperation MeanParameter::MeanOperation_MIN;
const MeanParameter_MeanOperation MeanParameter::MeanOperation_MAX;
const int MeanParameter::MeanOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[8];
}
bool LossParameter_NormalizationMode_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
case 3:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[9];
}
bool ConvolutionParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[10];
}
bool DataParameter_DB_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataParameter_CHANNELENCODING_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[11];
}
bool DataParameter_CHANNELENCODING_IsValid(int value) {
switch (value) {
case 1:
case 2:
case 3:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_CHANNELENCODING DataParameter::UINT8;
const DataParameter_CHANNELENCODING DataParameter::UINT16FLOW;
const DataParameter_CHANNELENCODING DataParameter::BOOL1;
const DataParameter_CHANNELENCODING DataParameter::CHANNELENCODING_MIN;
const DataParameter_CHANNELENCODING DataParameter::CHANNELENCODING_MAX;
const int DataParameter::CHANNELENCODING_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataParameter_RANDPERMORDER_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[12];
}
bool DataParameter_RANDPERMORDER_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_RANDPERMORDER DataParameter::FIRST_PERMUTE_THEN_RANGE;
const DataParameter_RANDPERMORDER DataParameter::FIRST_RANGE_THEN_PERMUTE;
const DataParameter_RANDPERMORDER DataParameter::RANDPERMORDER_MIN;
const DataParameter_RANDPERMORDER DataParameter::RANDPERMORDER_MAX;
const int DataParameter::RANDPERMORDER_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[13];
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[14];
}
bool HingeLossParameter_Norm_IsValid(int value) {
switch (value) {
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[15];
}
bool LRNParameter_NormRegion_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[16];
}
bool LRNParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[17];
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[18];
}
bool PoolingParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[19];
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
switch (value) {
case 1:
case 2:
case 3:
case 4:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[20];
}
bool ReLUParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[21];
}
bool SigmoidParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[22];
}
bool SoftmaxParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[23];
}
bool TanHParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[24];
}
bool SPPParameter_PoolMethod_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[25];
}
bool SPPParameter_Engine_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[26];
}
bool V1LayerParameter_LayerType_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[27];
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[28];
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
switch (value) {
case 0:
case 1:
case 2:
return true;
default:
return false;
}
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return protobuf_caffe_2eproto::file_level_enum_descriptors[29];
}
bool Phase_IsValid(int value) {
switch (value) {
case 0:
case 1:
return true;
default:
return false;
}
}


// ===================================================================

void BlobShape::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsBlobShape();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
dim_(from.dim_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
// @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
_cached_size_ = 0;
}

BlobShape::~BlobShape() {
// @@protoc_insertion_point(destructor:caffe.BlobShape)
SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobShape& BlobShape::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsBlobShape();
return *internal_default_instance();
}

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
BlobShape* n = new BlobShape;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

dim_.Clear();
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool BlobShape::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.BlobShape)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// repeated int64 dim = 1 [packed = true];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
input, this->mutable_dim())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
1, 10u, input, this->mutable_dim())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.BlobShape)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.BlobShape)
return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.BlobShape)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated int64 dim = 1 [packed = true];
if (this->dim_size() > 0) {
::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
_dim_cached_byte_size_));
}
for (int i = 0, n = this->dim_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
this->dim(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated int64 dim = 1 [packed = true];
if (this->dim_size() > 0) {
target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
1,
::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
target);
target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
static_cast< ::google::protobuf::int32>(
_dim_cached_byte_size_), target);
target = ::google::protobuf::internal::WireFormatLite::
WriteInt64NoTagToArray(this->dim_, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated int64 dim = 1 [packed = true];
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
Int64Size(this->dim_);
if (data_size > 0) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
static_cast< ::google::protobuf::int32>(data_size));
}
int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_dim_cached_byte_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
total_size += data_size;
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
GOOGLE_DCHECK_NE(&from, this);
const BlobShape* source =
::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
MergeFrom(*source);
}
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
return true;
}

void BlobShape::Swap(BlobShape* other) {
if (other == this) return;
InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
using std::swap;
dim_.InternalSwap(&other->dim_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlobProto::InitAsDefaultInstance() {
::caffe::_BlobProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
::caffe::BlobShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsBlobProto();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
data_(from.data_),
diff_(from.diff_),
double_data_(from.double_data_),
double_diff_(from.double_diff_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_shape()) {
shape_ = new ::caffe::BlobShape(*from.shape_);
} else {
shape_ = NULL;
}
::memcpy(&num_, &from.num_,
static_cast<size_t>(reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&num_)) + sizeof(width_));
// @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
_cached_size_ = 0;
::memset(&shape_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&shape_)) + sizeof(width_));
}

BlobProto::~BlobProto() {
// @@protoc_insertion_point(destructor:caffe.BlobProto)
SharedDtor();
}

void BlobProto::SharedDtor() {
if (this != internal_default_instance()) delete shape_;
}

void BlobProto::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProto& BlobProto::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsBlobProto();
return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
BlobProto* n = new BlobProto;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

data_.Clear();
diff_.Clear();
double_data_.Clear();
double_diff_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(shape_ != NULL);
shape_->Clear();
}
if (cached_has_bits & 30u) {
::memset(&num_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&num_)) + sizeof(width_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.BlobProto)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 num = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_num();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &num_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 channels = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 height = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &height_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 width = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &width_)));
} else {
goto handle_unusual;
}
break;
}

// repeated float data = 5 [packed = true];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_data())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 42u, input, this->mutable_data())));
} else {
goto handle_unusual;
}
break;
}

// repeated float diff = 6 [packed = true];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_diff())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 50u, input, this->mutable_diff())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.BlobShape shape = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shape()));
} else {
goto handle_unusual;
}
break;
}

// repeated double double_data = 8 [packed = true];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
input, this->mutable_double_data())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
1, 66u, input, this->mutable_double_data())));
} else {
goto handle_unusual;
}
break;
}

// repeated double double_diff = 9 [packed = true];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
input, this->mutable_double_diff())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
1, 74u, input, this->mutable_double_diff())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.BlobProto)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.BlobProto)
return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.BlobProto)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 num = 1 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
}

// optional int32 channels = 2 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
}

// optional int32 height = 3 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
}

// optional int32 width = 4 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
}

// repeated float data = 5 [packed = true];
if (this->data_size() > 0) {
::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
_data_cached_byte_size_));
::google::protobuf::internal::WireFormatLite::WriteFloatArray(
this->data().data(), this->data_size(), output);
}

// repeated float diff = 6 [packed = true];
if (this->diff_size() > 0) {
::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
_diff_cached_byte_size_));
::google::protobuf::internal::WireFormatLite::WriteFloatArray(
this->diff().data(), this->diff_size(), output);
}

// optional .caffe.BlobShape shape = 7;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
7, *this->shape_, output);
}

// repeated double double_data = 8 [packed = true];
if (this->double_data_size() > 0) {
::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
_double_data_cached_byte_size_));
::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
this->double_data().data(), this->double_data_size(), output);
}

// repeated double double_diff = 9 [packed = true];
if (this->double_diff_size() > 0) {
::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
_double_diff_cached_byte_size_));
::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
this->double_diff().data(), this->double_diff_size(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 num = 1 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
}

// optional int32 channels = 2 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
}

// optional int32 height = 3 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
}

// optional int32 width = 4 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
}

// repeated float data = 5 [packed = true];
if (this->data_size() > 0) {
target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
5,
::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
target);
target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
static_cast< ::google::protobuf::int32>(
_data_cached_byte_size_), target);
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatNoTagToArray(this->data_, target);
}

// repeated float diff = 6 [packed = true];
if (this->diff_size() > 0) {
target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
6,
::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
target);
target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
static_cast< ::google::protobuf::int32>(
_diff_cached_byte_size_), target);
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatNoTagToArray(this->diff_, target);
}

// optional .caffe.BlobShape shape = 7;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
7, *this->shape_, deterministic, target);
}

// repeated double double_data = 8 [packed = true];
if (this->double_data_size() > 0) {
target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
8,
::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
target);
target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
static_cast< ::google::protobuf::int32>(
_double_data_cached_byte_size_), target);
target = ::google::protobuf::internal::WireFormatLite::
WriteDoubleNoTagToArray(this->double_data_, target);
}

// repeated double double_diff = 9 [packed = true];
if (this->double_diff_size() > 0) {
target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
9,
::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
target);
target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
static_cast< ::google::protobuf::int32>(
_double_diff_cached_byte_size_), target);
target = ::google::protobuf::internal::WireFormatLite::
WriteDoubleNoTagToArray(this->double_diff_, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float data = 5 [packed = true];
{
unsigned int count = static_cast<unsigned int>(this->data_size());
size_t data_size = 4UL * count;
if (data_size > 0) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
static_cast< ::google::protobuf::int32>(data_size));
}
int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_data_cached_byte_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
total_size += data_size;
}

// repeated float diff = 6 [packed = true];
{
unsigned int count = static_cast<unsigned int>(this->diff_size());
size_t data_size = 4UL * count;
if (data_size > 0) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
static_cast< ::google::protobuf::int32>(data_size));
}
int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_diff_cached_byte_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
total_size += data_size;
}

// repeated double double_data = 8 [packed = true];
{
unsigned int count = static_cast<unsigned int>(this->double_data_size());
size_t data_size = 8UL * count;
if (data_size > 0) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
static_cast< ::google::protobuf::int32>(data_size));
}
int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_double_data_cached_byte_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
total_size += data_size;
}

// repeated double double_diff = 9 [packed = true];
{
unsigned int count = static_cast<unsigned int>(this->double_diff_size());
size_t data_size = 8UL * count;
if (data_size > 0) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
static_cast< ::google::protobuf::int32>(data_size));
}
int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_double_diff_cached_byte_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
total_size += data_size;
}

if (_has_bits_[0 / 32] & 31u) {
// optional .caffe.BlobShape shape = 7;
if (has_shape()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shape_);
}

// optional int32 num = 1 [default = 0];
if (has_num()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->num());
}

// optional int32 channels = 2 [default = 0];
if (has_channels()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->channels());
}

// optional int32 height = 3 [default = 0];
if (has_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->height());
}

// optional int32 width = 4 [default = 0];
if (has_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->width());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
GOOGLE_DCHECK_NE(&from, this);
const BlobProto* source =
::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
MergeFrom(*source);
}
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

data_.MergeFrom(from.data_);
diff_.MergeFrom(from.diff_);
double_data_.MergeFrom(from.double_data_);
double_diff_.MergeFrom(from.double_diff_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
}
if (cached_has_bits & 0x00000002u) {
num_ = from.num_;
}
if (cached_has_bits & 0x00000004u) {
channels_ = from.channels_;
}
if (cached_has_bits & 0x00000008u) {
height_ = from.height_;
}
if (cached_has_bits & 0x00000010u) {
width_ = from.width_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
return true;
}

void BlobProto::Swap(BlobProto* other) {
if (other == this) return;
InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
using std::swap;
data_.InternalSwap(&other->data_);
diff_.InternalSwap(&other->diff_);
double_data_.InternalSwap(&other->double_data_);
double_diff_.InternalSwap(&other->double_diff_);
swap(shape_, other->shape_);
swap(num_, other->num_);
swap(channels_, other->channels_);
swap(height_, other->height_);
swap(width_, other->width_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlobProtoVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProtoVector::BlobProtoVector()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsBlobProtoVector();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}
BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
blobs_(from.blobs_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
// @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
_cached_size_ = 0;
}

BlobProtoVector::~BlobProtoVector() {
// @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
SharedDtor();
}

void BlobProtoVector::SharedDtor() {
}

void BlobProtoVector::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsBlobProtoVector();
return *internal_default_instance();
}

BlobProtoVector* BlobProtoVector::New(::google::protobuf::Arena* arena) const {
BlobProtoVector* n = new BlobProtoVector;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProtoVector)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

blobs_.Clear();
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool BlobProtoVector::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// repeated .caffe.BlobProto blobs = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blobs()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.BlobProto blobs = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, this->blobs(static_cast<int>(i)), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.BlobProto blobs = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, this->blobs(static_cast<int>(i)), deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
return target;
}

size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProtoVector)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.BlobProto blobs = 1;
{
unsigned int count = static_cast<unsigned int>(this->blobs_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->blobs(static_cast<int>(i)));
}
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProtoVector)
GOOGLE_DCHECK_NE(&from, this);
const BlobProtoVector* source =
::google::protobuf::internal::DynamicCastToGenerated<const BlobProtoVector>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProtoVector)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProtoVector)
MergeFrom(*source);
}
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProtoVector)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

blobs_.MergeFrom(from.blobs_);
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProtoVector)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProtoVector)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {
return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
if (other == this) return;
InternalSwap(other);
}
void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
using std::swap;
blobs_.InternalSwap(&other->blobs_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Datum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsDatum();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.Datum)
}
Datum::Datum(const Datum& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
float_data_(from.float_data_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_data()) {
data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
}
::memcpy(&channels_, &from.channels_,
static_cast<size_t>(reinterpret_cast<char*>(&encoded_) -
reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
// @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
_cached_size_ = 0;
data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&channels_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&encoded_) -
reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
}

Datum::~Datum() {
// @@protoc_insertion_point(destructor:caffe.Datum)
SharedDtor();
}

void Datum::SharedDtor() {
data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum& Datum::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsDatum();
return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
Datum* n = new Datum;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

float_data_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*data_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 62u) {
::memset(&channels_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&encoded_) -
reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.Datum)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 channels = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 height = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &height_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 width = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &width_)));
} else {
goto handle_unusual;
}
break;
}

// optional bytes data = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
input, this->mutable_data()));
} else {
goto handle_unusual;
}
break;
}

// optional int32 label = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_label();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &label_)));
} else {
goto handle_unusual;
}
break;
}

// repeated float float_data = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 53u, input, this->mutable_float_data())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_float_data())));
} else {
goto handle_unusual;
}
break;
}

// optional bool encoded = 7 [default = false];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_encoded();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &encoded_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.Datum)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.Datum)
return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.Datum)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 channels = 1;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
}

// optional int32 height = 2;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
}

// optional int32 width = 3;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
}

// optional bytes data = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
4, this->data(), output);
}

// optional int32 label = 5;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
}

// repeated float float_data = 6;
for (int i = 0, n = this->float_data_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
6, this->float_data(i), output);
}

// optional bool encoded = 7 [default = false];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 channels = 1;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
}

// optional int32 height = 2;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
}

// optional int32 width = 3;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
}

// optional bytes data = 4;
if (cached_has_bits & 0x00000001u) {
target =
::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
4, this->data(), target);
}

// optional int32 label = 5;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
}

// repeated float float_data = 6;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(6, this->float_data_, target);

// optional bool encoded = 7 [default = false];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float float_data = 6;
{
unsigned int count = static_cast<unsigned int>(this->float_data_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->float_data_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 63u) {
// optional bytes data = 4;
if (has_data()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::BytesSize(
this->data());
}

// optional int32 channels = 1;
if (has_channels()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->channels());
}

// optional int32 height = 2;
if (has_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->height());
}

// optional int32 width = 3;
if (has_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->width());
}

// optional int32 label = 5;
if (has_label()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->label());
}

// optional bool encoded = 7 [default = false];
if (has_encoded()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
GOOGLE_DCHECK_NE(&from, this);
const Datum* source =
::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
MergeFrom(*source);
}
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

float_data_.MergeFrom(from.float_data_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 63u) {
if (cached_has_bits & 0x00000001u) {
set_has_data();
data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
}
if (cached_has_bits & 0x00000002u) {
channels_ = from.channels_;
}
if (cached_has_bits & 0x00000004u) {
height_ = from.height_;
}
if (cached_has_bits & 0x00000008u) {
width_ = from.width_;
}
if (cached_has_bits & 0x00000010u) {
label_ = from.label_;
}
if (cached_has_bits & 0x00000020u) {
encoded_ = from.encoded_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool Datum::IsInitialized() const {
return true;
}

void Datum::Swap(Datum* other) {
if (other == this) return;
InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
using std::swap;
float_data_.InternalSwap(&other->float_data_);
data_.Swap(&other->data_);
swap(channels_, other->channels_);
swap(height_, other->height_);
swap(width_, other->width_);
swap(label_, other->label_);
swap(encoded_, other->encoded_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FillerParameter::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
const int FillerParameter::kDiagValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsFillerParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
diag_val_(from.diag_val_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
type_.UnsafeSetDefault(&::caffe::FillerParameter::_default_type_.get());
if (from.has_type()) {
type_.AssignWithDefault(&::caffe::FillerParameter::_default_type_.get(), from.type_);
}
::memcpy(&value_, &from.value_,
static_cast<size_t>(reinterpret_cast<char*>(&std_) -
reinterpret_cast<char*>(&value_)) + sizeof(std_));
// @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
_cached_size_ = 0;
type_.UnsafeSetDefault(&::caffe::FillerParameter::_default_type_.get());
::memset(&value_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&variance_norm_) -
reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
sparse_ = -1;
max_ = 1;
std_ = 1;
}

FillerParameter::~FillerParameter() {
// @@protoc_insertion_point(destructor:caffe.FillerParameter)
SharedDtor();
}

void FillerParameter::SharedDtor() {
type_.DestroyNoArena(&::caffe::FillerParameter::_default_type_.get());
}

void FillerParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FillerParameter& FillerParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsFillerParameter();
return *internal_default_instance();
}

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
FillerParameter* n = new FillerParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

diag_val_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!type_.IsDefault(&::caffe::FillerParameter::_default_type_.get()));
(*type_.UnsafeRawStringPointer())->assign(*&::caffe::FillerParameter::_default_type_.get());
}
if (cached_has_bits & 254u) {
::memset(&value_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&variance_norm_) -
reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
sparse_ = -1;
max_ = 1;
std_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.FillerParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string type = 1 [default = "constant"];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.FillerParameter.type");
} else {
goto handle_unusual;
}
break;
}

// optional float value = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_value();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &value_)));
} else {
goto handle_unusual;
}
break;
}

// optional float min = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_min();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &min_)));
} else {
goto handle_unusual;
}
break;
}

// optional float max = 4 [default = 1];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_max();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &max_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mean = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_mean();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mean_)));
} else {
goto handle_unusual;
}
break;
}

// optional float std = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
set_has_std();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &std_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 sparse = 7 [default = -1];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_sparse();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &sparse_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
} else {
mutable_unknown_fields()->AddVarint(
8, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// repeated float diag_val = 9;
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 77u, input, this->mutable_diag_val())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_diag_val())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.FillerParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string type = 1 [default = "constant"];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.FillerParameter.type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->type(), output);
}

// optional float value = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
}

// optional float min = 3 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
}

// optional float max = 4 [default = 1];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
}

// optional float mean = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
}

// optional float std = 6 [default = 1];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
}

// optional int32 sparse = 7 [default = -1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
8, this->variance_norm(), output);
}

// repeated float diag_val = 9;
for (int i = 0, n = this->diag_val_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
9, this->diag_val(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string type = 1 [default = "constant"];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.FillerParameter.type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->type(), target);
}

// optional float value = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
}

// optional float min = 3 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
}

// optional float max = 4 [default = 1];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
}

// optional float mean = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
}

// optional float std = 6 [default = 1];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
}

// optional int32 sparse = 7 [default = -1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
8, this->variance_norm(), target);
}

// repeated float diag_val = 9;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(9, this->diag_val_, target);

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float diag_val = 9;
{
unsigned int count = static_cast<unsigned int>(this->diag_val_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->diag_val_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string type = 1 [default = "constant"];
if (has_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->type());
}

// optional float value = 2 [default = 0];
if (has_value()) {
total_size += 1 + 4;
}

// optional float min = 3 [default = 0];
if (has_min()) {
total_size += 1 + 4;
}

// optional float mean = 5 [default = 0];
if (has_mean()) {
total_size += 1 + 4;
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
if (has_variance_norm()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
}

// optional int32 sparse = 7 [default = -1];
if (has_sparse()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->sparse());
}

// optional float max = 4 [default = 1];
if (has_max()) {
total_size += 1 + 4;
}

// optional float std = 6 [default = 1];
if (has_std()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
GOOGLE_DCHECK_NE(&from, this);
const FillerParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
MergeFrom(*source);
}
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

diag_val_.MergeFrom(from.diag_val_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_type();
type_.AssignWithDefault(&::caffe::FillerParameter::_default_type_.get(), from.type_);
}
if (cached_has_bits & 0x00000002u) {
value_ = from.value_;
}
if (cached_has_bits & 0x00000004u) {
min_ = from.min_;
}
if (cached_has_bits & 0x00000008u) {
mean_ = from.mean_;
}
if (cached_has_bits & 0x00000010u) {
variance_norm_ = from.variance_norm_;
}
if (cached_has_bits & 0x00000020u) {
sparse_ = from.sparse_;
}
if (cached_has_bits & 0x00000040u) {
max_ = from.max_;
}
if (cached_has_bits & 0x00000080u) {
std_ = from.std_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
return true;
}

void FillerParameter::Swap(FillerParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
using std::swap;
diag_val_.InternalSwap(&other->diag_val_);
type_.Swap(&other->type_);
swap(value_, other->value_);
swap(min_, other->min_);
swap(mean_, other->mean_);
swap(variance_norm_, other->variance_norm_);
swap(sparse_, other->sparse_);
swap(max_, other->max_);
swap(std_, other->std_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetParameter::InitAsDefaultInstance() {
::caffe::_NetParameter_default_instance_._instance.get_mutable()->state_ = const_cast< ::caffe::NetState*>(
::caffe::NetState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsNetParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
layers_(from.layers_),
input_(from.input_),
input_dim_(from.input_dim_),
input_shape_(from.input_shape_),
layer_(from.layer_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_name()) {
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (from.has_state()) {
state_ = new ::caffe::NetState(*from.state_);
} else {
state_ = NULL;
}
::memcpy(&force_backward_, &from.force_backward_,
static_cast<size_t>(reinterpret_cast<char*>(&debug_info_) -
reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
// @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
_cached_size_ = 0;
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&state_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&debug_info_) -
reinterpret_cast<char*>(&state_)) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
// @@protoc_insertion_point(destructor:caffe.NetParameter)
SharedDtor();
}

void NetParameter::SharedDtor() {
name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (this != internal_default_instance()) delete state_;
}

void NetParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetParameter& NetParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsNetParameter();
return *internal_default_instance();
}

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
NetParameter* n = new NetParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

layers_.Clear();
input_.Clear();
input_dim_.Clear();
input_shape_.Clear();
layer_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*name_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(state_ != NULL);
state_->Clear();
}
}
::memset(&force_backward_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&debug_info_) -
reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.NetParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string name = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.NetParameter.name");
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.V1LayerParameter layers = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_layers()));
} else {
goto handle_unusual;
}
break;
}

// repeated string input = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_input()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->input(this->input_size() - 1).data(),
static_cast<int>(this->input(this->input_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.NetParameter.input");
} else {
goto handle_unusual;
}
break;
}

// repeated int32 input_dim = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
1, 32u, input, this->mutable_input_dim())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, this->mutable_input_dim())));
} else {
goto handle_unusual;
}
break;
}

// optional bool force_backward = 5 [default = false];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_force_backward();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &force_backward_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.NetState state = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_state()));
} else {
goto handle_unusual;
}
break;
}

// optional bool debug_info = 7 [default = false];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_debug_info();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &debug_info_)));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobShape input_shape = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_input_shape()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.LayerParameter layer = 100;
case 100: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_layer()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.NetParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.NetParameter)
return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.NetParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetParameter.name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->name(), output);
}

// repeated .caffe.V1LayerParameter layers = 2;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
2, this->layers(static_cast<int>(i)), output);
}

// repeated string input = 3;
for (int i = 0, n = this->input_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->input(i).data(), static_cast<int>(this->input(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetParameter.input");
::google::protobuf::internal::WireFormatLite::WriteString(
3, this->input(i), output);
}

// repeated int32 input_dim = 4;
for (int i = 0, n = this->input_dim_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteInt32(
4, this->input_dim(i), output);
}

// optional bool force_backward = 5 [default = false];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
}

// optional .caffe.NetState state = 6;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
6, *this->state_, output);
}

// optional bool debug_info = 7 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
}

// repeated .caffe.BlobShape input_shape = 8;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->input_shape_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
8, this->input_shape(static_cast<int>(i)), output);
}

// repeated .caffe.LayerParameter layer = 100;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
100, this->layer(static_cast<int>(i)), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetParameter.name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->name(), target);
}

// repeated .caffe.V1LayerParameter layers = 2;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
2, this->layers(static_cast<int>(i)), deterministic, target);
}

// repeated string input = 3;
for (int i = 0, n = this->input_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->input(i).data(), static_cast<int>(this->input(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetParameter.input");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(3, this->input(i), target);
}

// repeated int32 input_dim = 4;
target = ::google::protobuf::internal::WireFormatLite::
WriteInt32ToArray(4, this->input_dim_, target);

// optional bool force_backward = 5 [default = false];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
}

// optional .caffe.NetState state = 6;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
6, *this->state_, deterministic, target);
}

// optional bool debug_info = 7 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
}

// repeated .caffe.BlobShape input_shape = 8;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->input_shape_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
8, this->input_shape(static_cast<int>(i)), deterministic, target);
}

// repeated .caffe.LayerParameter layer = 100;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
100, this->layer(static_cast<int>(i)), deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.V1LayerParameter layers = 2;
{
unsigned int count = static_cast<unsigned int>(this->layers_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->layers(static_cast<int>(i)));
}
}

// repeated string input = 3;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->input_size());
for (int i = 0, n = this->input_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->input(i));
}

// repeated int32 input_dim = 4;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
Int32Size(this->input_dim_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->input_dim_size());
total_size += data_size;
}

// repeated .caffe.BlobShape input_shape = 8;
{
unsigned int count = static_cast<unsigned int>(this->input_shape_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->input_shape(static_cast<int>(i)));
}
}

// repeated .caffe.LayerParameter layer = 100;
{
unsigned int count = static_cast<unsigned int>(this->layer_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->layer(static_cast<int>(i)));
}
}

if (_has_bits_[0 / 32] & 15u) {
// optional string name = 1;
if (has_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->name());
}

// optional .caffe.NetState state = 6;
if (has_state()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->state_);
}

// optional bool force_backward = 5 [default = false];
if (has_force_backward()) {
total_size += 1 + 1;
}

// optional bool debug_info = 7 [default = false];
if (has_debug_info()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
GOOGLE_DCHECK_NE(&from, this);
const NetParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
MergeFrom(*source);
}
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

layers_.MergeFrom(from.layers_);
input_.MergeFrom(from.input_);
input_dim_.MergeFrom(from.input_dim_);
input_shape_.MergeFrom(from.input_shape_);
layer_.MergeFrom(from.layer_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
set_has_name();
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (cached_has_bits & 0x00000002u) {
mutable_state()->::caffe::NetState::MergeFrom(from.state());
}
if (cached_has_bits & 0x00000004u) {
force_backward_ = from.force_backward_;
}
if (cached_has_bits & 0x00000008u) {
debug_info_ = from.debug_info_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
return true;
}

void NetParameter::Swap(NetParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
using std::swap;
layers_.InternalSwap(&other->layers_);
input_.InternalSwap(&other->input_);
input_dim_.InternalSwap(&other->input_dim_);
input_shape_.InternalSwap(&other->input_shape_);
layer_.InternalSwap(&other->layer_);
name_.Swap(&other->name_);
swap(state_, other->state_);
swap(force_backward_, other->force_backward_);
swap(debug_info_, other->debug_info_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolverParameter::InitAsDefaultInstance() {
::caffe::_SolverParameter_default_instance_._instance.get_mutable()->net_param_ = const_cast< ::caffe::NetParameter*>(
::caffe::NetParameter::internal_default_instance());
::caffe::_SolverParameter_default_instance_._instance.get_mutable()->train_net_param_ = const_cast< ::caffe::NetParameter*>(
::caffe::NetParameter::internal_default_instance());
::caffe::_SolverParameter_default_instance_._instance.get_mutable()->train_state_ = const_cast< ::caffe::NetState*>(
::caffe::NetState::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_regularization_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSolverParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SolverParameter)
}
SolverParameter::SolverParameter(const SolverParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
test_net_(from.test_net_),
test_iter_(from.test_iter_),
test_net_param_(from.test_net_param_),
test_state_(from.test_state_),
stepvalue_(from.stepvalue_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_train_net()) {
train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
}
lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_lr_policy()) {
lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
}
snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_snapshot_prefix()) {
snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
}
net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_net()) {
net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
}
regularization_type_.UnsafeSetDefault(&::caffe::SolverParameter::_default_regularization_type_.get());
if (from.has_regularization_type()) {
regularization_type_.AssignWithDefault(&::caffe::SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
}
type_.UnsafeSetDefault(&::caffe::SolverParameter::_default_type_.get());
if (from.has_type()) {
type_.AssignWithDefault(&::caffe::SolverParameter::_default_type_.get(), from.type_);
}
if (from.has_train_net_param()) {
train_net_param_ = new ::caffe::NetParameter(*from.train_net_param_);
} else {
train_net_param_ = NULL;
}
if (from.has_net_param()) {
net_param_ = new ::caffe::NetParameter(*from.net_param_);
} else {
net_param_ = NULL;
}
if (from.has_train_state()) {
train_state_ = new ::caffe::NetState(*from.train_state_);
} else {
train_state_ = NULL;
}
::memcpy(&test_interval_, &from.test_interval_,
static_cast<size_t>(reinterpret_cast<char*>(&momentum2_) -
reinterpret_cast<char*>(&test_interval_)) + sizeof(momentum2_));
// @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
regularization_type_.UnsafeSetDefault(&::caffe::SolverParameter::_default_regularization_type_.get());
type_.UnsafeSetDefault(&::caffe::SolverParameter::_default_type_.get());
::memset(&train_net_param_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&rms_decay_) -
reinterpret_cast<char*>(&train_net_param_)) + sizeof(rms_decay_));
random_seed_ = GOOGLE_LONGLONG(-1);
solver_mode_ = 1;
test_initialization_ = true;
snapshot_after_train_ = true;
delta_ = 1e-08f;
average_loss_ = 1;
clip_gradients_ = -1;
iter_size_ = 1;
snapshot_format_ = 1;
momentum2_ = 0.999f;
_cached_size_ = 0;
}

SolverParameter::~SolverParameter() {
// @@protoc_insertion_point(destructor:caffe.SolverParameter)
SharedDtor();
}

void SolverParameter::SharedDtor() {
train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
regularization_type_.DestroyNoArena(&::caffe::SolverParameter::_default_regularization_type_.get());
type_.DestroyNoArena(&::caffe::SolverParameter::_default_type_.get());
if (this != internal_default_instance()) delete train_net_param_;
if (this != internal_default_instance()) delete net_param_;
if (this != internal_default_instance()) delete train_state_;
}

void SolverParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverParameter& SolverParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSolverParameter();
return *internal_default_instance();
}

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
SolverParameter* n = new SolverParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

test_net_.Clear();
test_iter_.Clear();
test_net_param_.Clear();
test_state_.Clear();
stepvalue_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!train_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*train_net_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!lr_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*lr_policy_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!snapshot_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*snapshot_prefix_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(!net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*net_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(!regularization_type_.IsDefault(&::caffe::SolverParameter::_default_regularization_type_.get()));
(*regularization_type_.UnsafeRawStringPointer())->assign(*&::caffe::SolverParameter::_default_regularization_type_.get());
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(!type_.IsDefault(&::caffe::SolverParameter::_default_type_.get()));
(*type_.UnsafeRawStringPointer())->assign(*&::caffe::SolverParameter::_default_type_.get());
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(train_net_param_ != NULL);
train_net_param_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(net_param_ != NULL);
net_param_->Clear();
}
}
if (cached_has_bits & 0x00000100u) {
GOOGLE_DCHECK(train_state_ != NULL);
train_state_->Clear();
}
if (cached_has_bits & 65024u) {
::memset(&test_interval_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&momentum_) -
reinterpret_cast<char*>(&test_interval_)) + sizeof(momentum_));
}
if (cached_has_bits & 16711680u) {
::memset(&weight_decay_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&solver_type_) -
reinterpret_cast<char*>(&weight_decay_)) + sizeof(solver_type_));
}
if (cached_has_bits & 4278190080u) {
rms_decay_ = 0;
random_seed_ = GOOGLE_LONGLONG(-1);
solver_mode_ = 1;
test_initialization_ = true;
snapshot_after_train_ = true;
delta_ = 1e-08f;
average_loss_ = 1;
clip_gradients_ = -1;
}
cached_has_bits = _has_bits_[1];
if (cached_has_bits & 7u) {
iter_size_ = 1;
snapshot_format_ = 1;
momentum2_ = 0.999f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SolverParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string train_net = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_train_net()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->train_net().data(), static_cast<int>(this->train_net().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.train_net");
} else {
goto handle_unusual;
}
break;
}

// repeated string test_net = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_test_net()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->test_net(this->test_net_size() - 1).data(),
static_cast<int>(this->test_net(this->test_net_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.test_net");
} else {
goto handle_unusual;
}
break;
}

// repeated int32 test_iter = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
1, 24u, input, this->mutable_test_iter())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, this->mutable_test_iter())));
} else {
goto handle_unusual;
}
break;
}

// optional int32 test_interval = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_test_interval();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &test_interval_)));
} else {
goto handle_unusual;
}
break;
}

// optional float base_lr = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_base_lr();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &base_lr_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 display = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_display();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &display_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 max_iter = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_max_iter();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &max_iter_)));
} else {
goto handle_unusual;
}
break;
}

// optional string lr_policy = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_lr_policy()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.lr_policy");
} else {
goto handle_unusual;
}
break;
}

// optional float gamma = 9;
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
set_has_gamma();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &gamma_)));
} else {
goto handle_unusual;
}
break;
}

// optional float power = 10;
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
set_has_power();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &power_)));
} else {
goto handle_unusual;
}
break;
}

// optional float momentum = 11;
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
set_has_momentum();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &momentum_)));
} else {
goto handle_unusual;
}
break;
}

// optional float weight_decay = 12;
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
set_has_weight_decay();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &weight_decay_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 stepsize = 13;
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
set_has_stepsize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &stepsize_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 snapshot = 14 [default = 0];
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
set_has_snapshot();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &snapshot_)));
} else {
goto handle_unusual;
}
break;
}

// optional string snapshot_prefix = 15;
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_snapshot_prefix()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.snapshot_prefix");
} else {
goto handle_unusual;
}
break;
}

// optional bool snapshot_diff = 16 [default = false];
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
set_has_snapshot_diff();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &snapshot_diff_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
case 17: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
} else {
mutable_unknown_fields()->AddVarint(
17, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 device_id = 18 [default = 0];
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
set_has_device_id();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &device_id_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool test_compute_loss = 19 [default = false];
case 19: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
set_has_test_compute_loss();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &test_compute_loss_)));
} else {
goto handle_unusual;
}
break;
}

// optional int64 random_seed = 20 [default = -1];
case 20: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
set_has_random_seed();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
input, &random_seed_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.NetParameter train_net_param = 21;
case 21: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_train_net_param()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetParameter test_net_param = 22;
case 22: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_test_net_param()));
} else {
goto handle_unusual;
}
break;
}

// optional bool debug_info = 23 [default = false];
case 23: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
set_has_debug_info();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &debug_info_)));
} else {
goto handle_unusual;
}
break;
}

// optional string net = 24;
case 24: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_net()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->net().data(), static_cast<int>(this->net().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.net");
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.NetParameter net_param = 25;
case 25: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_net_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.NetState train_state = 26;
case 26: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_train_state()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetState test_state = 27;
case 27: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_test_state()));
} else {
goto handle_unusual;
}
break;
}

// optional bool snapshot_after_train = 28 [default = true];
case 28: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
set_has_snapshot_after_train();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &snapshot_after_train_)));
} else {
goto handle_unusual;
}
break;
}

// optional string regularization_type = 29 [default = "L2"];
case 29: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_regularization_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.regularization_type");
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
case 30: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SolverParameter_SolverType_IsValid(value)) {
set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
} else {
mutable_unknown_fields()->AddVarint(
30, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional float delta = 31 [default = 1e-08];
case 31: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
set_has_delta();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &delta_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool test_initialization = 32 [default = true];
case 32: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
set_has_test_initialization();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &test_initialization_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 average_loss = 33 [default = 1];
case 33: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
set_has_average_loss();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &average_loss_)));
} else {
goto handle_unusual;
}
break;
}

// repeated int32 stepvalue = 34;
case 34: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
2, 272u, input, this->mutable_stepvalue())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, this->mutable_stepvalue())));
} else {
goto handle_unusual;
}
break;
}

// optional float clip_gradients = 35 [default = -1];
case 35: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
set_has_clip_gradients();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &clip_gradients_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 iter_size = 36 [default = 1];
case 36: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
set_has_iter_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &iter_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
case 37: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
} else {
mutable_unknown_fields()->AddVarint(
37, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional float rms_decay = 38;
case 38: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {
set_has_rms_decay();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &rms_decay_)));
} else {
goto handle_unusual;
}
break;
}

// optional float momentum2 = 39 [default = 0.999];
case 39: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {
set_has_momentum2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &momentum2_)));
} else {
goto handle_unusual;
}
break;
}

// optional string type = 40 [default = "SGD"];
case 40: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverParameter.type");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SolverParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string train_net = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->train_net().data(), static_cast<int>(this->train_net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.train_net");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->train_net(), output);
}

// repeated string test_net = 2;
for (int i = 0, n = this->test_net_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->test_net(i).data(), static_cast<int>(this->test_net(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.test_net");
::google::protobuf::internal::WireFormatLite::WriteString(
2, this->test_net(i), output);
}

// repeated int32 test_iter = 3;
for (int i = 0, n = this->test_iter_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteInt32(
3, this->test_iter(i), output);
}

// optional int32 test_interval = 4 [default = 0];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
}

// optional float base_lr = 5;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
}

// optional int32 display = 6;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
}

// optional int32 max_iter = 7;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
}

// optional string lr_policy = 8;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.lr_policy");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
8, this->lr_policy(), output);
}

// optional float gamma = 9;
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
}

// optional float power = 10;
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
}

// optional float momentum = 11;
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
}

// optional float weight_decay = 12;
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
}

// optional int32 stepsize = 13;
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
}

// optional int32 snapshot = 14 [default = 0];
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
}

// optional string snapshot_prefix = 15;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.snapshot_prefix");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
15, this->snapshot_prefix(), output);
}

// optional bool snapshot_diff = 16 [default = false];
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
17, this->solver_mode(), output);
}

// optional int32 device_id = 18 [default = 0];
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
}

// optional bool test_compute_loss = 19 [default = false];
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
}

// optional int64 random_seed = 20 [default = -1];
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
}

// optional .caffe.NetParameter train_net_param = 21;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
21, *this->train_net_param_, output);
}

// repeated .caffe.NetParameter test_net_param = 22;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->test_net_param_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
22, this->test_net_param(static_cast<int>(i)), output);
}

// optional bool debug_info = 23 [default = false];
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
}

// optional string net = 24;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->net().data(), static_cast<int>(this->net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.net");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
24, this->net(), output);
}

// optional .caffe.NetParameter net_param = 25;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
25, *this->net_param_, output);
}

// optional .caffe.NetState train_state = 26;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
26, *this->train_state_, output);
}

// repeated .caffe.NetState test_state = 27;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->test_state_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
27, this->test_state(static_cast<int>(i)), output);
}

// optional bool snapshot_after_train = 28 [default = true];
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
}

// optional string regularization_type = 29 [default = "L2"];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.regularization_type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
29, this->regularization_type(), output);
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
30, this->solver_type(), output);
}

// optional float delta = 31 [default = 1e-08];
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
}

// optional bool test_initialization = 32 [default = true];
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
}

// optional int32 average_loss = 33 [default = 1];
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
}

// repeated int32 stepvalue = 34;
for (int i = 0, n = this->stepvalue_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteInt32(
34, this->stepvalue(i), output);
}

// optional float clip_gradients = 35 [default = -1];
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
}

cached_has_bits = _has_bits_[1];
// optional int32 iter_size = 36 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
37, this->snapshot_format(), output);
}

cached_has_bits = _has_bits_[0];
// optional float rms_decay = 38;
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
}

cached_has_bits = _has_bits_[1];
// optional float momentum2 = 39 [default = 0.999];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
}

cached_has_bits = _has_bits_[0];
// optional string type = 40 [default = "SGD"];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
40, this->type(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string train_net = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->train_net().data(), static_cast<int>(this->train_net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.train_net");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->train_net(), target);
}

// repeated string test_net = 2;
for (int i = 0, n = this->test_net_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->test_net(i).data(), static_cast<int>(this->test_net(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.test_net");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(2, this->test_net(i), target);
}

// repeated int32 test_iter = 3;
target = ::google::protobuf::internal::WireFormatLite::
WriteInt32ToArray(3, this->test_iter_, target);

// optional int32 test_interval = 4 [default = 0];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
}

// optional float base_lr = 5;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
}

// optional int32 display = 6;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
}

// optional int32 max_iter = 7;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
}

// optional string lr_policy = 8;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.lr_policy");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
8, this->lr_policy(), target);
}

// optional float gamma = 9;
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
}

// optional float power = 10;
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
}

// optional float momentum = 11;
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
}

// optional float weight_decay = 12;
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
}

// optional int32 stepsize = 13;
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
}

// optional int32 snapshot = 14 [default = 0];
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
}

// optional string snapshot_prefix = 15;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.snapshot_prefix");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
15, this->snapshot_prefix(), target);
}

// optional bool snapshot_diff = 16 [default = false];
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
17, this->solver_mode(), target);
}

// optional int32 device_id = 18 [default = 0];
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
}

// optional bool test_compute_loss = 19 [default = false];
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
}

// optional int64 random_seed = 20 [default = -1];
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
}

// optional .caffe.NetParameter train_net_param = 21;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
21, *this->train_net_param_, deterministic, target);
}

// repeated .caffe.NetParameter test_net_param = 22;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->test_net_param_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
22, this->test_net_param(static_cast<int>(i)), deterministic, target);
}

// optional bool debug_info = 23 [default = false];
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
}

// optional string net = 24;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->net().data(), static_cast<int>(this->net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.net");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
24, this->net(), target);
}

// optional .caffe.NetParameter net_param = 25;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
25, *this->net_param_, deterministic, target);
}

// optional .caffe.NetState train_state = 26;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
26, *this->train_state_, deterministic, target);
}

// repeated .caffe.NetState test_state = 27;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->test_state_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
27, this->test_state(static_cast<int>(i)), deterministic, target);
}

// optional bool snapshot_after_train = 28 [default = true];
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
}

// optional string regularization_type = 29 [default = "L2"];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.regularization_type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
29, this->regularization_type(), target);
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
30, this->solver_type(), target);
}

// optional float delta = 31 [default = 1e-08];
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
}

// optional bool test_initialization = 32 [default = true];
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
}

// optional int32 average_loss = 33 [default = 1];
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
}

// repeated int32 stepvalue = 34;
target = ::google::protobuf::internal::WireFormatLite::
WriteInt32ToArray(34, this->stepvalue_, target);

// optional float clip_gradients = 35 [default = -1];
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
}

cached_has_bits = _has_bits_[1];
// optional int32 iter_size = 36 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
37, this->snapshot_format(), target);
}

cached_has_bits = _has_bits_[0];
// optional float rms_decay = 38;
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
}

cached_has_bits = _has_bits_[1];
// optional float momentum2 = 39 [default = 0.999];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
}

cached_has_bits = _has_bits_[0];
// optional string type = 40 [default = "SGD"];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverParameter.type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
40, this->type(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated string test_net = 2;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->test_net_size());
for (int i = 0, n = this->test_net_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->test_net(i));
}

// repeated int32 test_iter = 3;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
Int32Size(this->test_iter_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->test_iter_size());
total_size += data_size;
}

// repeated .caffe.NetParameter test_net_param = 22;
{
unsigned int count = static_cast<unsigned int>(this->test_net_param_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->test_net_param(static_cast<int>(i)));
}
}

// repeated .caffe.NetState test_state = 27;
{
unsigned int count = static_cast<unsigned int>(this->test_state_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->test_state(static_cast<int>(i)));
}
}

// repeated int32 stepvalue = 34;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
Int32Size(this->stepvalue_);
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->stepvalue_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string train_net = 1;
if (has_train_net()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->train_net());
}

// optional string lr_policy = 8;
if (has_lr_policy()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->lr_policy());
}

// optional string snapshot_prefix = 15;
if (has_snapshot_prefix()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->snapshot_prefix());
}

// optional string net = 24;
if (has_net()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->net());
}

// optional string regularization_type = 29 [default = "L2"];
if (has_regularization_type()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->regularization_type());
}

// optional string type = 40 [default = "SGD"];
if (has_type()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->type());
}

// optional .caffe.NetParameter train_net_param = 21;
if (has_train_net_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->train_net_param_);
}

// optional .caffe.NetParameter net_param = 25;
if (has_net_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->net_param_);
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional .caffe.NetState train_state = 26;
if (has_train_state()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->train_state_);
}

// optional int32 test_interval = 4 [default = 0];
if (has_test_interval()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->test_interval());
}

// optional float base_lr = 5;
if (has_base_lr()) {
total_size += 1 + 4;
}

// optional int32 display = 6;
if (has_display()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->display());
}

// optional int32 max_iter = 7;
if (has_max_iter()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->max_iter());
}

// optional float gamma = 9;
if (has_gamma()) {
total_size += 1 + 4;
}

// optional float power = 10;
if (has_power()) {
total_size += 1 + 4;
}

// optional float momentum = 11;
if (has_momentum()) {
total_size += 1 + 4;
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional float weight_decay = 12;
if (has_weight_decay()) {
total_size += 1 + 4;
}

// optional int32 stepsize = 13;
if (has_stepsize()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->stepsize());
}

// optional int32 snapshot = 14 [default = 0];
if (has_snapshot()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->snapshot());
}

// optional int32 device_id = 18 [default = 0];
if (has_device_id()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->device_id());
}

// optional bool test_compute_loss = 19 [default = false];
if (has_test_compute_loss()) {
total_size += 2 + 1;
}

// optional bool snapshot_diff = 16 [default = false];
if (has_snapshot_diff()) {
total_size += 2 + 1;
}

// optional bool debug_info = 23 [default = false];
if (has_debug_info()) {
total_size += 2 + 1;
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
if (has_solver_type()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional float rms_decay = 38;
if (has_rms_decay()) {
total_size += 2 + 4;
}

// optional int64 random_seed = 20 [default = -1];
if (has_random_seed()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int64Size(
this->random_seed());
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
if (has_solver_mode()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
}

// optional bool test_initialization = 32 [default = true];
if (has_test_initialization()) {
total_size += 2 + 1;
}

// optional bool snapshot_after_train = 28 [default = true];
if (has_snapshot_after_train()) {
total_size += 2 + 1;
}

// optional float delta = 31 [default = 1e-08];
if (has_delta()) {
total_size += 2 + 4;
}

// optional int32 average_loss = 33 [default = 1];
if (has_average_loss()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->average_loss());
}

// optional float clip_gradients = 35 [default = -1];
if (has_clip_gradients()) {
total_size += 2 + 4;
}

}
if (_has_bits_[32 / 32] & 7u) {
// optional int32 iter_size = 36 [default = 1];
if (has_iter_size()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->iter_size());
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
if (has_snapshot_format()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
}

// optional float momentum2 = 39 [default = 0.999];
if (has_momentum2()) {
total_size += 2 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
GOOGLE_DCHECK_NE(&from, this);
const SolverParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
MergeFrom(*source);
}
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

test_net_.MergeFrom(from.test_net_);
test_iter_.MergeFrom(from.test_iter_);
test_net_param_.MergeFrom(from.test_net_param_);
test_state_.MergeFrom(from.test_state_);
stepvalue_.MergeFrom(from.stepvalue_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_train_net();
train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
}
if (cached_has_bits & 0x00000002u) {
set_has_lr_policy();
lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
}
if (cached_has_bits & 0x00000004u) {
set_has_snapshot_prefix();
snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
}
if (cached_has_bits & 0x00000008u) {
set_has_net();
net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
}
if (cached_has_bits & 0x00000010u) {
set_has_regularization_type();
regularization_type_.AssignWithDefault(&::caffe::SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
}
if (cached_has_bits & 0x00000020u) {
set_has_type();
type_.AssignWithDefault(&::caffe::SolverParameter::_default_type_.get(), from.type_);
}
if (cached_has_bits & 0x00000040u) {
mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
}
if (cached_has_bits & 0x00000080u) {
mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
}
if (cached_has_bits & 0x00000200u) {
test_interval_ = from.test_interval_;
}
if (cached_has_bits & 0x00000400u) {
base_lr_ = from.base_lr_;
}
if (cached_has_bits & 0x00000800u) {
display_ = from.display_;
}
if (cached_has_bits & 0x00001000u) {
max_iter_ = from.max_iter_;
}
if (cached_has_bits & 0x00002000u) {
gamma_ = from.gamma_;
}
if (cached_has_bits & 0x00004000u) {
power_ = from.power_;
}
if (cached_has_bits & 0x00008000u) {
momentum_ = from.momentum_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
weight_decay_ = from.weight_decay_;
}
if (cached_has_bits & 0x00020000u) {
stepsize_ = from.stepsize_;
}
if (cached_has_bits & 0x00040000u) {
snapshot_ = from.snapshot_;
}
if (cached_has_bits & 0x00080000u) {
device_id_ = from.device_id_;
}
if (cached_has_bits & 0x00100000u) {
test_compute_loss_ = from.test_compute_loss_;
}
if (cached_has_bits & 0x00200000u) {
snapshot_diff_ = from.snapshot_diff_;
}
if (cached_has_bits & 0x00400000u) {
debug_info_ = from.debug_info_;
}
if (cached_has_bits & 0x00800000u) {
solver_type_ = from.solver_type_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
rms_decay_ = from.rms_decay_;
}
if (cached_has_bits & 0x02000000u) {
random_seed_ = from.random_seed_;
}
if (cached_has_bits & 0x04000000u) {
solver_mode_ = from.solver_mode_;
}
if (cached_has_bits & 0x08000000u) {
test_initialization_ = from.test_initialization_;
}
if (cached_has_bits & 0x10000000u) {
snapshot_after_train_ = from.snapshot_after_train_;
}
if (cached_has_bits & 0x20000000u) {
delta_ = from.delta_;
}
if (cached_has_bits & 0x40000000u) {
average_loss_ = from.average_loss_;
}
if (cached_has_bits & 0x80000000u) {
clip_gradients_ = from.clip_gradients_;
}
_has_bits_[0] |= cached_has_bits;
}
cached_has_bits = from._has_bits_[1];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
iter_size_ = from.iter_size_;
}
if (cached_has_bits & 0x00000002u) {
snapshot_format_ = from.snapshot_format_;
}
if (cached_has_bits & 0x00000004u) {
momentum2_ = from.momentum2_;
}
_has_bits_[1] |= cached_has_bits;
}
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
if (!::google::protobuf::internal::AllAreInitialized(this->test_net_param())) return false;
if (has_train_net_param()) {
if (!this->train_net_param_->IsInitialized()) return false;
}
if (has_net_param()) {
if (!this->net_param_->IsInitialized()) return false;
}
return true;
}

void SolverParameter::Swap(SolverParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
using std::swap;
test_net_.InternalSwap(&other->test_net_);
test_iter_.InternalSwap(&other->test_iter_);
test_net_param_.InternalSwap(&other->test_net_param_);
test_state_.InternalSwap(&other->test_state_);
stepvalue_.InternalSwap(&other->stepvalue_);
train_net_.Swap(&other->train_net_);
lr_policy_.Swap(&other->lr_policy_);
snapshot_prefix_.Swap(&other->snapshot_prefix_);
net_.Swap(&other->net_);
regularization_type_.Swap(&other->regularization_type_);
type_.Swap(&other->type_);
swap(train_net_param_, other->train_net_param_);
swap(net_param_, other->net_param_);
swap(train_state_, other->train_state_);
swap(test_interval_, other->test_interval_);
swap(base_lr_, other->base_lr_);
swap(display_, other->display_);
swap(max_iter_, other->max_iter_);
swap(gamma_, other->gamma_);
swap(power_, other->power_);
swap(momentum_, other->momentum_);
swap(weight_decay_, other->weight_decay_);
swap(stepsize_, other->stepsize_);
swap(snapshot_, other->snapshot_);
swap(device_id_, other->device_id_);
swap(test_compute_loss_, other->test_compute_loss_);
swap(snapshot_diff_, other->snapshot_diff_);
swap(debug_info_, other->debug_info_);
swap(solver_type_, other->solver_type_);
swap(rms_decay_, other->rms_decay_);
swap(random_seed_, other->random_seed_);
swap(solver_mode_, other->solver_mode_);
swap(test_initialization_, other->test_initialization_);
swap(snapshot_after_train_, other->snapshot_after_train_);
swap(delta_, other->delta_);
swap(average_loss_, other->average_loss_);
swap(clip_gradients_, other->clip_gradients_);
swap(iter_size_, other->iter_size_);
swap(snapshot_format_, other->snapshot_format_);
swap(momentum2_, other->momentum2_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolverState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSolverState();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SolverState)
}
SolverState::SolverState(const SolverState& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
history_(from.history_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_learned_net()) {
learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
}
::memcpy(&iter_, &from.iter_,
static_cast<size_t>(reinterpret_cast<char*>(&current_step_) -
reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
// @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
_cached_size_ = 0;
learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&iter_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&current_step_) -
reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
}

SolverState::~SolverState() {
// @@protoc_insertion_point(destructor:caffe.SolverState)
SharedDtor();
}

void SolverState::SharedDtor() {
learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverState& SolverState::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSolverState();
return *internal_default_instance();
}

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
SolverState* n = new SolverState;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

history_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!learned_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*learned_net_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 6u) {
::memset(&iter_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&current_step_) -
reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SolverState::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SolverState)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 iter = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_iter();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &iter_)));
} else {
goto handle_unusual;
}
break;
}

// optional string learned_net = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_learned_net()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->learned_net().data(), static_cast<int>(this->learned_net().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.SolverState.learned_net");
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobProto history = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_history()));
} else {
goto handle_unusual;
}
break;
}

// optional int32 current_step = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_current_step();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &current_step_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SolverState)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SolverState)
return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SolverState)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 iter = 1;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
}

// optional string learned_net = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->learned_net().data(), static_cast<int>(this->learned_net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverState.learned_net");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->learned_net(), output);
}

// repeated .caffe.BlobProto history = 3;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
3, this->history(static_cast<int>(i)), output);
}

// optional int32 current_step = 4 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 iter = 1;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
}

// optional string learned_net = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->learned_net().data(), static_cast<int>(this->learned_net().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.SolverState.learned_net");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->learned_net(), target);
}

// repeated .caffe.BlobProto history = 3;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
3, this->history(static_cast<int>(i)), deterministic, target);
}

// optional int32 current_step = 4 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.BlobProto history = 3;
{
unsigned int count = static_cast<unsigned int>(this->history_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->history(static_cast<int>(i)));
}
}

if (_has_bits_[0 / 32] & 7u) {
// optional string learned_net = 2;
if (has_learned_net()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->learned_net());
}

// optional int32 iter = 1;
if (has_iter()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->iter());
}

// optional int32 current_step = 4 [default = 0];
if (has_current_step()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->current_step());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
GOOGLE_DCHECK_NE(&from, this);
const SolverState* source =
::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
MergeFrom(*source);
}
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

history_.MergeFrom(from.history_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
set_has_learned_net();
learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
}
if (cached_has_bits & 0x00000002u) {
iter_ = from.iter_;
}
if (cached_has_bits & 0x00000004u) {
current_step_ = from.current_step_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SolverState::IsInitialized() const {
return true;
}

void SolverState::Swap(SolverState* other) {
if (other == this) return;
InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
using std::swap;
history_.InternalSwap(&other->history_);
learned_net_.Swap(&other->learned_net_);
swap(iter_, other->iter_);
swap(current_step_, other->current_step_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsNetState();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.NetState)
}
NetState::NetState(const NetState& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
stage_(from.stage_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&level_, &from.level_,
static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
reinterpret_cast<char*>(&level_)) + sizeof(phase_));
// @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
_cached_size_ = 0;
level_ = 0;
phase_ = 1;
}

NetState::~NetState() {
// @@protoc_insertion_point(destructor:caffe.NetState)
SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetState& NetState::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsNetState();
return *internal_default_instance();
}

NetState* NetState::New(::google::protobuf::Arena* arena) const {
NetState* n = new NetState;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

stage_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
level_ = 0;
phase_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool NetState::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.NetState)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.Phase phase = 1 [default = TEST];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::Phase_IsValid(value)) {
set_phase(static_cast< ::caffe::Phase >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 level = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_level();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &level_)));
} else {
goto handle_unusual;
}
break;
}

// repeated string stage = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_stage()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(this->stage_size() - 1).data(),
static_cast<int>(this->stage(this->stage_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.NetState.stage");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.NetState)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.NetState)
return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.NetState)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.Phase phase = 1 [default = TEST];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->phase(), output);
}

// optional int32 level = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
}

// repeated string stage = 3;
for (int i = 0, n = this->stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(i).data(), static_cast<int>(this->stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetState.stage");
::google::protobuf::internal::WireFormatLite::WriteString(
3, this->stage(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.Phase phase = 1 [default = TEST];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->phase(), target);
}

// optional int32 level = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
}

// repeated string stage = 3;
for (int i = 0, n = this->stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(i).data(), static_cast<int>(this->stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetState.stage");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(3, this->stage(i), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated string stage = 3;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->stage_size());
for (int i = 0, n = this->stage_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->stage(i));
}

if (_has_bits_[0 / 32] & 3u) {
// optional int32 level = 2 [default = 0];
if (has_level()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->level());
}

// optional .caffe.Phase phase = 1 [default = TEST];
if (has_phase()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
GOOGLE_DCHECK_NE(&from, this);
const NetState* source =
::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
MergeFrom(*source);
}
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

stage_.MergeFrom(from.stage_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
level_ = from.level_;
}
if (cached_has_bits & 0x00000002u) {
phase_ = from.phase_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool NetState::IsInitialized() const {
return true;
}

void NetState::Swap(NetState* other) {
if (other == this) return;
InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
using std::swap;
stage_.InternalSwap(&other->stage_);
swap(level_, other->level_);
swap(phase_, other->phase_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetStateRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStateRule::NetStateRule()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsNetStateRule();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.NetStateRule)
}
NetStateRule::NetStateRule(const NetStateRule& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
stage_(from.stage_),
not_stage_(from.not_stage_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&phase_, &from.phase_,
static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
// @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
_cached_size_ = 0;
::memset(&phase_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&max_level_) -
reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
}

NetStateRule::~NetStateRule() {
// @@protoc_insertion_point(destructor:caffe.NetStateRule)
SharedDtor();
}

void NetStateRule::SharedDtor() {
}

void NetStateRule::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetStateRule& NetStateRule::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsNetStateRule();
return *internal_default_instance();
}

NetStateRule* NetStateRule::New(::google::protobuf::Arena* arena) const {
NetStateRule* n = new NetStateRule;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetStateRule)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

stage_.Clear();
not_stage_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
::memset(&phase_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&max_level_) -
reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool NetStateRule::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.NetStateRule)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.Phase phase = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::Phase_IsValid(value)) {
set_phase(static_cast< ::caffe::Phase >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 min_level = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_min_level();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &min_level_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 max_level = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_max_level();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &max_level_)));
} else {
goto handle_unusual;
}
break;
}

// repeated string stage = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_stage()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(this->stage_size() - 1).data(),
static_cast<int>(this->stage(this->stage_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.NetStateRule.stage");
} else {
goto handle_unusual;
}
break;
}

// repeated string not_stage = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_not_stage()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->not_stage(this->not_stage_size() - 1).data(),
static_cast<int>(this->not_stage(this->not_stage_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.NetStateRule.not_stage");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.NetStateRule)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.Phase phase = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->phase(), output);
}

// optional int32 min_level = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
}

// optional int32 max_level = 3;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
}

// repeated string stage = 4;
for (int i = 0, n = this->stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(i).data(), static_cast<int>(this->stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetStateRule.stage");
::google::protobuf::internal::WireFormatLite::WriteString(
4, this->stage(i), output);
}

// repeated string not_stage = 5;
for (int i = 0, n = this->not_stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->not_stage(i).data(), static_cast<int>(this->not_stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetStateRule.not_stage");
::google::protobuf::internal::WireFormatLite::WriteString(
5, this->not_stage(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.Phase phase = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->phase(), target);
}

// optional int32 min_level = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
}

// optional int32 max_level = 3;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
}

// repeated string stage = 4;
for (int i = 0, n = this->stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->stage(i).data(), static_cast<int>(this->stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetStateRule.stage");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(4, this->stage(i), target);
}

// repeated string not_stage = 5;
for (int i = 0, n = this->not_stage_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->not_stage(i).data(), static_cast<int>(this->not_stage(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.NetStateRule.not_stage");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(5, this->not_stage(i), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetStateRule)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated string stage = 4;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->stage_size());
for (int i = 0, n = this->stage_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->stage(i));
}

// repeated string not_stage = 5;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->not_stage_size());
for (int i = 0, n = this->not_stage_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->not_stage(i));
}

if (_has_bits_[0 / 32] & 7u) {
// optional .caffe.Phase phase = 1;
if (has_phase()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
}

// optional int32 min_level = 2;
if (has_min_level()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->min_level());
}

// optional int32 max_level = 3;
if (has_max_level()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->max_level());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetStateRule)
GOOGLE_DCHECK_NE(&from, this);
const NetStateRule* source =
::google::protobuf::internal::DynamicCastToGenerated<const NetStateRule>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetStateRule)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetStateRule)
MergeFrom(*source);
}
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetStateRule)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

stage_.MergeFrom(from.stage_);
not_stage_.MergeFrom(from.not_stage_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
phase_ = from.phase_;
}
if (cached_has_bits & 0x00000002u) {
min_level_ = from.min_level_;
}
if (cached_has_bits & 0x00000004u) {
max_level_ = from.max_level_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetStateRule)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetStateRule)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {
return true;
}

void NetStateRule::Swap(NetStateRule* other) {
if (other == this) return;
InternalSwap(other);
}
void NetStateRule::InternalSwap(NetStateRule* other) {
using std::swap;
stage_.InternalSwap(&other->stage_);
not_stage_.InternalSwap(&other->not_stage_);
swap(phase_, other->phase_);
swap(min_level_, other->min_level_);
swap(max_level_, other->max_level_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParamSpec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsParamSpec();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_name()) {
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
::memcpy(&share_mode_, &from.share_mode_,
static_cast<size_t>(reinterpret_cast<char*>(&decay_mult_) -
reinterpret_cast<char*>(&share_mode_)) + sizeof(decay_mult_));
// @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
_cached_size_ = 0;
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
share_mode_ = 0;
lr_mult_ = 1;
decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
// @@protoc_insertion_point(destructor:caffe.ParamSpec)
SharedDtor();
}

void ParamSpec::SharedDtor() {
name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamSpec& ParamSpec::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsParamSpec();
return *internal_default_instance();
}

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
ParamSpec* n = new ParamSpec;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*name_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 14u) {
share_mode_ = 0;
lr_mult_ = 1;
decay_mult_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ParamSpec)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string name = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.ParamSpec.name");
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
} else {
mutable_unknown_fields()->AddVarint(
2, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional float lr_mult = 3 [default = 1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_lr_mult();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &lr_mult_)));
} else {
goto handle_unusual;
}
break;
}

// optional float decay_mult = 4 [default = 1];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_decay_mult();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &decay_mult_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ParamSpec)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ParamSpec.name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->name(), output);
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
2, this->share_mode(), output);
}

// optional float lr_mult = 3 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
}

// optional float decay_mult = 4 [default = 1];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ParamSpec.name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->name(), target);
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
2, this->share_mode(), target);
}

// optional float lr_mult = 3 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
}

// optional float decay_mult = 4 [default = 1];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 15u) {
// optional string name = 1;
if (has_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->name());
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
if (has_share_mode()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
}

// optional float lr_mult = 3 [default = 1];
if (has_lr_mult()) {
total_size += 1 + 4;
}

// optional float decay_mult = 4 [default = 1];
if (has_decay_mult()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
GOOGLE_DCHECK_NE(&from, this);
const ParamSpec* source =
::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
MergeFrom(*source);
}
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
set_has_name();
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (cached_has_bits & 0x00000002u) {
share_mode_ = from.share_mode_;
}
if (cached_has_bits & 0x00000004u) {
lr_mult_ = from.lr_mult_;
}
if (cached_has_bits & 0x00000008u) {
decay_mult_ = from.decay_mult_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
return true;
}

void ParamSpec::Swap(ParamSpec* other) {
if (other == this) return;
InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
using std::swap;
name_.Swap(&other->name_);
swap(share_mode_, other->share_mode_);
swap(lr_mult_, other->lr_mult_);
swap(decay_mult_, other->decay_mult_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LayerParameter::InitAsDefaultInstance() {
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
::caffe::TransformationParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
::caffe::LossParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
::caffe::AccuracyParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
::caffe::ArgMaxParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(
::caffe::BatchNormParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->bias_param_ = const_cast< ::caffe::BiasParameter*>(
::caffe::BiasParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
::caffe::ConcatParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
::caffe::ContrastiveLossParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
::caffe::ConvolutionParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->crop_param_ = const_cast< ::caffe::CropParameter*>(
::caffe::CropParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
::caffe::DataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
::caffe::DropoutParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
::caffe::DummyDataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
::caffe::EltwiseParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->elu_param_ = const_cast< ::caffe::ELUParameter*>(
::caffe::ELUParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->embed_param_ = const_cast< ::caffe::EmbedParameter*>(
::caffe::EmbedParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
::caffe::ExpParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->flatten_param_ = const_cast< ::caffe::FlattenParameter*>(
::caffe::FlattenParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
::caffe::HDF5DataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
::caffe::HDF5OutputParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
::caffe::HingeLossParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
::caffe::ImageDataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
::caffe::InfogainLossParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
::caffe::InnerProductParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->input_param_ = const_cast< ::caffe::InputParameter*>(
::caffe::InputParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->log_param_ = const_cast< ::caffe::LogParameter*>(
::caffe::LogParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
::caffe::LRNParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
::caffe::MemoryDataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
::caffe::MVNParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->parameter_param_ = const_cast< ::caffe::ParameterParameter*>(
::caffe::ParameterParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
::caffe::PoolingParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
::caffe::PowerParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->prelu_param_ = const_cast< ::caffe::PReLUParameter*>(
::caffe::PReLUParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->python_param_ = const_cast< ::caffe::PythonParameter*>(
::caffe::PythonParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->recurrent_param_ = const_cast< ::caffe::RecurrentParameter*>(
::caffe::RecurrentParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->reduction_param_ = const_cast< ::caffe::ReductionParameter*>(
::caffe::ReductionParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
::caffe::ReLUParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(
::caffe::ReshapeParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->scale_param_ = const_cast< ::caffe::ScaleParameter*>(
::caffe::ScaleParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
::caffe::SigmoidParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
::caffe::SoftmaxParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->spp_param_ = const_cast< ::caffe::SPPParameter*>(
::caffe::SPPParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
::caffe::SliceParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
::caffe::TanHParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
::caffe::ThresholdParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->tile_param_ = const_cast< ::caffe::TileParameter*>(
::caffe::TileParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
::caffe::WindowDataParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->coeff_schedule_param_ = const_cast< ::caffe::CoeffScheduleParameter*>(
::caffe::CoeffScheduleParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->augmentation_param_ = const_cast< ::caffe::AugmentationParameter*>(
::caffe::AugmentationParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->correlation_param_ = const_cast< ::caffe::CorrelationParameter*>(
::caffe::CorrelationParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->l1_loss_param_ = const_cast< ::caffe::L1LossParameter*>(
::caffe::L1LossParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->writer_param_ = const_cast< ::caffe::WriterParameter*>(
::caffe::WriterParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->reader_param_ = const_cast< ::caffe::ReaderParameter*>(
::caffe::ReaderParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->mean_param_ = const_cast< ::caffe::MeanParameter*>(
::caffe::MeanParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->resample_param_ = const_cast< ::caffe::ResampleParameter*>(
::caffe::ResampleParameter::internal_default_instance());
::caffe::_LayerParameter_default_instance_._instance.get_mutable()->downsample_param_ = const_cast< ::caffe::DownsampleParameter*>(
::caffe::DownsampleParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kParameterParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kRecurrentParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kCoeffScheduleParamFieldNumber;
const int LayerParameter::kAugmentationParamFieldNumber;
const int LayerParameter::kCorrelationParamFieldNumber;
const int LayerParameter::kL1LossParamFieldNumber;
const int LayerParameter::kWriterParamFieldNumber;
const int LayerParameter::kReaderParamFieldNumber;
const int LayerParameter::kMeanParamFieldNumber;
const int LayerParameter::kResampleParamFieldNumber;
const int LayerParameter::kDownsampleParamFieldNumber;
const int LayerParameter::kReshapeEveryIterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsLayerParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
bottom_(from.bottom_),
top_(from.top_),
loss_weight_(from.loss_weight_),
param_(from.param_),
blobs_(from.blobs_),
include_(from.include_),
exclude_(from.exclude_),
propagate_down_(from.propagate_down_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_name()) {
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_type()) {
type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
}
if (from.has_transform_param()) {
transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
} else {
transform_param_ = NULL;
}
if (from.has_loss_param()) {
loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
} else {
loss_param_ = NULL;
}
if (from.has_accuracy_param()) {
accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
} else {
accuracy_param_ = NULL;
}
if (from.has_argmax_param()) {
argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
} else {
argmax_param_ = NULL;
}
if (from.has_concat_param()) {
concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
} else {
concat_param_ = NULL;
}
if (from.has_contrastive_loss_param()) {
contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
} else {
contrastive_loss_param_ = NULL;
}
if (from.has_convolution_param()) {
convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
} else {
convolution_param_ = NULL;
}
if (from.has_data_param()) {
data_param_ = new ::caffe::DataParameter(*from.data_param_);
} else {
data_param_ = NULL;
}
if (from.has_dropout_param()) {
dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
} else {
dropout_param_ = NULL;
}
if (from.has_dummy_data_param()) {
dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
} else {
dummy_data_param_ = NULL;
}
if (from.has_eltwise_param()) {
eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
} else {
eltwise_param_ = NULL;
}
if (from.has_exp_param()) {
exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
} else {
exp_param_ = NULL;
}
if (from.has_hdf5_data_param()) {
hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
} else {
hdf5_data_param_ = NULL;
}
if (from.has_hdf5_output_param()) {
hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
} else {
hdf5_output_param_ = NULL;
}
if (from.has_hinge_loss_param()) {
hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
} else {
hinge_loss_param_ = NULL;
}
if (from.has_image_data_param()) {
image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
} else {
image_data_param_ = NULL;
}
if (from.has_infogain_loss_param()) {
infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
} else {
infogain_loss_param_ = NULL;
}
if (from.has_inner_product_param()) {
inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
} else {
inner_product_param_ = NULL;
}
if (from.has_lrn_param()) {
lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
} else {
lrn_param_ = NULL;
}
if (from.has_memory_data_param()) {
memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
} else {
memory_data_param_ = NULL;
}
if (from.has_mvn_param()) {
mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
} else {
mvn_param_ = NULL;
}
if (from.has_pooling_param()) {
pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
} else {
pooling_param_ = NULL;
}
if (from.has_power_param()) {
power_param_ = new ::caffe::PowerParameter(*from.power_param_);
} else {
power_param_ = NULL;
}
if (from.has_relu_param()) {
relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
} else {
relu_param_ = NULL;
}
if (from.has_sigmoid_param()) {
sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
} else {
sigmoid_param_ = NULL;
}
if (from.has_softmax_param()) {
softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
} else {
softmax_param_ = NULL;
}
if (from.has_slice_param()) {
slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
} else {
slice_param_ = NULL;
}
if (from.has_tanh_param()) {
tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
} else {
tanh_param_ = NULL;
}
if (from.has_threshold_param()) {
threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
} else {
threshold_param_ = NULL;
}
if (from.has_window_data_param()) {
window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
} else {
window_data_param_ = NULL;
}
if (from.has_python_param()) {
python_param_ = new ::caffe::PythonParameter(*from.python_param_);
} else {
python_param_ = NULL;
}
if (from.has_prelu_param()) {
prelu_param_ = new ::caffe::PReLUParameter(*from.prelu_param_);
} else {
prelu_param_ = NULL;
}
if (from.has_spp_param()) {
spp_param_ = new ::caffe::SPPParameter(*from.spp_param_);
} else {
spp_param_ = NULL;
}
if (from.has_reshape_param()) {
reshape_param_ = new ::caffe::ReshapeParameter(*from.reshape_param_);
} else {
reshape_param_ = NULL;
}
if (from.has_log_param()) {
log_param_ = new ::caffe::LogParameter(*from.log_param_);
} else {
log_param_ = NULL;
}
if (from.has_flatten_param()) {
flatten_param_ = new ::caffe::FlattenParameter(*from.flatten_param_);
} else {
flatten_param_ = NULL;
}
if (from.has_reduction_param()) {
reduction_param_ = new ::caffe::ReductionParameter(*from.reduction_param_);
} else {
reduction_param_ = NULL;
}
if (from.has_embed_param()) {
embed_param_ = new ::caffe::EmbedParameter(*from.embed_param_);
} else {
embed_param_ = NULL;
}
if (from.has_tile_param()) {
tile_param_ = new ::caffe::TileParameter(*from.tile_param_);
} else {
tile_param_ = NULL;
}
if (from.has_batch_norm_param()) {
batch_norm_param_ = new ::caffe::BatchNormParameter(*from.batch_norm_param_);
} else {
batch_norm_param_ = NULL;
}
if (from.has_elu_param()) {
elu_param_ = new ::caffe::ELUParameter(*from.elu_param_);
} else {
elu_param_ = NULL;
}
if (from.has_bias_param()) {
bias_param_ = new ::caffe::BiasParameter(*from.bias_param_);
} else {
bias_param_ = NULL;
}
if (from.has_scale_param()) {
scale_param_ = new ::caffe::ScaleParameter(*from.scale_param_);
} else {
scale_param_ = NULL;
}
if (from.has_input_param()) {
input_param_ = new ::caffe::InputParameter(*from.input_param_);
} else {
input_param_ = NULL;
}
if (from.has_crop_param()) {
crop_param_ = new ::caffe::CropParameter(*from.crop_param_);
} else {
crop_param_ = NULL;
}
if (from.has_parameter_param()) {
parameter_param_ = new ::caffe::ParameterParameter(*from.parameter_param_);
} else {
parameter_param_ = NULL;
}
if (from.has_recurrent_param()) {
recurrent_param_ = new ::caffe::RecurrentParameter(*from.recurrent_param_);
} else {
recurrent_param_ = NULL;
}
if (from.has_coeff_schedule_param()) {
coeff_schedule_param_ = new ::caffe::CoeffScheduleParameter(*from.coeff_schedule_param_);
} else {
coeff_schedule_param_ = NULL;
}
if (from.has_augmentation_param()) {
augmentation_param_ = new ::caffe::AugmentationParameter(*from.augmentation_param_);
} else {
augmentation_param_ = NULL;
}
if (from.has_correlation_param()) {
correlation_param_ = new ::caffe::CorrelationParameter(*from.correlation_param_);
} else {
correlation_param_ = NULL;
}
if (from.has_l1_loss_param()) {
l1_loss_param_ = new ::caffe::L1LossParameter(*from.l1_loss_param_);
} else {
l1_loss_param_ = NULL;
}
if (from.has_writer_param()) {
writer_param_ = new ::caffe::WriterParameter(*from.writer_param_);
} else {
writer_param_ = NULL;
}
if (from.has_reader_param()) {
reader_param_ = new ::caffe::ReaderParameter(*from.reader_param_);
} else {
reader_param_ = NULL;
}
if (from.has_mean_param()) {
mean_param_ = new ::caffe::MeanParameter(*from.mean_param_);
} else {
mean_param_ = NULL;
}
if (from.has_resample_param()) {
resample_param_ = new ::caffe::ResampleParameter(*from.resample_param_);
} else {
resample_param_ = NULL;
}
if (from.has_downsample_param()) {
downsample_param_ = new ::caffe::DownsampleParameter(*from.downsample_param_);
} else {
downsample_param_ = NULL;
}
::memcpy(&phase_, &from.phase_,
static_cast<size_t>(reinterpret_cast<char*>(&reshape_every_iter_) -
reinterpret_cast<char*>(&phase_)) + sizeof(reshape_every_iter_));
// @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&transform_param_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&phase_) -
reinterpret_cast<char*>(&transform_param_)) + sizeof(phase_));
reshape_every_iter_ = true;
_cached_size_ = 0;
}

LayerParameter::~LayerParameter() {
// @@protoc_insertion_point(destructor:caffe.LayerParameter)
SharedDtor();
}

void LayerParameter::SharedDtor() {
name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (this != internal_default_instance()) delete transform_param_;
if (this != internal_default_instance()) delete loss_param_;
if (this != internal_default_instance()) delete accuracy_param_;
if (this != internal_default_instance()) delete argmax_param_;
if (this != internal_default_instance()) delete concat_param_;
if (this != internal_default_instance()) delete contrastive_loss_param_;
if (this != internal_default_instance()) delete convolution_param_;
if (this != internal_default_instance()) delete data_param_;
if (this != internal_default_instance()) delete dropout_param_;
if (this != internal_default_instance()) delete dummy_data_param_;
if (this != internal_default_instance()) delete eltwise_param_;
if (this != internal_default_instance()) delete exp_param_;
if (this != internal_default_instance()) delete hdf5_data_param_;
if (this != internal_default_instance()) delete hdf5_output_param_;
if (this != internal_default_instance()) delete hinge_loss_param_;
if (this != internal_default_instance()) delete image_data_param_;
if (this != internal_default_instance()) delete infogain_loss_param_;
if (this != internal_default_instance()) delete inner_product_param_;
if (this != internal_default_instance()) delete lrn_param_;
if (this != internal_default_instance()) delete memory_data_param_;
if (this != internal_default_instance()) delete mvn_param_;
if (this != internal_default_instance()) delete pooling_param_;
if (this != internal_default_instance()) delete power_param_;
if (this != internal_default_instance()) delete relu_param_;
if (this != internal_default_instance()) delete sigmoid_param_;
if (this != internal_default_instance()) delete softmax_param_;
if (this != internal_default_instance()) delete slice_param_;
if (this != internal_default_instance()) delete tanh_param_;
if (this != internal_default_instance()) delete threshold_param_;
if (this != internal_default_instance()) delete window_data_param_;
if (this != internal_default_instance()) delete python_param_;
if (this != internal_default_instance()) delete prelu_param_;
if (this != internal_default_instance()) delete spp_param_;
if (this != internal_default_instance()) delete reshape_param_;
if (this != internal_default_instance()) delete log_param_;
if (this != internal_default_instance()) delete flatten_param_;
if (this != internal_default_instance()) delete reduction_param_;
if (this != internal_default_instance()) delete embed_param_;
if (this != internal_default_instance()) delete tile_param_;
if (this != internal_default_instance()) delete batch_norm_param_;
if (this != internal_default_instance()) delete elu_param_;
if (this != internal_default_instance()) delete bias_param_;
if (this != internal_default_instance()) delete scale_param_;
if (this != internal_default_instance()) delete input_param_;
if (this != internal_default_instance()) delete crop_param_;
if (this != internal_default_instance()) delete parameter_param_;
if (this != internal_default_instance()) delete recurrent_param_;
if (this != internal_default_instance()) delete coeff_schedule_param_;
if (this != internal_default_instance()) delete augmentation_param_;
if (this != internal_default_instance()) delete correlation_param_;
if (this != internal_default_instance()) delete l1_loss_param_;
if (this != internal_default_instance()) delete writer_param_;
if (this != internal_default_instance()) delete reader_param_;
if (this != internal_default_instance()) delete mean_param_;
if (this != internal_default_instance()) delete resample_param_;
if (this != internal_default_instance()) delete downsample_param_;
}

void LayerParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LayerParameter& LayerParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsLayerParameter();
return *internal_default_instance();
}

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
LayerParameter* n = new LayerParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

bottom_.Clear();
top_.Clear();
loss_weight_.Clear();
param_.Clear();
blobs_.Clear();
include_.Clear();
exclude_.Clear();
propagate_down_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*name_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*type_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(transform_param_ != NULL);
transform_param_->Clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(loss_param_ != NULL);
loss_param_->Clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(accuracy_param_ != NULL);
accuracy_param_->Clear();
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(argmax_param_ != NULL);
argmax_param_->Clear();
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(concat_param_ != NULL);
concat_param_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
contrastive_loss_param_->Clear();
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
GOOGLE_DCHECK(convolution_param_ != NULL);
convolution_param_->Clear();
}
if (cached_has_bits & 0x00000200u) {
GOOGLE_DCHECK(data_param_ != NULL);
data_param_->Clear();
}
if (cached_has_bits & 0x00000400u) {
GOOGLE_DCHECK(dropout_param_ != NULL);
dropout_param_->Clear();
}
if (cached_has_bits & 0x00000800u) {
GOOGLE_DCHECK(dummy_data_param_ != NULL);
dummy_data_param_->Clear();
}
if (cached_has_bits & 0x00001000u) {
GOOGLE_DCHECK(eltwise_param_ != NULL);
eltwise_param_->Clear();
}
if (cached_has_bits & 0x00002000u) {
GOOGLE_DCHECK(exp_param_ != NULL);
exp_param_->Clear();
}
if (cached_has_bits & 0x00004000u) {
GOOGLE_DCHECK(hdf5_data_param_ != NULL);
hdf5_data_param_->Clear();
}
if (cached_has_bits & 0x00008000u) {
GOOGLE_DCHECK(hdf5_output_param_ != NULL);
hdf5_output_param_->Clear();
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
GOOGLE_DCHECK(hinge_loss_param_ != NULL);
hinge_loss_param_->Clear();
}
if (cached_has_bits & 0x00020000u) {
GOOGLE_DCHECK(image_data_param_ != NULL);
image_data_param_->Clear();
}
if (cached_has_bits & 0x00040000u) {
GOOGLE_DCHECK(infogain_loss_param_ != NULL);
infogain_loss_param_->Clear();
}
if (cached_has_bits & 0x00080000u) {
GOOGLE_DCHECK(inner_product_param_ != NULL);
inner_product_param_->Clear();
}
if (cached_has_bits & 0x00100000u) {
GOOGLE_DCHECK(lrn_param_ != NULL);
lrn_param_->Clear();
}
if (cached_has_bits & 0x00200000u) {
GOOGLE_DCHECK(memory_data_param_ != NULL);
memory_data_param_->Clear();
}
if (cached_has_bits & 0x00400000u) {
GOOGLE_DCHECK(mvn_param_ != NULL);
mvn_param_->Clear();
}
if (cached_has_bits & 0x00800000u) {
GOOGLE_DCHECK(pooling_param_ != NULL);
pooling_param_->Clear();
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
GOOGLE_DCHECK(power_param_ != NULL);
power_param_->Clear();
}
if (cached_has_bits & 0x02000000u) {
GOOGLE_DCHECK(relu_param_ != NULL);
relu_param_->Clear();
}
if (cached_has_bits & 0x04000000u) {
GOOGLE_DCHECK(sigmoid_param_ != NULL);
sigmoid_param_->Clear();
}
if (cached_has_bits & 0x08000000u) {
GOOGLE_DCHECK(softmax_param_ != NULL);
softmax_param_->Clear();
}
if (cached_has_bits & 0x10000000u) {
GOOGLE_DCHECK(slice_param_ != NULL);
slice_param_->Clear();
}
if (cached_has_bits & 0x20000000u) {
GOOGLE_DCHECK(tanh_param_ != NULL);
tanh_param_->Clear();
}
if (cached_has_bits & 0x40000000u) {
GOOGLE_DCHECK(threshold_param_ != NULL);
threshold_param_->Clear();
}
if (cached_has_bits & 0x80000000u) {
GOOGLE_DCHECK(window_data_param_ != NULL);
window_data_param_->Clear();
}
}
cached_has_bits = _has_bits_[1];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(python_param_ != NULL);
python_param_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(prelu_param_ != NULL);
prelu_param_->Clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(spp_param_ != NULL);
spp_param_->Clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(reshape_param_ != NULL);
reshape_param_->Clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(log_param_ != NULL);
log_param_->Clear();
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(flatten_param_ != NULL);
flatten_param_->Clear();
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(reduction_param_ != NULL);
reduction_param_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(embed_param_ != NULL);
embed_param_->Clear();
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
GOOGLE_DCHECK(tile_param_ != NULL);
tile_param_->Clear();
}
if (cached_has_bits & 0x00000200u) {
GOOGLE_DCHECK(batch_norm_param_ != NULL);
batch_norm_param_->Clear();
}
if (cached_has_bits & 0x00000400u) {
GOOGLE_DCHECK(elu_param_ != NULL);
elu_param_->Clear();
}
if (cached_has_bits & 0x00000800u) {
GOOGLE_DCHECK(bias_param_ != NULL);
bias_param_->Clear();
}
if (cached_has_bits & 0x00001000u) {
GOOGLE_DCHECK(scale_param_ != NULL);
scale_param_->Clear();
}
if (cached_has_bits & 0x00002000u) {
GOOGLE_DCHECK(input_param_ != NULL);
input_param_->Clear();
}
if (cached_has_bits & 0x00004000u) {
GOOGLE_DCHECK(crop_param_ != NULL);
crop_param_->Clear();
}
if (cached_has_bits & 0x00008000u) {
GOOGLE_DCHECK(parameter_param_ != NULL);
parameter_param_->Clear();
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
GOOGLE_DCHECK(recurrent_param_ != NULL);
recurrent_param_->Clear();
}
if (cached_has_bits & 0x00020000u) {
GOOGLE_DCHECK(coeff_schedule_param_ != NULL);
coeff_schedule_param_->Clear();
}
if (cached_has_bits & 0x00040000u) {
GOOGLE_DCHECK(augmentation_param_ != NULL);
augmentation_param_->Clear();
}
if (cached_has_bits & 0x00080000u) {
GOOGLE_DCHECK(correlation_param_ != NULL);
correlation_param_->Clear();
}
if (cached_has_bits & 0x00100000u) {
GOOGLE_DCHECK(l1_loss_param_ != NULL);
l1_loss_param_->Clear();
}
if (cached_has_bits & 0x00200000u) {
GOOGLE_DCHECK(writer_param_ != NULL);
writer_param_->Clear();
}
if (cached_has_bits & 0x00400000u) {
GOOGLE_DCHECK(reader_param_ != NULL);
reader_param_->Clear();
}
if (cached_has_bits & 0x00800000u) {
GOOGLE_DCHECK(mean_param_ != NULL);
mean_param_->Clear();
}
}
if (cached_has_bits & 50331648u) {
if (cached_has_bits & 0x01000000u) {
GOOGLE_DCHECK(resample_param_ != NULL);
resample_param_->Clear();
}
if (cached_has_bits & 0x02000000u) {
GOOGLE_DCHECK(downsample_param_ != NULL);
downsample_param_->Clear();
}
}
if (cached_has_bits & 201326592u) {
phase_ = 0;
reshape_every_iter_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.LayerParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string name = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.LayerParameter.name");
} else {
goto handle_unusual;
}
break;
}

// optional string type = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.LayerParameter.type");
} else {
goto handle_unusual;
}
break;
}

// repeated string bottom = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_bottom()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(this->bottom_size() - 1).data(),
static_cast<int>(this->bottom(this->bottom_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.LayerParameter.bottom");
} else {
goto handle_unusual;
}
break;
}

// repeated string top = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_top()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(this->top_size() - 1).data(),
static_cast<int>(this->top(this->top_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.LayerParameter.top");
} else {
goto handle_unusual;
}
break;
}

// repeated float loss_weight = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 45u, input, this->mutable_loss_weight())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_loss_weight())));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.ParamSpec param = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_param()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobProto blobs = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blobs()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetStateRule include = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_include()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetStateRule exclude = 9;
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exclude()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.Phase phase = 10;
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::Phase_IsValid(value)) {
set_phase(static_cast< ::caffe::Phase >(value));
} else {
mutable_unknown_fields()->AddVarint(
10, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// repeated bool propagate_down = 11;
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
1, 88u, input, this->mutable_propagate_down())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, this->mutable_propagate_down())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.TransformationParameter transform_param = 100;
case 100: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_transform_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LossParameter loss_param = 101;
case 101: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
case 102: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_accuracy_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
case 103: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_argmax_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ConcatParameter concat_param = 104;
case 104: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_concat_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
case 105: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_contrastive_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
case 106: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_convolution_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DataParameter data_param = 107;
case 107: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 858 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DropoutParameter dropout_param = 108;
case 108: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(98u /* 866 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_dropout_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
case 109: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(106u /* 874 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_dummy_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
case 110: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_eltwise_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ExpParameter exp_param = 111;
case 111: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_exp_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
case 112: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(130u /* 898 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hdf5_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
case 113: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(138u /* 906 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hdf5_output_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
case 114: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 914 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hinge_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ImageDataParameter image_data_param = 115;
case 115: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(154u /* 922 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_image_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
case 116: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(162u /* 930 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_infogain_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
case 117: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(170u /* 938 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_inner_product_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LRNParameter lrn_param = 118;
case 118: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(178u /* 946 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_lrn_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
case 119: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(186u /* 954 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_memory_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.MVNParameter mvn_param = 120;
case 120: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_mvn_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PoolingParameter pooling_param = 121;
case 121: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_pooling_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PowerParameter power_param = 122;
case 122: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(210u /* 978 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_power_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReLUParameter relu_param = 123;
case 123: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 986 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_relu_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
case 124: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(226u /* 994 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_sigmoid_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
case 125: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(234u /* 1002 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_softmax_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SliceParameter slice_param = 126;
case 126: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(242u /* 1010 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_slice_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.TanHParameter tanh_param = 127;
case 127: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(250u /* 1018 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_tanh_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ThresholdParameter threshold_param = 128;
case 128: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(2u /* 1026 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_threshold_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.WindowDataParameter window_data_param = 129;
case 129: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 1034 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_window_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PythonParameter python_param = 130;
case 130: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 1042 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_python_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PReLUParameter prelu_param = 131;
case 131: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 1050 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_prelu_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SPPParameter spp_param = 132;
case 132: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 1058 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_spp_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReshapeParameter reshape_param = 133;
case 133: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 1066 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_reshape_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LogParameter log_param = 134;
case 134: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 1074 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_log_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FlattenParameter flatten_param = 135;
case 135: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 1082 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_flatten_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReductionParameter reduction_param = 136;
case 136: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 1090 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_reduction_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.EmbedParameter embed_param = 137;
case 137: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 1098 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_embed_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.TileParameter tile_param = 138;
case 138: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 1106 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_tile_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
case 139: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 1114 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_batch_norm_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ELUParameter elu_param = 140;
case 140: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(98u /* 1122 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_elu_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.BiasParameter bias_param = 141;
case 141: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(106u /* 1130 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ScaleParameter scale_param = 142;
case 142: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(114u /* 1138 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_scale_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.InputParameter input_param = 143;
case 143: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(122u /* 1146 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_input_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.CropParameter crop_param = 144;
case 144: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(130u /* 1154 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_crop_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ParameterParameter parameter_param = 145;
case 145: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(138u /* 1162 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_parameter_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
case 146: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 1170 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_recurrent_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.CoeffScheduleParameter coeff_schedule_param = 148;
case 148: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(162u /* 1186 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_coeff_schedule_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.AugmentationParameter augmentation_param = 149;
case 149: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(170u /* 1194 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_augmentation_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.CorrelationParameter correlation_param = 150;
case 150: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(178u /* 1202 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_correlation_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.L1LossParameter l1_loss_param = 151;
case 151: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(186u /* 1210 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_l1_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.WriterParameter writer_param = 152;
case 152: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(194u /* 1218 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_writer_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReaderParameter reader_param = 153;
case 153: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 1226 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_reader_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.MeanParameter mean_param = 154;
case 154: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(210u /* 1234 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_mean_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ResampleParameter resample_param = 155;
case 155: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 1242 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_resample_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DownsampleParameter downsample_param = 156;
case 156: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(226u /* 1250 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_downsample_param()));
} else {
goto handle_unusual;
}
break;
}

// optional bool reshape_every_iter = 157 [default = true];
case 157: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(232u /* 1256 & 0xFF */)) {
set_has_reshape_every_iter();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &reshape_every_iter_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.LayerParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->name(), output);
}

// optional string type = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->type(), output);
}

// repeated string bottom = 3;
for (int i = 0, n = this->bottom_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.bottom");
::google::protobuf::internal::WireFormatLite::WriteString(
3, this->bottom(i), output);
}

// repeated string top = 4;
for (int i = 0, n = this->top_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(i).data(), static_cast<int>(this->top(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.top");
::google::protobuf::internal::WireFormatLite::WriteString(
4, this->top(i), output);
}

// repeated float loss_weight = 5;
for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
5, this->loss_weight(i), output);
}

// repeated .caffe.ParamSpec param = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
6, this->param(static_cast<int>(i)), output);
}

// repeated .caffe.BlobProto blobs = 7;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
7, this->blobs(static_cast<int>(i)), output);
}

// repeated .caffe.NetStateRule include = 8;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
8, this->include(static_cast<int>(i)), output);
}

// repeated .caffe.NetStateRule exclude = 9;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
9, this->exclude(static_cast<int>(i)), output);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.Phase phase = 10;
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
10, this->phase(), output);
}

// repeated bool propagate_down = 11;
for (int i = 0, n = this->propagate_down_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteBool(
11, this->propagate_down(i), output);
}

cached_has_bits = _has_bits_[0];
// optional .caffe.TransformationParameter transform_param = 100;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
100, *this->transform_param_, output);
}

// optional .caffe.LossParameter loss_param = 101;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
101, *this->loss_param_, output);
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
102, *this->accuracy_param_, output);
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
103, *this->argmax_param_, output);
}

// optional .caffe.ConcatParameter concat_param = 104;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
104, *this->concat_param_, output);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
105, *this->contrastive_loss_param_, output);
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
106, *this->convolution_param_, output);
}

// optional .caffe.DataParameter data_param = 107;
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
107, *this->data_param_, output);
}

// optional .caffe.DropoutParameter dropout_param = 108;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
108, *this->dropout_param_, output);
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
109, *this->dummy_data_param_, output);
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
110, *this->eltwise_param_, output);
}

// optional .caffe.ExpParameter exp_param = 111;
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
111, *this->exp_param_, output);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
112, *this->hdf5_data_param_, output);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
113, *this->hdf5_output_param_, output);
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
114, *this->hinge_loss_param_, output);
}

// optional .caffe.ImageDataParameter image_data_param = 115;
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
115, *this->image_data_param_, output);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
116, *this->infogain_loss_param_, output);
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
117, *this->inner_product_param_, output);
}

// optional .caffe.LRNParameter lrn_param = 118;
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
118, *this->lrn_param_, output);
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
119, *this->memory_data_param_, output);
}

// optional .caffe.MVNParameter mvn_param = 120;
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
120, *this->mvn_param_, output);
}

// optional .caffe.PoolingParameter pooling_param = 121;
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
121, *this->pooling_param_, output);
}

// optional .caffe.PowerParameter power_param = 122;
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
122, *this->power_param_, output);
}

// optional .caffe.ReLUParameter relu_param = 123;
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
123, *this->relu_param_, output);
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
124, *this->sigmoid_param_, output);
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
125, *this->softmax_param_, output);
}

// optional .caffe.SliceParameter slice_param = 126;
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
126, *this->slice_param_, output);
}

// optional .caffe.TanHParameter tanh_param = 127;
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
127, *this->tanh_param_, output);
}

// optional .caffe.ThresholdParameter threshold_param = 128;
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
128, *this->threshold_param_, output);
}

// optional .caffe.WindowDataParameter window_data_param = 129;
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
129, *this->window_data_param_, output);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.PythonParameter python_param = 130;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
130, *this->python_param_, output);
}

// optional .caffe.PReLUParameter prelu_param = 131;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
131, *this->prelu_param_, output);
}

// optional .caffe.SPPParameter spp_param = 132;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
132, *this->spp_param_, output);
}

// optional .caffe.ReshapeParameter reshape_param = 133;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
133, *this->reshape_param_, output);
}

// optional .caffe.LogParameter log_param = 134;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
134, *this->log_param_, output);
}

// optional .caffe.FlattenParameter flatten_param = 135;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
135, *this->flatten_param_, output);
}

// optional .caffe.ReductionParameter reduction_param = 136;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
136, *this->reduction_param_, output);
}

// optional .caffe.EmbedParameter embed_param = 137;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
137, *this->embed_param_, output);
}

// optional .caffe.TileParameter tile_param = 138;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
138, *this->tile_param_, output);
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
139, *this->batch_norm_param_, output);
}

// optional .caffe.ELUParameter elu_param = 140;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
140, *this->elu_param_, output);
}

// optional .caffe.BiasParameter bias_param = 141;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
141, *this->bias_param_, output);
}

// optional .caffe.ScaleParameter scale_param = 142;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
142, *this->scale_param_, output);
}

// optional .caffe.InputParameter input_param = 143;
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
143, *this->input_param_, output);
}

// optional .caffe.CropParameter crop_param = 144;
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
144, *this->crop_param_, output);
}

// optional .caffe.ParameterParameter parameter_param = 145;
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
145, *this->parameter_param_, output);
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
146, *this->recurrent_param_, output);
}

// optional .caffe.CoeffScheduleParameter coeff_schedule_param = 148;
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
148, *this->coeff_schedule_param_, output);
}

// optional .caffe.AugmentationParameter augmentation_param = 149;
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
149, *this->augmentation_param_, output);
}

// optional .caffe.CorrelationParameter correlation_param = 150;
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
150, *this->correlation_param_, output);
}

// optional .caffe.L1LossParameter l1_loss_param = 151;
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
151, *this->l1_loss_param_, output);
}

// optional .caffe.WriterParameter writer_param = 152;
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
152, *this->writer_param_, output);
}

// optional .caffe.ReaderParameter reader_param = 153;
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
153, *this->reader_param_, output);
}

// optional .caffe.MeanParameter mean_param = 154;
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
154, *this->mean_param_, output);
}

// optional .caffe.ResampleParameter resample_param = 155;
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
155, *this->resample_param_, output);
}

// optional .caffe.DownsampleParameter downsample_param = 156;
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
156, *this->downsample_param_, output);
}

// optional bool reshape_every_iter = 157 [default = true];
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(157, this->reshape_every_iter(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->name(), target);
}

// optional string type = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->type(), target);
}

// repeated string bottom = 3;
for (int i = 0, n = this->bottom_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.bottom");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(3, this->bottom(i), target);
}

// repeated string top = 4;
for (int i = 0, n = this->top_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(i).data(), static_cast<int>(this->top(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.LayerParameter.top");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(4, this->top(i), target);
}

// repeated float loss_weight = 5;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(5, this->loss_weight_, target);

// repeated .caffe.ParamSpec param = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
6, this->param(static_cast<int>(i)), deterministic, target);
}

// repeated .caffe.BlobProto blobs = 7;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
7, this->blobs(static_cast<int>(i)), deterministic, target);
}

// repeated .caffe.NetStateRule include = 8;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
8, this->include(static_cast<int>(i)), deterministic, target);
}

// repeated .caffe.NetStateRule exclude = 9;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
9, this->exclude(static_cast<int>(i)), deterministic, target);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.Phase phase = 10;
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
10, this->phase(), target);
}

// repeated bool propagate_down = 11;
target = ::google::protobuf::internal::WireFormatLite::
WriteBoolToArray(11, this->propagate_down_, target);

cached_has_bits = _has_bits_[0];
// optional .caffe.TransformationParameter transform_param = 100;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
100, *this->transform_param_, deterministic, target);
}

// optional .caffe.LossParameter loss_param = 101;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
101, *this->loss_param_, deterministic, target);
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
102, *this->accuracy_param_, deterministic, target);
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
103, *this->argmax_param_, deterministic, target);
}

// optional .caffe.ConcatParameter concat_param = 104;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
104, *this->concat_param_, deterministic, target);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
105, *this->contrastive_loss_param_, deterministic, target);
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
106, *this->convolution_param_, deterministic, target);
}

// optional .caffe.DataParameter data_param = 107;
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
107, *this->data_param_, deterministic, target);
}

// optional .caffe.DropoutParameter dropout_param = 108;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
108, *this->dropout_param_, deterministic, target);
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
109, *this->dummy_data_param_, deterministic, target);
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
110, *this->eltwise_param_, deterministic, target);
}

// optional .caffe.ExpParameter exp_param = 111;
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
111, *this->exp_param_, deterministic, target);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
112, *this->hdf5_data_param_, deterministic, target);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
113, *this->hdf5_output_param_, deterministic, target);
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
114, *this->hinge_loss_param_, deterministic, target);
}

// optional .caffe.ImageDataParameter image_data_param = 115;
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
115, *this->image_data_param_, deterministic, target);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
116, *this->infogain_loss_param_, deterministic, target);
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
117, *this->inner_product_param_, deterministic, target);
}

// optional .caffe.LRNParameter lrn_param = 118;
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
118, *this->lrn_param_, deterministic, target);
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
119, *this->memory_data_param_, deterministic, target);
}

// optional .caffe.MVNParameter mvn_param = 120;
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
120, *this->mvn_param_, deterministic, target);
}

// optional .caffe.PoolingParameter pooling_param = 121;
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
121, *this->pooling_param_, deterministic, target);
}

// optional .caffe.PowerParameter power_param = 122;
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
122, *this->power_param_, deterministic, target);
}

// optional .caffe.ReLUParameter relu_param = 123;
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
123, *this->relu_param_, deterministic, target);
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
124, *this->sigmoid_param_, deterministic, target);
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
125, *this->softmax_param_, deterministic, target);
}

// optional .caffe.SliceParameter slice_param = 126;
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
126, *this->slice_param_, deterministic, target);
}

// optional .caffe.TanHParameter tanh_param = 127;
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
127, *this->tanh_param_, deterministic, target);
}

// optional .caffe.ThresholdParameter threshold_param = 128;
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
128, *this->threshold_param_, deterministic, target);
}

// optional .caffe.WindowDataParameter window_data_param = 129;
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
129, *this->window_data_param_, deterministic, target);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.PythonParameter python_param = 130;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
130, *this->python_param_, deterministic, target);
}

// optional .caffe.PReLUParameter prelu_param = 131;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
131, *this->prelu_param_, deterministic, target);
}

// optional .caffe.SPPParameter spp_param = 132;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
132, *this->spp_param_, deterministic, target);
}

// optional .caffe.ReshapeParameter reshape_param = 133;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
133, *this->reshape_param_, deterministic, target);
}

// optional .caffe.LogParameter log_param = 134;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
134, *this->log_param_, deterministic, target);
}

// optional .caffe.FlattenParameter flatten_param = 135;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
135, *this->flatten_param_, deterministic, target);
}

// optional .caffe.ReductionParameter reduction_param = 136;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
136, *this->reduction_param_, deterministic, target);
}

// optional .caffe.EmbedParameter embed_param = 137;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
137, *this->embed_param_, deterministic, target);
}

// optional .caffe.TileParameter tile_param = 138;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
138, *this->tile_param_, deterministic, target);
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
139, *this->batch_norm_param_, deterministic, target);
}

// optional .caffe.ELUParameter elu_param = 140;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
140, *this->elu_param_, deterministic, target);
}

// optional .caffe.BiasParameter bias_param = 141;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
141, *this->bias_param_, deterministic, target);
}

// optional .caffe.ScaleParameter scale_param = 142;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
142, *this->scale_param_, deterministic, target);
}

// optional .caffe.InputParameter input_param = 143;
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
143, *this->input_param_, deterministic, target);
}

// optional .caffe.CropParameter crop_param = 144;
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
144, *this->crop_param_, deterministic, target);
}

// optional .caffe.ParameterParameter parameter_param = 145;
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
145, *this->parameter_param_, deterministic, target);
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
146, *this->recurrent_param_, deterministic, target);
}

// optional .caffe.CoeffScheduleParameter coeff_schedule_param = 148;
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
148, *this->coeff_schedule_param_, deterministic, target);
}

// optional .caffe.AugmentationParameter augmentation_param = 149;
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
149, *this->augmentation_param_, deterministic, target);
}

// optional .caffe.CorrelationParameter correlation_param = 150;
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
150, *this->correlation_param_, deterministic, target);
}

// optional .caffe.L1LossParameter l1_loss_param = 151;
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
151, *this->l1_loss_param_, deterministic, target);
}

// optional .caffe.WriterParameter writer_param = 152;
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
152, *this->writer_param_, deterministic, target);
}

// optional .caffe.ReaderParameter reader_param = 153;
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
153, *this->reader_param_, deterministic, target);
}

// optional .caffe.MeanParameter mean_param = 154;
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
154, *this->mean_param_, deterministic, target);
}

// optional .caffe.ResampleParameter resample_param = 155;
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
155, *this->resample_param_, deterministic, target);
}

// optional .caffe.DownsampleParameter downsample_param = 156;
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
156, *this->downsample_param_, deterministic, target);
}

// optional bool reshape_every_iter = 157 [default = true];
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(157, this->reshape_every_iter(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated string bottom = 3;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->bottom_size());
for (int i = 0, n = this->bottom_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->bottom(i));
}

// repeated string top = 4;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->top_size());
for (int i = 0, n = this->top_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->top(i));
}

// repeated float loss_weight = 5;
{
unsigned int count = static_cast<unsigned int>(this->loss_weight_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->loss_weight_size());
total_size += data_size;
}

// repeated .caffe.ParamSpec param = 6;
{
unsigned int count = static_cast<unsigned int>(this->param_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->param(static_cast<int>(i)));
}
}

// repeated .caffe.BlobProto blobs = 7;
{
unsigned int count = static_cast<unsigned int>(this->blobs_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->blobs(static_cast<int>(i)));
}
}

// repeated .caffe.NetStateRule include = 8;
{
unsigned int count = static_cast<unsigned int>(this->include_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->include(static_cast<int>(i)));
}
}

// repeated .caffe.NetStateRule exclude = 9;
{
unsigned int count = static_cast<unsigned int>(this->exclude_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->exclude(static_cast<int>(i)));
}
}

// repeated bool propagate_down = 11;
{
unsigned int count = static_cast<unsigned int>(this->propagate_down_size());
size_t data_size = 1UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->propagate_down_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string name = 1;
if (has_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->name());
}

// optional string type = 2;
if (has_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->type());
}

// optional .caffe.TransformationParameter transform_param = 100;
if (has_transform_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->transform_param_);
}

// optional .caffe.LossParameter loss_param = 101;
if (has_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->loss_param_);
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
if (has_accuracy_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->accuracy_param_);
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
if (has_argmax_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->argmax_param_);
}

// optional .caffe.ConcatParameter concat_param = 104;
if (has_concat_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->concat_param_);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
if (has_contrastive_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->contrastive_loss_param_);
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional .caffe.ConvolutionParameter convolution_param = 106;
if (has_convolution_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->convolution_param_);
}

// optional .caffe.DataParameter data_param = 107;
if (has_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->data_param_);
}

// optional .caffe.DropoutParameter dropout_param = 108;
if (has_dropout_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->dropout_param_);
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
if (has_dummy_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->dummy_data_param_);
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
if (has_eltwise_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->eltwise_param_);
}

// optional .caffe.ExpParameter exp_param = 111;
if (has_exp_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->exp_param_);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
if (has_hdf5_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hdf5_data_param_);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
if (has_hdf5_output_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hdf5_output_param_);
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional .caffe.HingeLossParameter hinge_loss_param = 114;
if (has_hinge_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hinge_loss_param_);
}

// optional .caffe.ImageDataParameter image_data_param = 115;
if (has_image_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->image_data_param_);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
if (has_infogain_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->infogain_loss_param_);
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
if (has_inner_product_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->inner_product_param_);
}

// optional .caffe.LRNParameter lrn_param = 118;
if (has_lrn_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->lrn_param_);
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
if (has_memory_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->memory_data_param_);
}

// optional .caffe.MVNParameter mvn_param = 120;
if (has_mvn_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->mvn_param_);
}

// optional .caffe.PoolingParameter pooling_param = 121;
if (has_pooling_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->pooling_param_);
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional .caffe.PowerParameter power_param = 122;
if (has_power_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->power_param_);
}

// optional .caffe.ReLUParameter relu_param = 123;
if (has_relu_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->relu_param_);
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
if (has_sigmoid_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->sigmoid_param_);
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
if (has_softmax_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->softmax_param_);
}

// optional .caffe.SliceParameter slice_param = 126;
if (has_slice_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->slice_param_);
}

// optional .caffe.TanHParameter tanh_param = 127;
if (has_tanh_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->tanh_param_);
}

// optional .caffe.ThresholdParameter threshold_param = 128;
if (has_threshold_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->threshold_param_);
}

// optional .caffe.WindowDataParameter window_data_param = 129;
if (has_window_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->window_data_param_);
}

}
if (_has_bits_[32 / 32] & 255u) {
// optional .caffe.PythonParameter python_param = 130;
if (has_python_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->python_param_);
}

// optional .caffe.PReLUParameter prelu_param = 131;
if (has_prelu_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->prelu_param_);
}

// optional .caffe.SPPParameter spp_param = 132;
if (has_spp_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->spp_param_);
}

// optional .caffe.ReshapeParameter reshape_param = 133;
if (has_reshape_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->reshape_param_);
}

// optional .caffe.LogParameter log_param = 134;
if (has_log_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->log_param_);
}

// optional .caffe.FlattenParameter flatten_param = 135;
if (has_flatten_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->flatten_param_);
}

// optional .caffe.ReductionParameter reduction_param = 136;
if (has_reduction_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->reduction_param_);
}

// optional .caffe.EmbedParameter embed_param = 137;
if (has_embed_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->embed_param_);
}

}
if (_has_bits_[40 / 32] & 65280u) {
// optional .caffe.TileParameter tile_param = 138;
if (has_tile_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->tile_param_);
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
if (has_batch_norm_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->batch_norm_param_);
}

// optional .caffe.ELUParameter elu_param = 140;
if (has_elu_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->elu_param_);
}

// optional .caffe.BiasParameter bias_param = 141;
if (has_bias_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_param_);
}

// optional .caffe.ScaleParameter scale_param = 142;
if (has_scale_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->scale_param_);
}

// optional .caffe.InputParameter input_param = 143;
if (has_input_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->input_param_);
}

// optional .caffe.CropParameter crop_param = 144;
if (has_crop_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->crop_param_);
}

// optional .caffe.ParameterParameter parameter_param = 145;
if (has_parameter_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->parameter_param_);
}

}
if (_has_bits_[48 / 32] & 16711680u) {
// optional .caffe.RecurrentParameter recurrent_param = 146;
if (has_recurrent_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->recurrent_param_);
}

// optional .caffe.CoeffScheduleParameter coeff_schedule_param = 148;
if (has_coeff_schedule_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->coeff_schedule_param_);
}

// optional .caffe.AugmentationParameter augmentation_param = 149;
if (has_augmentation_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->augmentation_param_);
}

// optional .caffe.CorrelationParameter correlation_param = 150;
if (has_correlation_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->correlation_param_);
}

// optional .caffe.L1LossParameter l1_loss_param = 151;
if (has_l1_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->l1_loss_param_);
}

// optional .caffe.WriterParameter writer_param = 152;
if (has_writer_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->writer_param_);
}

// optional .caffe.ReaderParameter reader_param = 153;
if (has_reader_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->reader_param_);
}

// optional .caffe.MeanParameter mean_param = 154;
if (has_mean_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->mean_param_);
}

}
if (_has_bits_[56 / 32] & 251658240u) {
// optional .caffe.ResampleParameter resample_param = 155;
if (has_resample_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->resample_param_);
}

// optional .caffe.DownsampleParameter downsample_param = 156;
if (has_downsample_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->downsample_param_);
}

// optional .caffe.Phase phase = 10;
if (has_phase()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
}

// optional bool reshape_every_iter = 157 [default = true];
if (has_reshape_every_iter()) {
total_size += 2 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
const LayerParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
MergeFrom(*source);
}
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

bottom_.MergeFrom(from.bottom_);
top_.MergeFrom(from.top_);
loss_weight_.MergeFrom(from.loss_weight_);
param_.MergeFrom(from.param_);
blobs_.MergeFrom(from.blobs_);
include_.MergeFrom(from.include_);
exclude_.MergeFrom(from.exclude_);
propagate_down_.MergeFrom(from.propagate_down_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_name();
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (cached_has_bits & 0x00000002u) {
set_has_type();
type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
}
if (cached_has_bits & 0x00000004u) {
mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
}
if (cached_has_bits & 0x00000008u) {
mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
}
if (cached_has_bits & 0x00000010u) {
mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
}
if (cached_has_bits & 0x00000020u) {
mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
}
if (cached_has_bits & 0x00000040u) {
mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
}
if (cached_has_bits & 0x00000080u) {
mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
}
if (cached_has_bits & 0x00000200u) {
mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
}
if (cached_has_bits & 0x00000400u) {
mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
}
if (cached_has_bits & 0x00000800u) {
mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
}
if (cached_has_bits & 0x00001000u) {
mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
}
if (cached_has_bits & 0x00002000u) {
mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
}
if (cached_has_bits & 0x00004000u) {
mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
}
if (cached_has_bits & 0x00008000u) {
mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
}
if (cached_has_bits & 0x00020000u) {
mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
}
if (cached_has_bits & 0x00040000u) {
mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
}
if (cached_has_bits & 0x00080000u) {
mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
}
if (cached_has_bits & 0x00100000u) {
mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
}
if (cached_has_bits & 0x00200000u) {
mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
}
if (cached_has_bits & 0x00400000u) {
mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
}
if (cached_has_bits & 0x00800000u) {
mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
}
if (cached_has_bits & 0x02000000u) {
mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
}
if (cached_has_bits & 0x04000000u) {
mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
}
if (cached_has_bits & 0x08000000u) {
mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
}
if (cached_has_bits & 0x10000000u) {
mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
}
if (cached_has_bits & 0x20000000u) {
mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
}
if (cached_has_bits & 0x40000000u) {
mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
}
if (cached_has_bits & 0x80000000u) {
mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
}
}
cached_has_bits = from._has_bits_[1];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
}
if (cached_has_bits & 0x00000002u) {
mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
}
if (cached_has_bits & 0x00000004u) {
mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
}
if (cached_has_bits & 0x00000008u) {
mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
}
if (cached_has_bits & 0x00000010u) {
mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
}
if (cached_has_bits & 0x00000020u) {
mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
}
if (cached_has_bits & 0x00000040u) {
mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
}
if (cached_has_bits & 0x00000080u) {
mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
}
if (cached_has_bits & 0x00000200u) {
mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
}
if (cached_has_bits & 0x00000400u) {
mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
}
if (cached_has_bits & 0x00000800u) {
mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
}
if (cached_has_bits & 0x00001000u) {
mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
}
if (cached_has_bits & 0x00002000u) {
mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
}
if (cached_has_bits & 0x00004000u) {
mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
}
if (cached_has_bits & 0x00008000u) {
mutable_parameter_param()->::caffe::ParameterParameter::MergeFrom(from.parameter_param());
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
mutable_recurrent_param()->::caffe::RecurrentParameter::MergeFrom(from.recurrent_param());
}
if (cached_has_bits & 0x00020000u) {
mutable_coeff_schedule_param()->::caffe::CoeffScheduleParameter::MergeFrom(from.coeff_schedule_param());
}
if (cached_has_bits & 0x00040000u) {
mutable_augmentation_param()->::caffe::AugmentationParameter::MergeFrom(from.augmentation_param());
}
if (cached_has_bits & 0x00080000u) {
mutable_correlation_param()->::caffe::CorrelationParameter::MergeFrom(from.correlation_param());
}
if (cached_has_bits & 0x00100000u) {
mutable_l1_loss_param()->::caffe::L1LossParameter::MergeFrom(from.l1_loss_param());
}
if (cached_has_bits & 0x00200000u) {
mutable_writer_param()->::caffe::WriterParameter::MergeFrom(from.writer_param());
}
if (cached_has_bits & 0x00400000u) {
mutable_reader_param()->::caffe::ReaderParameter::MergeFrom(from.reader_param());
}
if (cached_has_bits & 0x00800000u) {
mutable_mean_param()->::caffe::MeanParameter::MergeFrom(from.mean_param());
}
}
if (cached_has_bits & 251658240u) {
if (cached_has_bits & 0x01000000u) {
mutable_resample_param()->::caffe::ResampleParameter::MergeFrom(from.resample_param());
}
if (cached_has_bits & 0x02000000u) {
mutable_downsample_param()->::caffe::DownsampleParameter::MergeFrom(from.downsample_param());
}
if (cached_has_bits & 0x04000000u) {
phase_ = from.phase_;
}
if (cached_has_bits & 0x08000000u) {
reshape_every_iter_ = from.reshape_every_iter_;
}
_has_bits_[1] |= cached_has_bits;
}
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
if (has_reader_param()) {
if (!this->reader_param_->IsInitialized()) return false;
}
if (has_mean_param()) {
if (!this->mean_param_->IsInitialized()) return false;
}
return true;
}

void LayerParameter::Swap(LayerParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
using std::swap;
bottom_.InternalSwap(&other->bottom_);
top_.InternalSwap(&other->top_);
loss_weight_.InternalSwap(&other->loss_weight_);
param_.InternalSwap(&other->param_);
blobs_.InternalSwap(&other->blobs_);
include_.InternalSwap(&other->include_);
exclude_.InternalSwap(&other->exclude_);
propagate_down_.InternalSwap(&other->propagate_down_);
name_.Swap(&other->name_);
type_.Swap(&other->type_);
swap(transform_param_, other->transform_param_);
swap(loss_param_, other->loss_param_);
swap(accuracy_param_, other->accuracy_param_);
swap(argmax_param_, other->argmax_param_);
swap(concat_param_, other->concat_param_);
swap(contrastive_loss_param_, other->contrastive_loss_param_);
swap(convolution_param_, other->convolution_param_);
swap(data_param_, other->data_param_);
swap(dropout_param_, other->dropout_param_);
swap(dummy_data_param_, other->dummy_data_param_);
swap(eltwise_param_, other->eltwise_param_);
swap(exp_param_, other->exp_param_);
swap(hdf5_data_param_, other->hdf5_data_param_);
swap(hdf5_output_param_, other->hdf5_output_param_);
swap(hinge_loss_param_, other->hinge_loss_param_);
swap(image_data_param_, other->image_data_param_);
swap(infogain_loss_param_, other->infogain_loss_param_);
swap(inner_product_param_, other->inner_product_param_);
swap(lrn_param_, other->lrn_param_);
swap(memory_data_param_, other->memory_data_param_);
swap(mvn_param_, other->mvn_param_);
swap(pooling_param_, other->pooling_param_);
swap(power_param_, other->power_param_);
swap(relu_param_, other->relu_param_);
swap(sigmoid_param_, other->sigmoid_param_);
swap(softmax_param_, other->softmax_param_);
swap(slice_param_, other->slice_param_);
swap(tanh_param_, other->tanh_param_);
swap(threshold_param_, other->threshold_param_);
swap(window_data_param_, other->window_data_param_);
swap(python_param_, other->python_param_);
swap(prelu_param_, other->prelu_param_);
swap(spp_param_, other->spp_param_);
swap(reshape_param_, other->reshape_param_);
swap(log_param_, other->log_param_);
swap(flatten_param_, other->flatten_param_);
swap(reduction_param_, other->reduction_param_);
swap(embed_param_, other->embed_param_);
swap(tile_param_, other->tile_param_);
swap(batch_norm_param_, other->batch_norm_param_);
swap(elu_param_, other->elu_param_);
swap(bias_param_, other->bias_param_);
swap(scale_param_, other->scale_param_);
swap(input_param_, other->input_param_);
swap(crop_param_, other->crop_param_);
swap(parameter_param_, other->parameter_param_);
swap(recurrent_param_, other->recurrent_param_);
swap(coeff_schedule_param_, other->coeff_schedule_param_);
swap(augmentation_param_, other->augmentation_param_);
swap(correlation_param_, other->correlation_param_);
swap(l1_loss_param_, other->l1_loss_param_);
swap(writer_param_, other->writer_param_);
swap(reader_param_, other->reader_param_);
swap(mean_param_, other->mean_param_);
swap(resample_param_, other->resample_param_);
swap(downsample_param_, other->downsample_param_);
swap(phase_, other->phase_);
swap(reshape_every_iter_, other->reshape_every_iter_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AugmentationCoeff::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AugmentationCoeff::kMirrorFieldNumber;
const int AugmentationCoeff::kDxFieldNumber;
const int AugmentationCoeff::kDyFieldNumber;
const int AugmentationCoeff::kAngleFieldNumber;
const int AugmentationCoeff::kZoomXFieldNumber;
const int AugmentationCoeff::kZoomYFieldNumber;
const int AugmentationCoeff::kGammaFieldNumber;
const int AugmentationCoeff::kBrightnessFieldNumber;
const int AugmentationCoeff::kContrastFieldNumber;
const int AugmentationCoeff::kColor1FieldNumber;
const int AugmentationCoeff::kColor2FieldNumber;
const int AugmentationCoeff::kColor3FieldNumber;
const int AugmentationCoeff::kPowNomean0FieldNumber;
const int AugmentationCoeff::kPowNomean1FieldNumber;
const int AugmentationCoeff::kPowNomean2FieldNumber;
const int AugmentationCoeff::kAddNomean0FieldNumber;
const int AugmentationCoeff::kAddNomean1FieldNumber;
const int AugmentationCoeff::kAddNomean2FieldNumber;
const int AugmentationCoeff::kMultNomean0FieldNumber;
const int AugmentationCoeff::kMultNomean1FieldNumber;
const int AugmentationCoeff::kMultNomean2FieldNumber;
const int AugmentationCoeff::kPowWithmean0FieldNumber;
const int AugmentationCoeff::kPowWithmean1FieldNumber;
const int AugmentationCoeff::kPowWithmean2FieldNumber;
const int AugmentationCoeff::kAddWithmean0FieldNumber;
const int AugmentationCoeff::kAddWithmean1FieldNumber;
const int AugmentationCoeff::kAddWithmean2FieldNumber;
const int AugmentationCoeff::kMultWithmean0FieldNumber;
const int AugmentationCoeff::kMultWithmean1FieldNumber;
const int AugmentationCoeff::kMultWithmean2FieldNumber;
const int AugmentationCoeff::kLmultPowFieldNumber;
const int AugmentationCoeff::kLmultAddFieldNumber;
const int AugmentationCoeff::kLmultMultFieldNumber;
const int AugmentationCoeff::kColAngleFieldNumber;
const int AugmentationCoeff::kFogAmountFieldNumber;
const int AugmentationCoeff::kFogSizeFieldNumber;
const int AugmentationCoeff::kMotionBlurAngleFieldNumber;
const int AugmentationCoeff::kMotionBlurSizeFieldNumber;
const int AugmentationCoeff::kShadowAngleFieldNumber;
const int AugmentationCoeff::kShadowDistanceFieldNumber;
const int AugmentationCoeff::kShadowStrengthFieldNumber;
const int AugmentationCoeff::kNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AugmentationCoeff::AugmentationCoeff()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsAugmentationCoeff();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.AugmentationCoeff)
}
AugmentationCoeff::AugmentationCoeff(const AugmentationCoeff& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&mirror_, &from.mirror_,
static_cast<size_t>(reinterpret_cast<char*>(&color2_) -
reinterpret_cast<char*>(&mirror_)) + sizeof(color2_));
// @@protoc_insertion_point(copy_constructor:caffe.AugmentationCoeff)
}

void AugmentationCoeff::SharedCtor() {
::memset(&mirror_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&noise_) -
reinterpret_cast<char*>(&mirror_)) + sizeof(noise_));
color3_ = 1;
zoom_x_ = 1;
zoom_y_ = 1;
pow_nomean0_ = 1;
pow_nomean1_ = 1;
pow_nomean2_ = 1;
mult_nomean0_ = 1;
mult_nomean1_ = 1;
mult_nomean2_ = 1;
pow_withmean0_ = 1;
pow_withmean1_ = 1;
pow_withmean2_ = 1;
mult_withmean0_ = 1;
mult_withmean1_ = 1;
mult_withmean2_ = 1;
lmult_pow_ = 1;
lmult_mult_ = 1;
gamma_ = 1;
contrast_ = 1;
color1_ = 1;
color2_ = 1;
_cached_size_ = 0;
}

AugmentationCoeff::~AugmentationCoeff() {
// @@protoc_insertion_point(destructor:caffe.AugmentationCoeff)
SharedDtor();
}

void AugmentationCoeff::SharedDtor() {
}

void AugmentationCoeff::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AugmentationCoeff::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AugmentationCoeff& AugmentationCoeff::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsAugmentationCoeff();
return *internal_default_instance();
}

AugmentationCoeff* AugmentationCoeff::New(::google::protobuf::Arena* arena) const {
AugmentationCoeff* n = new AugmentationCoeff;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void AugmentationCoeff::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AugmentationCoeff)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
::memset(&mirror_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&add_withmean0_) -
reinterpret_cast<char*>(&mirror_)) + sizeof(add_withmean0_));
}
if (cached_has_bits & 65280u) {
::memset(&add_withmean1_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&motion_blur_size_) -
reinterpret_cast<char*>(&add_withmean1_)) + sizeof(motion_blur_size_));
}
if (cached_has_bits & 16711680u) {
::memset(&shadow_angle_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&noise_) -
reinterpret_cast<char*>(&shadow_angle_)) + sizeof(noise_));
color3_ = 1;
zoom_x_ = 1;
zoom_y_ = 1;
}
if (cached_has_bits & 4278190080u) {
pow_nomean0_ = 1;
pow_nomean1_ = 1;
pow_nomean2_ = 1;
mult_nomean0_ = 1;
mult_nomean1_ = 1;
mult_nomean2_ = 1;
pow_withmean0_ = 1;
pow_withmean1_ = 1;
}
cached_has_bits = _has_bits_[1];
if (cached_has_bits & 255u) {
pow_withmean2_ = 1;
mult_withmean0_ = 1;
mult_withmean1_ = 1;
mult_withmean2_ = 1;
lmult_pow_ = 1;
lmult_mult_ = 1;
gamma_ = 1;
contrast_ = 1;
}
if (cached_has_bits & 768u) {
color1_ = 1;
color2_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool AugmentationCoeff::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.AugmentationCoeff)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float mirror = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional float dx = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_dx();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &dx_)));
} else {
goto handle_unusual;
}
break;
}

// optional float dy = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_dy();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &dy_)));
} else {
goto handle_unusual;
}
break;
}

// optional float angle = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_angle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &angle_)));
} else {
goto handle_unusual;
}
break;
}

// optional float zoom_x = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_zoom_x();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &zoom_x_)));
} else {
goto handle_unusual;
}
break;
}

// optional float zoom_y = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
set_has_zoom_y();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &zoom_y_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_nomean0 = 10 [default = 1];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
set_has_pow_nomean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_nomean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_nomean1 = 11 [default = 1];
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
set_has_pow_nomean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_nomean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_nomean2 = 12 [default = 1];
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
set_has_pow_nomean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_nomean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_nomean0 = 13 [default = 0];
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
set_has_add_nomean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_nomean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_nomean1 = 14 [default = 0];
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
set_has_add_nomean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_nomean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_nomean2 = 15 [default = 0];
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
set_has_add_nomean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_nomean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_nomean0 = 16 [default = 1];
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
set_has_mult_nomean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_nomean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_nomean1 = 17 [default = 1];
case 17: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
set_has_mult_nomean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_nomean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_nomean2 = 18 [default = 1];
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
set_has_mult_nomean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_nomean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_withmean0 = 19 [default = 1];
case 19: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
set_has_pow_withmean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_withmean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_withmean1 = 20 [default = 1];
case 20: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
set_has_pow_withmean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_withmean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float pow_withmean2 = 21 [default = 1];
case 21: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
set_has_pow_withmean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &pow_withmean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_withmean0 = 22 [default = 0];
case 22: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
set_has_add_withmean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_withmean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_withmean1 = 23 [default = 0];
case 23: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
set_has_add_withmean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_withmean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float add_withmean2 = 24 [default = 0];
case 24: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
set_has_add_withmean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &add_withmean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_withmean0 = 25 [default = 1];
case 25: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
set_has_mult_withmean0();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_withmean0_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_withmean1 = 26 [default = 1];
case 26: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
set_has_mult_withmean1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_withmean1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mult_withmean2 = 27 [default = 1];
case 27: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
set_has_mult_withmean2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mult_withmean2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float lmult_pow = 28 [default = 1];
case 28: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {
set_has_lmult_pow();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &lmult_pow_)));
} else {
goto handle_unusual;
}
break;
}

// optional float lmult_add = 29 [default = 0];
case 29: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {
set_has_lmult_add();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &lmult_add_)));
} else {
goto handle_unusual;
}
break;
}

// optional float lmult_mult = 30 [default = 1];
case 30: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
set_has_lmult_mult();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &lmult_mult_)));
} else {
goto handle_unusual;
}
break;
}

// optional float col_angle = 31 [default = 0];
case 31: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
set_has_col_angle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &col_angle_)));
} else {
goto handle_unusual;
}
break;
}

// optional float fog_amount = 38 [default = 0];
case 38: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {
set_has_fog_amount();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &fog_amount_)));
} else {
goto handle_unusual;
}
break;
}

// optional float fog_size = 39 [default = 0];
case 39: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {
set_has_fog_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &fog_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional float motion_blur_angle = 40 [default = 0];
case 40: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
set_has_motion_blur_angle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &motion_blur_angle_)));
} else {
goto handle_unusual;
}
break;
}

// optional float motion_blur_size = 41 [default = 0];
case 41: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 333 & 0xFF */)) {
set_has_motion_blur_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &motion_blur_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shadow_angle = 42 [default = 0];
case 42: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(85u /* 341 & 0xFF */)) {
set_has_shadow_angle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shadow_angle_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shadow_distance = 43 [default = 0];
case 43: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(93u /* 349 & 0xFF */)) {
set_has_shadow_distance();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shadow_distance_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shadow_strength = 44 [default = 0];
case 44: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {
set_has_shadow_strength();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shadow_strength_)));
} else {
goto handle_unusual;
}
break;
}

// optional float noise = 45 [default = 0];
case 45: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(109u /* 365 & 0xFF */)) {
set_has_noise();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &noise_)));
} else {
goto handle_unusual;
}
break;
}

// optional float gamma = 100 [default = 1];
case 100: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 805 & 0xFF */)) {
set_has_gamma();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &gamma_)));
} else {
goto handle_unusual;
}
break;
}

// optional float brightness = 101 [default = 0];
case 101: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 813 & 0xFF */)) {
set_has_brightness();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &brightness_)));
} else {
goto handle_unusual;
}
break;
}

// optional float contrast = 102 [default = 1];
case 102: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 821 & 0xFF */)) {
set_has_contrast();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &contrast_)));
} else {
goto handle_unusual;
}
break;
}

// optional float color1 = 103 [default = 1];
case 103: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(61u /* 829 & 0xFF */)) {
set_has_color1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &color1_)));
} else {
goto handle_unusual;
}
break;
}

// optional float color2 = 104 [default = 1];
case 104: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(69u /* 837 & 0xFF */)) {
set_has_color2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &color2_)));
} else {
goto handle_unusual;
}
break;
}

// optional float color3 = 105 [default = 1];
case 105: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 845 & 0xFF */)) {
set_has_color3();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &color3_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.AugmentationCoeff)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.AugmentationCoeff)
return false;
#undef DO_
}

void AugmentationCoeff::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.AugmentationCoeff)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float mirror = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mirror(), output);
}

// optional float dx = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dx(), output);
}

// optional float dy = 3 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dy(), output);
}

// optional float angle = 4 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
}

// optional float zoom_x = 5 [default = 1];
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->zoom_x(), output);
}

// optional float zoom_y = 6 [default = 1];
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zoom_y(), output);
}

// optional float pow_nomean0 = 10 [default = 1];
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pow_nomean0(), output);
}

// optional float pow_nomean1 = 11 [default = 1];
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pow_nomean1(), output);
}

// optional float pow_nomean2 = 12 [default = 1];
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pow_nomean2(), output);
}

// optional float add_nomean0 = 13 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->add_nomean0(), output);
}

// optional float add_nomean1 = 14 [default = 0];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->add_nomean1(), output);
}

// optional float add_nomean2 = 15 [default = 0];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->add_nomean2(), output);
}

// optional float mult_nomean0 = 16 [default = 1];
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->mult_nomean0(), output);
}

// optional float mult_nomean1 = 17 [default = 1];
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->mult_nomean1(), output);
}

// optional float mult_nomean2 = 18 [default = 1];
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->mult_nomean2(), output);
}

// optional float pow_withmean0 = 19 [default = 1];
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->pow_withmean0(), output);
}

// optional float pow_withmean1 = 20 [default = 1];
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->pow_withmean1(), output);
}

cached_has_bits = _has_bits_[1];
// optional float pow_withmean2 = 21 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->pow_withmean2(), output);
}

cached_has_bits = _has_bits_[0];
// optional float add_withmean0 = 22 [default = 0];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->add_withmean0(), output);
}

// optional float add_withmean1 = 23 [default = 0];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->add_withmean1(), output);
}

// optional float add_withmean2 = 24 [default = 0];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->add_withmean2(), output);
}

cached_has_bits = _has_bits_[1];
// optional float mult_withmean0 = 25 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->mult_withmean0(), output);
}

// optional float mult_withmean1 = 26 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->mult_withmean1(), output);
}

// optional float mult_withmean2 = 27 [default = 1];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mult_withmean2(), output);
}

// optional float lmult_pow = 28 [default = 1];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->lmult_pow(), output);
}

cached_has_bits = _has_bits_[0];
// optional float lmult_add = 29 [default = 0];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->lmult_add(), output);
}

cached_has_bits = _has_bits_[1];
// optional float lmult_mult = 30 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->lmult_mult(), output);
}

cached_has_bits = _has_bits_[0];
// optional float col_angle = 31 [default = 0];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->col_angle(), output);
}

// optional float fog_amount = 38 [default = 0];
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->fog_amount(), output);
}

// optional float fog_size = 39 [default = 0];
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->fog_size(), output);
}

// optional float motion_blur_angle = 40 [default = 0];
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->motion_blur_angle(), output);
}

// optional float motion_blur_size = 41 [default = 0];
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->motion_blur_size(), output);
}

// optional float shadow_angle = 42 [default = 0];
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->shadow_angle(), output);
}

// optional float shadow_distance = 43 [default = 0];
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->shadow_distance(), output);
}

// optional float shadow_strength = 44 [default = 0];
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->shadow_strength(), output);
}

// optional float noise = 45 [default = 0];
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->noise(), output);
}

cached_has_bits = _has_bits_[1];
// optional float gamma = 100 [default = 1];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->gamma(), output);
}

cached_has_bits = _has_bits_[0];
// optional float brightness = 101 [default = 0];
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(101, this->brightness(), output);
}

cached_has_bits = _has_bits_[1];
// optional float contrast = 102 [default = 1];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->contrast(), output);
}

// optional float color1 = 103 [default = 1];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(103, this->color1(), output);
}

// optional float color2 = 104 [default = 1];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(104, this->color2(), output);
}

cached_has_bits = _has_bits_[0];
// optional float color3 = 105 [default = 1];
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(105, this->color3(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.AugmentationCoeff)
}

::google::protobuf::uint8* AugmentationCoeff::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.AugmentationCoeff)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float mirror = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mirror(), target);
}

// optional float dx = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dx(), target);
}

// optional float dy = 3 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dy(), target);
}

// optional float angle = 4 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
}

// optional float zoom_x = 5 [default = 1];
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->zoom_x(), target);
}

// optional float zoom_y = 6 [default = 1];
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zoom_y(), target);
}

// optional float pow_nomean0 = 10 [default = 1];
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pow_nomean0(), target);
}

// optional float pow_nomean1 = 11 [default = 1];
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pow_nomean1(), target);
}

// optional float pow_nomean2 = 12 [default = 1];
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pow_nomean2(), target);
}

// optional float add_nomean0 = 13 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->add_nomean0(), target);
}

// optional float add_nomean1 = 14 [default = 0];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->add_nomean1(), target);
}

// optional float add_nomean2 = 15 [default = 0];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->add_nomean2(), target);
}

// optional float mult_nomean0 = 16 [default = 1];
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->mult_nomean0(), target);
}

// optional float mult_nomean1 = 17 [default = 1];
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->mult_nomean1(), target);
}

// optional float mult_nomean2 = 18 [default = 1];
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->mult_nomean2(), target);
}

// optional float pow_withmean0 = 19 [default = 1];
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->pow_withmean0(), target);
}

// optional float pow_withmean1 = 20 [default = 1];
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->pow_withmean1(), target);
}

cached_has_bits = _has_bits_[1];
// optional float pow_withmean2 = 21 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->pow_withmean2(), target);
}

cached_has_bits = _has_bits_[0];
// optional float add_withmean0 = 22 [default = 0];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->add_withmean0(), target);
}

// optional float add_withmean1 = 23 [default = 0];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->add_withmean1(), target);
}

// optional float add_withmean2 = 24 [default = 0];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->add_withmean2(), target);
}

cached_has_bits = _has_bits_[1];
// optional float mult_withmean0 = 25 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->mult_withmean0(), target);
}

// optional float mult_withmean1 = 26 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->mult_withmean1(), target);
}

// optional float mult_withmean2 = 27 [default = 1];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->mult_withmean2(), target);
}

// optional float lmult_pow = 28 [default = 1];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->lmult_pow(), target);
}

cached_has_bits = _has_bits_[0];
// optional float lmult_add = 29 [default = 0];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->lmult_add(), target);
}

cached_has_bits = _has_bits_[1];
// optional float lmult_mult = 30 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->lmult_mult(), target);
}

cached_has_bits = _has_bits_[0];
// optional float col_angle = 31 [default = 0];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->col_angle(), target);
}

// optional float fog_amount = 38 [default = 0];
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->fog_amount(), target);
}

// optional float fog_size = 39 [default = 0];
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->fog_size(), target);
}

// optional float motion_blur_angle = 40 [default = 0];
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->motion_blur_angle(), target);
}

// optional float motion_blur_size = 41 [default = 0];
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->motion_blur_size(), target);
}

// optional float shadow_angle = 42 [default = 0];
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->shadow_angle(), target);
}

// optional float shadow_distance = 43 [default = 0];
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->shadow_distance(), target);
}

// optional float shadow_strength = 44 [default = 0];
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->shadow_strength(), target);
}

// optional float noise = 45 [default = 0];
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->noise(), target);
}

cached_has_bits = _has_bits_[1];
// optional float gamma = 100 [default = 1];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->gamma(), target);
}

cached_has_bits = _has_bits_[0];
// optional float brightness = 101 [default = 0];
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(101, this->brightness(), target);
}

cached_has_bits = _has_bits_[1];
// optional float contrast = 102 [default = 1];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(102, this->contrast(), target);
}

// optional float color1 = 103 [default = 1];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(103, this->color1(), target);
}

// optional float color2 = 104 [default = 1];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(104, this->color2(), target);
}

cached_has_bits = _has_bits_[0];
// optional float color3 = 105 [default = 1];
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(105, this->color3(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.AugmentationCoeff)
return target;
}

size_t AugmentationCoeff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AugmentationCoeff)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional float mirror = 1 [default = 0];
if (has_mirror()) {
total_size += 1 + 4;
}

// optional float dx = 2 [default = 0];
if (has_dx()) {
total_size += 1 + 4;
}

// optional float dy = 3 [default = 0];
if (has_dy()) {
total_size += 1 + 4;
}

// optional float angle = 4 [default = 0];
if (has_angle()) {
total_size += 1 + 4;
}

// optional float add_nomean0 = 13 [default = 0];
if (has_add_nomean0()) {
total_size += 1 + 4;
}

// optional float add_nomean1 = 14 [default = 0];
if (has_add_nomean1()) {
total_size += 1 + 4;
}

// optional float add_nomean2 = 15 [default = 0];
if (has_add_nomean2()) {
total_size += 1 + 4;
}

// optional float add_withmean0 = 22 [default = 0];
if (has_add_withmean0()) {
total_size += 2 + 4;
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional float add_withmean1 = 23 [default = 0];
if (has_add_withmean1()) {
total_size += 2 + 4;
}

// optional float add_withmean2 = 24 [default = 0];
if (has_add_withmean2()) {
total_size += 2 + 4;
}

// optional float lmult_add = 29 [default = 0];
if (has_lmult_add()) {
total_size += 2 + 4;
}

// optional float col_angle = 31 [default = 0];
if (has_col_angle()) {
total_size += 2 + 4;
}

// optional float fog_amount = 38 [default = 0];
if (has_fog_amount()) {
total_size += 2 + 4;
}

// optional float fog_size = 39 [default = 0];
if (has_fog_size()) {
total_size += 2 + 4;
}

// optional float motion_blur_angle = 40 [default = 0];
if (has_motion_blur_angle()) {
total_size += 2 + 4;
}

// optional float motion_blur_size = 41 [default = 0];
if (has_motion_blur_size()) {
total_size += 2 + 4;
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional float shadow_angle = 42 [default = 0];
if (has_shadow_angle()) {
total_size += 2 + 4;
}

// optional float shadow_distance = 43 [default = 0];
if (has_shadow_distance()) {
total_size += 2 + 4;
}

// optional float brightness = 101 [default = 0];
if (has_brightness()) {
total_size += 2 + 4;
}

// optional float shadow_strength = 44 [default = 0];
if (has_shadow_strength()) {
total_size += 2 + 4;
}

// optional float noise = 45 [default = 0];
if (has_noise()) {
total_size += 2 + 4;
}

// optional float color3 = 105 [default = 1];
if (has_color3()) {
total_size += 2 + 4;
}

// optional float zoom_x = 5 [default = 1];
if (has_zoom_x()) {
total_size += 1 + 4;
}

// optional float zoom_y = 6 [default = 1];
if (has_zoom_y()) {
total_size += 1 + 4;
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional float pow_nomean0 = 10 [default = 1];
if (has_pow_nomean0()) {
total_size += 1 + 4;
}

// optional float pow_nomean1 = 11 [default = 1];
if (has_pow_nomean1()) {
total_size += 1 + 4;
}

// optional float pow_nomean2 = 12 [default = 1];
if (has_pow_nomean2()) {
total_size += 1 + 4;
}

// optional float mult_nomean0 = 16 [default = 1];
if (has_mult_nomean0()) {
total_size += 2 + 4;
}

// optional float mult_nomean1 = 17 [default = 1];
if (has_mult_nomean1()) {
total_size += 2 + 4;
}

// optional float mult_nomean2 = 18 [default = 1];
if (has_mult_nomean2()) {
total_size += 2 + 4;
}

// optional float pow_withmean0 = 19 [default = 1];
if (has_pow_withmean0()) {
total_size += 2 + 4;
}

// optional float pow_withmean1 = 20 [default = 1];
if (has_pow_withmean1()) {
total_size += 2 + 4;
}

}
if (_has_bits_[32 / 32] & 255u) {
// optional float pow_withmean2 = 21 [default = 1];
if (has_pow_withmean2()) {
total_size += 2 + 4;
}

// optional float mult_withmean0 = 25 [default = 1];
if (has_mult_withmean0()) {
total_size += 2 + 4;
}

// optional float mult_withmean1 = 26 [default = 1];
if (has_mult_withmean1()) {
total_size += 2 + 4;
}

// optional float mult_withmean2 = 27 [default = 1];
if (has_mult_withmean2()) {
total_size += 2 + 4;
}

// optional float lmult_pow = 28 [default = 1];
if (has_lmult_pow()) {
total_size += 2 + 4;
}

// optional float lmult_mult = 30 [default = 1];
if (has_lmult_mult()) {
total_size += 2 + 4;
}

// optional float gamma = 100 [default = 1];
if (has_gamma()) {
total_size += 2 + 4;
}

// optional float contrast = 102 [default = 1];
if (has_contrast()) {
total_size += 2 + 4;
}

}
if (_has_bits_[40 / 32] & 768u) {
// optional float color1 = 103 [default = 1];
if (has_color1()) {
total_size += 2 + 4;
}

// optional float color2 = 104 [default = 1];
if (has_color2()) {
total_size += 2 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void AugmentationCoeff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AugmentationCoeff)
GOOGLE_DCHECK_NE(&from, this);
const AugmentationCoeff* source =
::google::protobuf::internal::DynamicCastToGenerated<const AugmentationCoeff>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AugmentationCoeff)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AugmentationCoeff)
MergeFrom(*source);
}
}

void AugmentationCoeff::MergeFrom(const AugmentationCoeff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AugmentationCoeff)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
mirror_ = from.mirror_;
}
if (cached_has_bits & 0x00000002u) {
dx_ = from.dx_;
}
if (cached_has_bits & 0x00000004u) {
dy_ = from.dy_;
}
if (cached_has_bits & 0x00000008u) {
angle_ = from.angle_;
}
if (cached_has_bits & 0x00000010u) {
add_nomean0_ = from.add_nomean0_;
}
if (cached_has_bits & 0x00000020u) {
add_nomean1_ = from.add_nomean1_;
}
if (cached_has_bits & 0x00000040u) {
add_nomean2_ = from.add_nomean2_;
}
if (cached_has_bits & 0x00000080u) {
add_withmean0_ = from.add_withmean0_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
add_withmean1_ = from.add_withmean1_;
}
if (cached_has_bits & 0x00000200u) {
add_withmean2_ = from.add_withmean2_;
}
if (cached_has_bits & 0x00000400u) {
lmult_add_ = from.lmult_add_;
}
if (cached_has_bits & 0x00000800u) {
col_angle_ = from.col_angle_;
}
if (cached_has_bits & 0x00001000u) {
fog_amount_ = from.fog_amount_;
}
if (cached_has_bits & 0x00002000u) {
fog_size_ = from.fog_size_;
}
if (cached_has_bits & 0x00004000u) {
motion_blur_angle_ = from.motion_blur_angle_;
}
if (cached_has_bits & 0x00008000u) {
motion_blur_size_ = from.motion_blur_size_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
shadow_angle_ = from.shadow_angle_;
}
if (cached_has_bits & 0x00020000u) {
shadow_distance_ = from.shadow_distance_;
}
if (cached_has_bits & 0x00040000u) {
brightness_ = from.brightness_;
}
if (cached_has_bits & 0x00080000u) {
shadow_strength_ = from.shadow_strength_;
}
if (cached_has_bits & 0x00100000u) {
noise_ = from.noise_;
}
if (cached_has_bits & 0x00200000u) {
color3_ = from.color3_;
}
if (cached_has_bits & 0x00400000u) {
zoom_x_ = from.zoom_x_;
}
if (cached_has_bits & 0x00800000u) {
zoom_y_ = from.zoom_y_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
pow_nomean0_ = from.pow_nomean0_;
}
if (cached_has_bits & 0x02000000u) {
pow_nomean1_ = from.pow_nomean1_;
}
if (cached_has_bits & 0x04000000u) {
pow_nomean2_ = from.pow_nomean2_;
}
if (cached_has_bits & 0x08000000u) {
mult_nomean0_ = from.mult_nomean0_;
}
if (cached_has_bits & 0x10000000u) {
mult_nomean1_ = from.mult_nomean1_;
}
if (cached_has_bits & 0x20000000u) {
mult_nomean2_ = from.mult_nomean2_;
}
if (cached_has_bits & 0x40000000u) {
pow_withmean0_ = from.pow_withmean0_;
}
if (cached_has_bits & 0x80000000u) {
pow_withmean1_ = from.pow_withmean1_;
}
_has_bits_[0] |= cached_has_bits;
}
cached_has_bits = from._has_bits_[1];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
pow_withmean2_ = from.pow_withmean2_;
}
if (cached_has_bits & 0x00000002u) {
mult_withmean0_ = from.mult_withmean0_;
}
if (cached_has_bits & 0x00000004u) {
mult_withmean1_ = from.mult_withmean1_;
}
if (cached_has_bits & 0x00000008u) {
mult_withmean2_ = from.mult_withmean2_;
}
if (cached_has_bits & 0x00000010u) {
lmult_pow_ = from.lmult_pow_;
}
if (cached_has_bits & 0x00000020u) {
lmult_mult_ = from.lmult_mult_;
}
if (cached_has_bits & 0x00000040u) {
gamma_ = from.gamma_;
}
if (cached_has_bits & 0x00000080u) {
contrast_ = from.contrast_;
}
_has_bits_[1] |= cached_has_bits;
}
if (cached_has_bits & 768u) {
if (cached_has_bits & 0x00000100u) {
color1_ = from.color1_;
}
if (cached_has_bits & 0x00000200u) {
color2_ = from.color2_;
}
_has_bits_[1] |= cached_has_bits;
}
}

void AugmentationCoeff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AugmentationCoeff)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void AugmentationCoeff::CopyFrom(const AugmentationCoeff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AugmentationCoeff)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool AugmentationCoeff::IsInitialized() const {
return true;
}

void AugmentationCoeff::Swap(AugmentationCoeff* other) {
if (other == this) return;
InternalSwap(other);
}
void AugmentationCoeff::InternalSwap(AugmentationCoeff* other) {
using std::swap;
swap(mirror_, other->mirror_);
swap(dx_, other->dx_);
swap(dy_, other->dy_);
swap(angle_, other->angle_);
swap(add_nomean0_, other->add_nomean0_);
swap(add_nomean1_, other->add_nomean1_);
swap(add_nomean2_, other->add_nomean2_);
swap(add_withmean0_, other->add_withmean0_);
swap(add_withmean1_, other->add_withmean1_);
swap(add_withmean2_, other->add_withmean2_);
swap(lmult_add_, other->lmult_add_);
swap(col_angle_, other->col_angle_);
swap(fog_amount_, other->fog_amount_);
swap(fog_size_, other->fog_size_);
swap(motion_blur_angle_, other->motion_blur_angle_);
swap(motion_blur_size_, other->motion_blur_size_);
swap(shadow_angle_, other->shadow_angle_);
swap(shadow_distance_, other->shadow_distance_);
swap(brightness_, other->brightness_);
swap(shadow_strength_, other->shadow_strength_);
swap(noise_, other->noise_);
swap(color3_, other->color3_);
swap(zoom_x_, other->zoom_x_);
swap(zoom_y_, other->zoom_y_);
swap(pow_nomean0_, other->pow_nomean0_);
swap(pow_nomean1_, other->pow_nomean1_);
swap(pow_nomean2_, other->pow_nomean2_);
swap(mult_nomean0_, other->mult_nomean0_);
swap(mult_nomean1_, other->mult_nomean1_);
swap(mult_nomean2_, other->mult_nomean2_);
swap(pow_withmean0_, other->pow_withmean0_);
swap(pow_withmean1_, other->pow_withmean1_);
swap(pow_withmean2_, other->pow_withmean2_);
swap(mult_withmean0_, other->mult_withmean0_);
swap(mult_withmean1_, other->mult_withmean1_);
swap(mult_withmean2_, other->mult_withmean2_);
swap(lmult_pow_, other->lmult_pow_);
swap(lmult_mult_, other->lmult_mult_);
swap(gamma_, other->gamma_);
swap(contrast_, other->contrast_);
swap(color1_, other->color1_);
swap(color2_, other->color2_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AugmentationCoeff::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AugmentationParameter::InitAsDefaultInstance() {
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->mirror_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->translate_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->rotate_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->zoom_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->squeeze_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->translate_x_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->translate_y_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->gamma_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->brightness_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->contrast_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->color_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->lmult_pow_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->lmult_mult_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->lmult_add_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->sat_pow_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->sat_mult_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->sat_add_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->col_pow_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->col_mult_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->col_add_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->ladd_pow_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->ladd_mult_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->ladd_add_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->col_rotate_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->fog_amount_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->fog_size_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->motion_blur_angle_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->motion_blur_size_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->shadow_angle_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->shadow_distance_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->shadow_strength_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
::caffe::_AugmentationParameter_default_instance_._instance.get_mutable()->noise_ = const_cast< ::caffe::RandomGeneratorParameter*>(
::caffe::RandomGeneratorParameter::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> AugmentationParameter::_default_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AugmentationParameter::kCropWidthFieldNumber;
const int AugmentationParameter::kCropHeightFieldNumber;
const int AugmentationParameter::kWriteAugmentedFieldNumber;
const int AugmentationParameter::kMaxMultiplierFieldNumber;
const int AugmentationParameter::kAugmentDuringTestFieldNumber;
const int AugmentationParameter::kRecomputeMeanFieldNumber;
const int AugmentationParameter::kWriteMeanFieldNumber;
const int AugmentationParameter::kMeanPerPixelFieldNumber;
const int AugmentationParameter::kMeanFieldNumber;
const int AugmentationParameter::kModeFieldNumber;
const int AugmentationParameter::kBottomwidthFieldNumber;
const int AugmentationParameter::kBottomheightFieldNumber;
const int AugmentationParameter::kNumFieldNumber;
const int AugmentationParameter::kChromaticEigvecFieldNumber;
const int AugmentationParameter::kMirrorFieldNumber;
const int AugmentationParameter::kTranslateFieldNumber;
const int AugmentationParameter::kRotateFieldNumber;
const int AugmentationParameter::kZoomFieldNumber;
const int AugmentationParameter::kSqueezeFieldNumber;
const int AugmentationParameter::kTranslateXFieldNumber;
const int AugmentationParameter::kTranslateYFieldNumber;
const int AugmentationParameter::kGammaFieldNumber;
const int AugmentationParameter::kBrightnessFieldNumber;
const int AugmentationParameter::kContrastFieldNumber;
const int AugmentationParameter::kColorFieldNumber;
const int AugmentationParameter::kLmultPowFieldNumber;
const int AugmentationParameter::kLmultMultFieldNumber;
const int AugmentationParameter::kLmultAddFieldNumber;
const int AugmentationParameter::kSatPowFieldNumber;
const int AugmentationParameter::kSatMultFieldNumber;
const int AugmentationParameter::kSatAddFieldNumber;
const int AugmentationParameter::kColPowFieldNumber;
const int AugmentationParameter::kColMultFieldNumber;
const int AugmentationParameter::kColAddFieldNumber;
const int AugmentationParameter::kLaddPowFieldNumber;
const int AugmentationParameter::kLaddMultFieldNumber;
const int AugmentationParameter::kLaddAddFieldNumber;
const int AugmentationParameter::kColRotateFieldNumber;
const int AugmentationParameter::kFogAmountFieldNumber;
const int AugmentationParameter::kFogSizeFieldNumber;
const int AugmentationParameter::kMotionBlurAngleFieldNumber;
const int AugmentationParameter::kMotionBlurSizeFieldNumber;
const int AugmentationParameter::kShadowAngleFieldNumber;
const int AugmentationParameter::kShadowDistanceFieldNumber;
const int AugmentationParameter::kShadowStrengthFieldNumber;
const int AugmentationParameter::kNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AugmentationParameter::AugmentationParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsAugmentationParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.AugmentationParameter)
}
AugmentationParameter::AugmentationParameter(const AugmentationParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
mean_(from.mean_),
chromatic_eigvec_(from.chromatic_eigvec_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
write_augmented_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_write_augmented()) {
write_augmented_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_augmented_);
}
write_mean_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_write_mean()) {
write_mean_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_mean_);
}
mode_.UnsafeSetDefault(&::caffe::AugmentationParameter::_default_mode_.get());
if (from.has_mode()) {
mode_.AssignWithDefault(&::caffe::AugmentationParameter::_default_mode_.get(), from.mode_);
}
if (from.has_mirror()) {
mirror_ = new ::caffe::RandomGeneratorParameter(*from.mirror_);
} else {
mirror_ = NULL;
}
if (from.has_translate()) {
translate_ = new ::caffe::RandomGeneratorParameter(*from.translate_);
} else {
translate_ = NULL;
}
if (from.has_rotate()) {
rotate_ = new ::caffe::RandomGeneratorParameter(*from.rotate_);
} else {
rotate_ = NULL;
}
if (from.has_zoom()) {
zoom_ = new ::caffe::RandomGeneratorParameter(*from.zoom_);
} else {
zoom_ = NULL;
}
if (from.has_squeeze()) {
squeeze_ = new ::caffe::RandomGeneratorParameter(*from.squeeze_);
} else {
squeeze_ = NULL;
}
if (from.has_translate_x()) {
translate_x_ = new ::caffe::RandomGeneratorParameter(*from.translate_x_);
} else {
translate_x_ = NULL;
}
if (from.has_translate_y()) {
translate_y_ = new ::caffe::RandomGeneratorParameter(*from.translate_y_);
} else {
translate_y_ = NULL;
}
if (from.has_lmult_pow()) {
lmult_pow_ = new ::caffe::RandomGeneratorParameter(*from.lmult_pow_);
} else {
lmult_pow_ = NULL;
}
if (from.has_lmult_mult()) {
lmult_mult_ = new ::caffe::RandomGeneratorParameter(*from.lmult_mult_);
} else {
lmult_mult_ = NULL;
}
if (from.has_lmult_add()) {
lmult_add_ = new ::caffe::RandomGeneratorParameter(*from.lmult_add_);
} else {
lmult_add_ = NULL;
}
if (from.has_sat_pow()) {
sat_pow_ = new ::caffe::RandomGeneratorParameter(*from.sat_pow_);
} else {
sat_pow_ = NULL;
}
if (from.has_sat_mult()) {
sat_mult_ = new ::caffe::RandomGeneratorParameter(*from.sat_mult_);
} else {
sat_mult_ = NULL;
}
if (from.has_sat_add()) {
sat_add_ = new ::caffe::RandomGeneratorParameter(*from.sat_add_);
} else {
sat_add_ = NULL;
}
if (from.has_col_pow()) {
col_pow_ = new ::caffe::RandomGeneratorParameter(*from.col_pow_);
} else {
col_pow_ = NULL;
}
if (from.has_col_mult()) {
col_mult_ = new ::caffe::RandomGeneratorParameter(*from.col_mult_);
} else {
col_mult_ = NULL;
}
if (from.has_col_add()) {
col_add_ = new ::caffe::RandomGeneratorParameter(*from.col_add_);
} else {
col_add_ = NULL;
}
if (from.has_ladd_pow()) {
ladd_pow_ = new ::caffe::RandomGeneratorParameter(*from.ladd_pow_);
} else {
ladd_pow_ = NULL;
}
if (from.has_ladd_mult()) {
ladd_mult_ = new ::caffe::RandomGeneratorParameter(*from.ladd_mult_);
} else {
ladd_mult_ = NULL;
}
if (from.has_ladd_add()) {
ladd_add_ = new ::caffe::RandomGeneratorParameter(*from.ladd_add_);
} else {
ladd_add_ = NULL;
}
if (from.has_col_rotate()) {
col_rotate_ = new ::caffe::RandomGeneratorParameter(*from.col_rotate_);
} else {
col_rotate_ = NULL;
}
if (from.has_gamma()) {
gamma_ = new ::caffe::RandomGeneratorParameter(*from.gamma_);
} else {
gamma_ = NULL;
}
if (from.has_brightness()) {
brightness_ = new ::caffe::RandomGeneratorParameter(*from.brightness_);
} else {
brightness_ = NULL;
}
if (from.has_contrast()) {
contrast_ = new ::caffe::RandomGeneratorParameter(*from.contrast_);
} else {
contrast_ = NULL;
}
if (from.has_color()) {
color_ = new ::caffe::RandomGeneratorParameter(*from.color_);
} else {
color_ = NULL;
}
if (from.has_fog_amount()) {
fog_amount_ = new ::caffe::RandomGeneratorParameter(*from.fog_amount_);
} else {
fog_amount_ = NULL;
}
if (from.has_fog_size()) {
fog_size_ = new ::caffe::RandomGeneratorParameter(*from.fog_size_);
} else {
fog_size_ = NULL;
}
if (from.has_motion_blur_angle()) {
motion_blur_angle_ = new ::caffe::RandomGeneratorParameter(*from.motion_blur_angle_);
} else {
motion_blur_angle_ = NULL;
}
if (from.has_motion_blur_size()) {
motion_blur_size_ = new ::caffe::RandomGeneratorParameter(*from.motion_blur_size_);
} else {
motion_blur_size_ = NULL;
}
if (from.has_shadow_angle()) {
shadow_angle_ = new ::caffe::RandomGeneratorParameter(*from.shadow_angle_);
} else {
shadow_angle_ = NULL;
}
if (from.has_shadow_distance()) {
shadow_distance_ = new ::caffe::RandomGeneratorParameter(*from.shadow_distance_);
} else {
shadow_distance_ = NULL;
}
if (from.has_shadow_strength()) {
shadow_strength_ = new ::caffe::RandomGeneratorParameter(*from.shadow_strength_);
} else {
shadow_strength_ = NULL;
}
if (from.has_noise()) {
noise_ = new ::caffe::RandomGeneratorParameter(*from.noise_);
} else {
noise_ = NULL;
}
::memcpy(&augment_during_test_, &from.augment_during_test_,
static_cast<size_t>(reinterpret_cast<char*>(&mean_per_pixel_) -
reinterpret_cast<char*>(&augment_during_test_)) + sizeof(mean_per_pixel_));
// @@protoc_insertion_point(copy_constructor:caffe.AugmentationParameter)
}

void AugmentationParameter::SharedCtor() {
write_augmented_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
write_mean_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mode_.UnsafeSetDefault(&::caffe::AugmentationParameter::_default_mode_.get());
::memset(&mirror_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&bottomheight_) -
reinterpret_cast<char*>(&mirror_)) + sizeof(bottomheight_));
max_multiplier_ = 255;
mean_per_pixel_ = true;
_cached_size_ = 0;
}

AugmentationParameter::~AugmentationParameter() {
// @@protoc_insertion_point(destructor:caffe.AugmentationParameter)
SharedDtor();
}

void AugmentationParameter::SharedDtor() {
write_augmented_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
write_mean_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mode_.DestroyNoArena(&::caffe::AugmentationParameter::_default_mode_.get());
if (this != internal_default_instance()) delete mirror_;
if (this != internal_default_instance()) delete translate_;
if (this != internal_default_instance()) delete rotate_;
if (this != internal_default_instance()) delete zoom_;
if (this != internal_default_instance()) delete squeeze_;
if (this != internal_default_instance()) delete translate_x_;
if (this != internal_default_instance()) delete translate_y_;
if (this != internal_default_instance()) delete lmult_pow_;
if (this != internal_default_instance()) delete lmult_mult_;
if (this != internal_default_instance()) delete lmult_add_;
if (this != internal_default_instance()) delete sat_pow_;
if (this != internal_default_instance()) delete sat_mult_;
if (this != internal_default_instance()) delete sat_add_;
if (this != internal_default_instance()) delete col_pow_;
if (this != internal_default_instance()) delete col_mult_;
if (this != internal_default_instance()) delete col_add_;
if (this != internal_default_instance()) delete ladd_pow_;
if (this != internal_default_instance()) delete ladd_mult_;
if (this != internal_default_instance()) delete ladd_add_;
if (this != internal_default_instance()) delete col_rotate_;
if (this != internal_default_instance()) delete gamma_;
if (this != internal_default_instance()) delete brightness_;
if (this != internal_default_instance()) delete contrast_;
if (this != internal_default_instance()) delete color_;
if (this != internal_default_instance()) delete fog_amount_;
if (this != internal_default_instance()) delete fog_size_;
if (this != internal_default_instance()) delete motion_blur_angle_;
if (this != internal_default_instance()) delete motion_blur_size_;
if (this != internal_default_instance()) delete shadow_angle_;
if (this != internal_default_instance()) delete shadow_distance_;
if (this != internal_default_instance()) delete shadow_strength_;
if (this != internal_default_instance()) delete noise_;
}

void AugmentationParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AugmentationParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AugmentationParameter& AugmentationParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsAugmentationParameter();
return *internal_default_instance();
}

AugmentationParameter* AugmentationParameter::New(::google::protobuf::Arena* arena) const {
AugmentationParameter* n = new AugmentationParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void AugmentationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AugmentationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

mean_.Clear();
chromatic_eigvec_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!write_augmented_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*write_augmented_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!write_mean_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*write_mean_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!mode_.IsDefault(&::caffe::AugmentationParameter::_default_mode_.get()));
(*mode_.UnsafeRawStringPointer())->assign(*&::caffe::AugmentationParameter::_default_mode_.get());
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(mirror_ != NULL);
mirror_->Clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(translate_ != NULL);
translate_->Clear();
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(rotate_ != NULL);
rotate_->Clear();
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(zoom_ != NULL);
zoom_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(squeeze_ != NULL);
squeeze_->Clear();
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
GOOGLE_DCHECK(translate_x_ != NULL);
translate_x_->Clear();
}
if (cached_has_bits & 0x00000200u) {
GOOGLE_DCHECK(translate_y_ != NULL);
translate_y_->Clear();
}
if (cached_has_bits & 0x00000400u) {
GOOGLE_DCHECK(lmult_pow_ != NULL);
lmult_pow_->Clear();
}
if (cached_has_bits & 0x00000800u) {
GOOGLE_DCHECK(lmult_mult_ != NULL);
lmult_mult_->Clear();
}
if (cached_has_bits & 0x00001000u) {
GOOGLE_DCHECK(lmult_add_ != NULL);
lmult_add_->Clear();
}
if (cached_has_bits & 0x00002000u) {
GOOGLE_DCHECK(sat_pow_ != NULL);
sat_pow_->Clear();
}
if (cached_has_bits & 0x00004000u) {
GOOGLE_DCHECK(sat_mult_ != NULL);
sat_mult_->Clear();
}
if (cached_has_bits & 0x00008000u) {
GOOGLE_DCHECK(sat_add_ != NULL);
sat_add_->Clear();
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
GOOGLE_DCHECK(col_pow_ != NULL);
col_pow_->Clear();
}
if (cached_has_bits & 0x00020000u) {
GOOGLE_DCHECK(col_mult_ != NULL);
col_mult_->Clear();
}
if (cached_has_bits & 0x00040000u) {
GOOGLE_DCHECK(col_add_ != NULL);
col_add_->Clear();
}
if (cached_has_bits & 0x00080000u) {
GOOGLE_DCHECK(ladd_pow_ != NULL);
ladd_pow_->Clear();
}
if (cached_has_bits & 0x00100000u) {
GOOGLE_DCHECK(ladd_mult_ != NULL);
ladd_mult_->Clear();
}
if (cached_has_bits & 0x00200000u) {
GOOGLE_DCHECK(ladd_add_ != NULL);
ladd_add_->Clear();
}
if (cached_has_bits & 0x00400000u) {
GOOGLE_DCHECK(col_rotate_ != NULL);
col_rotate_->Clear();
}
if (cached_has_bits & 0x00800000u) {
GOOGLE_DCHECK(gamma_ != NULL);
gamma_->Clear();
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
GOOGLE_DCHECK(brightness_ != NULL);
brightness_->Clear();
}
if (cached_has_bits & 0x02000000u) {
GOOGLE_DCHECK(contrast_ != NULL);
contrast_->Clear();
}
if (cached_has_bits & 0x04000000u) {
GOOGLE_DCHECK(color_ != NULL);
color_->Clear();
}
if (cached_has_bits & 0x08000000u) {
GOOGLE_DCHECK(fog_amount_ != NULL);
fog_amount_->Clear();
}
if (cached_has_bits & 0x10000000u) {
GOOGLE_DCHECK(fog_size_ != NULL);
fog_size_->Clear();
}
if (cached_has_bits & 0x20000000u) {
GOOGLE_DCHECK(motion_blur_angle_ != NULL);
motion_blur_angle_->Clear();
}
if (cached_has_bits & 0x40000000u) {
GOOGLE_DCHECK(motion_blur_size_ != NULL);
motion_blur_size_->Clear();
}
if (cached_has_bits & 0x80000000u) {
GOOGLE_DCHECK(shadow_angle_ != NULL);
shadow_angle_->Clear();
}
}
cached_has_bits = _has_bits_[1];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(shadow_distance_ != NULL);
shadow_distance_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(shadow_strength_ != NULL);
shadow_strength_->Clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(noise_ != NULL);
noise_->Clear();
}
}
if (cached_has_bits & 248u) {
::memset(&augment_during_test_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&num_) -
reinterpret_cast<char*>(&augment_during_test_)) + sizeof(num_));
}
if (cached_has_bits & 3840u) {
::memset(&bottomwidth_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&bottomheight_) -
reinterpret_cast<char*>(&bottomwidth_)) + sizeof(bottomheight_));
max_multiplier_ = 255;
mean_per_pixel_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool AugmentationParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.AugmentationParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string write_augmented = 2 [default = ""];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_write_augmented()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_augmented().data(), static_cast<int>(this->write_augmented().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.AugmentationParameter.write_augmented");
} else {
goto handle_unusual;
}
break;
}

// optional float max_multiplier = 3 [default = 255];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_max_multiplier();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &max_multiplier_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool augment_during_test = 4 [default = false];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_augment_during_test();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &augment_during_test_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 recompute_mean = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_recompute_mean();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &recompute_mean_)));
} else {
goto handle_unusual;
}
break;
}

// optional string write_mean = 6 [default = ""];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_write_mean()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_mean().data(), static_cast<int>(this->write_mean().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.AugmentationParameter.write_mean");
} else {
goto handle_unusual;
}
break;
}

// optional bool mean_per_pixel = 7 [default = true];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_mean_per_pixel();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mean_per_pixel_)));
} else {
goto handle_unusual;
}
break;
}

// optional string mode = 8 [default = "add"];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_mode()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mode().data(), static_cast<int>(this->mode().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.AugmentationParameter.mode");
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter mirror = 10;
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_mirror()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter translate = 11;
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_translate()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter rotate = 12;
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_rotate()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter zoom = 13;
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_zoom()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter squeeze = 14;
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_squeeze()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter translate_x = 15;
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_translate_x()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter translate_y = 16;
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_translate_y()));
} else {
goto handle_unusual;
}
break;
}

// repeated float mean = 18;
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
2, 149u, input, this->mutable_mean())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_mean())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter lmult_pow = 20;
case 20: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_lmult_pow()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter lmult_mult = 21;
case 21: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_lmult_mult()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter lmult_add = 22;
case 22: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_lmult_add()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter sat_pow = 23;
case 23: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_sat_pow()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter sat_mult = 24;
case 24: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_sat_mult()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter sat_add = 25;
case 25: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_sat_add()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter col_pow = 26;
case 26: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_col_pow()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter col_mult = 27;
case 27: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_col_mult()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter col_add = 28;
case 28: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_col_add()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter ladd_pow = 29;
case 29: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_ladd_pow()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter ladd_mult = 30;
case 30: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_ladd_mult()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter ladd_add = 31;
case 31: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_ladd_add()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter col_rotate = 32;
case 32: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_col_rotate()));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_width = 33 [default = 0];
case 33: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
set_has_crop_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_width_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_height = 34 [default = 0];
case 34: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
set_has_crop_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_height_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter gamma = 35;
case 35: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_gamma()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter brightness = 36;
case 36: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_brightness()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter contrast = 37;
case 37: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_contrast()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter color = 38;
case 38: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_color()));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 bottomwidth = 80 [default = 0];
case 80: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
set_has_bottomwidth();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &bottomwidth_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 bottomheight = 81 [default = 0];
case 81: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
set_has_bottomheight();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &bottomheight_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 num = 82 [default = 0];
case 82: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
set_has_num();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_)));
} else {
goto handle_unusual;
}
break;
}

// repeated float chromatic_eigvec = 83;
case 83: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(157u /* 669 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
2, 669u, input, this->mutable_chromatic_eigvec())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(154u /* 666 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_chromatic_eigvec())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter fog_amount = 100;
case 100: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_fog_amount()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter fog_size = 101;
case 101: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_fog_size()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter motion_blur_angle = 102;
case 102: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_motion_blur_angle()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter motion_blur_size = 103;
case 103: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_motion_blur_size()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter shadow_angle = 104;
case 104: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shadow_angle()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter shadow_distance = 105;
case 105: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shadow_distance()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter shadow_strength = 106;
case 106: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shadow_strength()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.RandomGeneratorParameter noise = 107;
case 107: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 858 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_noise()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.AugmentationParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.AugmentationParameter)
return false;
#undef DO_
}

void AugmentationParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.AugmentationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string write_augmented = 2 [default = ""];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_augmented().data(), static_cast<int>(this->write_augmented().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.write_augmented");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->write_augmented(), output);
}

cached_has_bits = _has_bits_[1];
// optional float max_multiplier = 3 [default = 255];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_multiplier(), output);
}

// optional bool augment_during_test = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->augment_during_test(), output);
}

// optional uint32 recompute_mean = 5 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recompute_mean(), output);
}

cached_has_bits = _has_bits_[0];
// optional string write_mean = 6 [default = ""];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_mean().data(), static_cast<int>(this->write_mean().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.write_mean");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
6, this->write_mean(), output);
}

cached_has_bits = _has_bits_[1];
// optional bool mean_per_pixel = 7 [default = true];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mean_per_pixel(), output);
}

cached_has_bits = _has_bits_[0];
// optional string mode = 8 [default = "add"];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mode().data(), static_cast<int>(this->mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.mode");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
8, this->mode(), output);
}

// optional .caffe.RandomGeneratorParameter mirror = 10;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
10, *this->mirror_, output);
}

// optional .caffe.RandomGeneratorParameter translate = 11;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
11, *this->translate_, output);
}

// optional .caffe.RandomGeneratorParameter rotate = 12;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
12, *this->rotate_, output);
}

// optional .caffe.RandomGeneratorParameter zoom = 13;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
13, *this->zoom_, output);
}

// optional .caffe.RandomGeneratorParameter squeeze = 14;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
14, *this->squeeze_, output);
}

// optional .caffe.RandomGeneratorParameter translate_x = 15;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
15, *this->translate_x_, output);
}

// optional .caffe.RandomGeneratorParameter translate_y = 16;
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
16, *this->translate_y_, output);
}

// repeated float mean = 18;
for (int i = 0, n = this->mean_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
18, this->mean(i), output);
}

// optional .caffe.RandomGeneratorParameter lmult_pow = 20;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
20, *this->lmult_pow_, output);
}

// optional .caffe.RandomGeneratorParameter lmult_mult = 21;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
21, *this->lmult_mult_, output);
}

// optional .caffe.RandomGeneratorParameter lmult_add = 22;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
22, *this->lmult_add_, output);
}

// optional .caffe.RandomGeneratorParameter sat_pow = 23;
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
23, *this->sat_pow_, output);
}

// optional .caffe.RandomGeneratorParameter sat_mult = 24;
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
24, *this->sat_mult_, output);
}

// optional .caffe.RandomGeneratorParameter sat_add = 25;
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
25, *this->sat_add_, output);
}

// optional .caffe.RandomGeneratorParameter col_pow = 26;
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
26, *this->col_pow_, output);
}

// optional .caffe.RandomGeneratorParameter col_mult = 27;
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
27, *this->col_mult_, output);
}

// optional .caffe.RandomGeneratorParameter col_add = 28;
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
28, *this->col_add_, output);
}

// optional .caffe.RandomGeneratorParameter ladd_pow = 29;
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
29, *this->ladd_pow_, output);
}

// optional .caffe.RandomGeneratorParameter ladd_mult = 30;
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
30, *this->ladd_mult_, output);
}

// optional .caffe.RandomGeneratorParameter ladd_add = 31;
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
31, *this->ladd_add_, output);
}

// optional .caffe.RandomGeneratorParameter col_rotate = 32;
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
32, *this->col_rotate_, output);
}

cached_has_bits = _has_bits_[1];
// optional uint32 crop_width = 33 [default = 0];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->crop_width(), output);
}

// optional uint32 crop_height = 34 [default = 0];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->crop_height(), output);
}

cached_has_bits = _has_bits_[0];
// optional .caffe.RandomGeneratorParameter gamma = 35;
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
35, *this->gamma_, output);
}

// optional .caffe.RandomGeneratorParameter brightness = 36;
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
36, *this->brightness_, output);
}

// optional .caffe.RandomGeneratorParameter contrast = 37;
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
37, *this->contrast_, output);
}

// optional .caffe.RandomGeneratorParameter color = 38;
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
38, *this->color_, output);
}

cached_has_bits = _has_bits_[1];
// optional uint32 bottomwidth = 80 [default = 0];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->bottomwidth(), output);
}

// optional uint32 bottomheight = 81 [default = 0];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->bottomheight(), output);
}

// optional uint32 num = 82 [default = 0];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->num(), output);
}

// repeated float chromatic_eigvec = 83;
for (int i = 0, n = this->chromatic_eigvec_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
83, this->chromatic_eigvec(i), output);
}

cached_has_bits = _has_bits_[0];
// optional .caffe.RandomGeneratorParameter fog_amount = 100;
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
100, *this->fog_amount_, output);
}

// optional .caffe.RandomGeneratorParameter fog_size = 101;
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
101, *this->fog_size_, output);
}

// optional .caffe.RandomGeneratorParameter motion_blur_angle = 102;
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
102, *this->motion_blur_angle_, output);
}

// optional .caffe.RandomGeneratorParameter motion_blur_size = 103;
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
103, *this->motion_blur_size_, output);
}

// optional .caffe.RandomGeneratorParameter shadow_angle = 104;
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
104, *this->shadow_angle_, output);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.RandomGeneratorParameter shadow_distance = 105;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
105, *this->shadow_distance_, output);
}

// optional .caffe.RandomGeneratorParameter shadow_strength = 106;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
106, *this->shadow_strength_, output);
}

// optional .caffe.RandomGeneratorParameter noise = 107;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
107, *this->noise_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.AugmentationParameter)
}

::google::protobuf::uint8* AugmentationParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.AugmentationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string write_augmented = 2 [default = ""];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_augmented().data(), static_cast<int>(this->write_augmented().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.write_augmented");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->write_augmented(), target);
}

cached_has_bits = _has_bits_[1];
// optional float max_multiplier = 3 [default = 255];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_multiplier(), target);
}

// optional bool augment_during_test = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->augment_during_test(), target);
}

// optional uint32 recompute_mean = 5 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recompute_mean(), target);
}

cached_has_bits = _has_bits_[0];
// optional string write_mean = 6 [default = ""];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->write_mean().data(), static_cast<int>(this->write_mean().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.write_mean");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
6, this->write_mean(), target);
}

cached_has_bits = _has_bits_[1];
// optional bool mean_per_pixel = 7 [default = true];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->mean_per_pixel(), target);
}

cached_has_bits = _has_bits_[0];
// optional string mode = 8 [default = "add"];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mode().data(), static_cast<int>(this->mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.AugmentationParameter.mode");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
8, this->mode(), target);
}

// optional .caffe.RandomGeneratorParameter mirror = 10;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
10, *this->mirror_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter translate = 11;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
11, *this->translate_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter rotate = 12;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
12, *this->rotate_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter zoom = 13;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
13, *this->zoom_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter squeeze = 14;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
14, *this->squeeze_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter translate_x = 15;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
15, *this->translate_x_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter translate_y = 16;
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
16, *this->translate_y_, deterministic, target);
}

// repeated float mean = 18;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(18, this->mean_, target);

// optional .caffe.RandomGeneratorParameter lmult_pow = 20;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
20, *this->lmult_pow_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter lmult_mult = 21;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
21, *this->lmult_mult_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter lmult_add = 22;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
22, *this->lmult_add_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter sat_pow = 23;
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
23, *this->sat_pow_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter sat_mult = 24;
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
24, *this->sat_mult_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter sat_add = 25;
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
25, *this->sat_add_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter col_pow = 26;
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
26, *this->col_pow_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter col_mult = 27;
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
27, *this->col_mult_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter col_add = 28;
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
28, *this->col_add_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter ladd_pow = 29;
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
29, *this->ladd_pow_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter ladd_mult = 30;
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
30, *this->ladd_mult_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter ladd_add = 31;
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
31, *this->ladd_add_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter col_rotate = 32;
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
32, *this->col_rotate_, deterministic, target);
}

cached_has_bits = _has_bits_[1];
// optional uint32 crop_width = 33 [default = 0];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->crop_width(), target);
}

// optional uint32 crop_height = 34 [default = 0];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->crop_height(), target);
}

cached_has_bits = _has_bits_[0];
// optional .caffe.RandomGeneratorParameter gamma = 35;
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
35, *this->gamma_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter brightness = 36;
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
36, *this->brightness_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter contrast = 37;
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
37, *this->contrast_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter color = 38;
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
38, *this->color_, deterministic, target);
}

cached_has_bits = _has_bits_[1];
// optional uint32 bottomwidth = 80 [default = 0];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->bottomwidth(), target);
}

// optional uint32 bottomheight = 81 [default = 0];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->bottomheight(), target);
}

// optional uint32 num = 82 [default = 0];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->num(), target);
}

// repeated float chromatic_eigvec = 83;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(83, this->chromatic_eigvec_, target);

cached_has_bits = _has_bits_[0];
// optional .caffe.RandomGeneratorParameter fog_amount = 100;
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
100, *this->fog_amount_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter fog_size = 101;
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
101, *this->fog_size_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter motion_blur_angle = 102;
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
102, *this->motion_blur_angle_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter motion_blur_size = 103;
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
103, *this->motion_blur_size_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter shadow_angle = 104;
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
104, *this->shadow_angle_, deterministic, target);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.RandomGeneratorParameter shadow_distance = 105;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
105, *this->shadow_distance_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter shadow_strength = 106;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
106, *this->shadow_strength_, deterministic, target);
}

// optional .caffe.RandomGeneratorParameter noise = 107;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
107, *this->noise_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.AugmentationParameter)
return target;
}

size_t AugmentationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AugmentationParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float mean = 18;
{
unsigned int count = static_cast<unsigned int>(this->mean_size());
size_t data_size = 4UL * count;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->mean_size());
total_size += data_size;
}

// repeated float chromatic_eigvec = 83;
{
unsigned int count = static_cast<unsigned int>(this->chromatic_eigvec_size());
size_t data_size = 4UL * count;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->chromatic_eigvec_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string write_augmented = 2 [default = ""];
if (has_write_augmented()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->write_augmented());
}

// optional string write_mean = 6 [default = ""];
if (has_write_mean()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->write_mean());
}

// optional string mode = 8 [default = "add"];
if (has_mode()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->mode());
}

// optional .caffe.RandomGeneratorParameter mirror = 10;
if (has_mirror()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->mirror_);
}

// optional .caffe.RandomGeneratorParameter translate = 11;
if (has_translate()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->translate_);
}

// optional .caffe.RandomGeneratorParameter rotate = 12;
if (has_rotate()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->rotate_);
}

// optional .caffe.RandomGeneratorParameter zoom = 13;
if (has_zoom()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->zoom_);
}

// optional .caffe.RandomGeneratorParameter squeeze = 14;
if (has_squeeze()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->squeeze_);
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional .caffe.RandomGeneratorParameter translate_x = 15;
if (has_translate_x()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->translate_x_);
}

// optional .caffe.RandomGeneratorParameter translate_y = 16;
if (has_translate_y()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->translate_y_);
}

// optional .caffe.RandomGeneratorParameter lmult_pow = 20;
if (has_lmult_pow()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->lmult_pow_);
}

// optional .caffe.RandomGeneratorParameter lmult_mult = 21;
if (has_lmult_mult()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->lmult_mult_);
}

// optional .caffe.RandomGeneratorParameter lmult_add = 22;
if (has_lmult_add()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->lmult_add_);
}

// optional .caffe.RandomGeneratorParameter sat_pow = 23;
if (has_sat_pow()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->sat_pow_);
}

// optional .caffe.RandomGeneratorParameter sat_mult = 24;
if (has_sat_mult()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->sat_mult_);
}

// optional .caffe.RandomGeneratorParameter sat_add = 25;
if (has_sat_add()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->sat_add_);
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional .caffe.RandomGeneratorParameter col_pow = 26;
if (has_col_pow()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->col_pow_);
}

// optional .caffe.RandomGeneratorParameter col_mult = 27;
if (has_col_mult()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->col_mult_);
}

// optional .caffe.RandomGeneratorParameter col_add = 28;
if (has_col_add()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->col_add_);
}

// optional .caffe.RandomGeneratorParameter ladd_pow = 29;
if (has_ladd_pow()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->ladd_pow_);
}

// optional .caffe.RandomGeneratorParameter ladd_mult = 30;
if (has_ladd_mult()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->ladd_mult_);
}

// optional .caffe.RandomGeneratorParameter ladd_add = 31;
if (has_ladd_add()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->ladd_add_);
}

// optional .caffe.RandomGeneratorParameter col_rotate = 32;
if (has_col_rotate()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->col_rotate_);
}

// optional .caffe.RandomGeneratorParameter gamma = 35;
if (has_gamma()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->gamma_);
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional .caffe.RandomGeneratorParameter brightness = 36;
if (has_brightness()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->brightness_);
}

// optional .caffe.RandomGeneratorParameter contrast = 37;
if (has_contrast()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->contrast_);
}

// optional .caffe.RandomGeneratorParameter color = 38;
if (has_color()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->color_);
}

// optional .caffe.RandomGeneratorParameter fog_amount = 100;
if (has_fog_amount()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->fog_amount_);
}

// optional .caffe.RandomGeneratorParameter fog_size = 101;
if (has_fog_size()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->fog_size_);
}

// optional .caffe.RandomGeneratorParameter motion_blur_angle = 102;
if (has_motion_blur_angle()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->motion_blur_angle_);
}

// optional .caffe.RandomGeneratorParameter motion_blur_size = 103;
if (has_motion_blur_size()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->motion_blur_size_);
}

// optional .caffe.RandomGeneratorParameter shadow_angle = 104;
if (has_shadow_angle()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shadow_angle_);
}

}
if (_has_bits_[32 / 32] & 255u) {
// optional .caffe.RandomGeneratorParameter shadow_distance = 105;
if (has_shadow_distance()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shadow_distance_);
}

// optional .caffe.RandomGeneratorParameter shadow_strength = 106;
if (has_shadow_strength()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shadow_strength_);
}

// optional .caffe.RandomGeneratorParameter noise = 107;
if (has_noise()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->noise_);
}

// optional bool augment_during_test = 4 [default = false];
if (has_augment_during_test()) {
total_size += 1 + 1;
}

// optional uint32 recompute_mean = 5 [default = 0];
if (has_recompute_mean()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->recompute_mean());
}

// optional uint32 crop_width = 33 [default = 0];
if (has_crop_width()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_width());
}

// optional uint32 crop_height = 34 [default = 0];
if (has_crop_height()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_height());
}

// optional uint32 num = 82 [default = 0];
if (has_num()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num());
}

}
if (_has_bits_[40 / 32] & 3840u) {
// optional uint32 bottomwidth = 80 [default = 0];
if (has_bottomwidth()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->bottomwidth());
}

// optional uint32 bottomheight = 81 [default = 0];
if (has_bottomheight()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->bottomheight());
}

// optional float max_multiplier = 3 [default = 255];
if (has_max_multiplier()) {
total_size += 1 + 4;
}

// optional bool mean_per_pixel = 7 [default = true];
if (has_mean_per_pixel()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void AugmentationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AugmentationParameter)
GOOGLE_DCHECK_NE(&from, this);
const AugmentationParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const AugmentationParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AugmentationParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AugmentationParameter)
MergeFrom(*source);
}
}

void AugmentationParameter::MergeFrom(const AugmentationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AugmentationParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

mean_.MergeFrom(from.mean_);
chromatic_eigvec_.MergeFrom(from.chromatic_eigvec_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_write_augmented();
write_augmented_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_augmented_);
}
if (cached_has_bits & 0x00000002u) {
set_has_write_mean();
write_mean_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_mean_);
}
if (cached_has_bits & 0x00000004u) {
set_has_mode();
mode_.AssignWithDefault(&::caffe::AugmentationParameter::_default_mode_.get(), from.mode_);
}
if (cached_has_bits & 0x00000008u) {
mutable_mirror()->::caffe::RandomGeneratorParameter::MergeFrom(from.mirror());
}
if (cached_has_bits & 0x00000010u) {
mutable_translate()->::caffe::RandomGeneratorParameter::MergeFrom(from.translate());
}
if (cached_has_bits & 0x00000020u) {
mutable_rotate()->::caffe::RandomGeneratorParameter::MergeFrom(from.rotate());
}
if (cached_has_bits & 0x00000040u) {
mutable_zoom()->::caffe::RandomGeneratorParameter::MergeFrom(from.zoom());
}
if (cached_has_bits & 0x00000080u) {
mutable_squeeze()->::caffe::RandomGeneratorParameter::MergeFrom(from.squeeze());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
mutable_translate_x()->::caffe::RandomGeneratorParameter::MergeFrom(from.translate_x());
}
if (cached_has_bits & 0x00000200u) {
mutable_translate_y()->::caffe::RandomGeneratorParameter::MergeFrom(from.translate_y());
}
if (cached_has_bits & 0x00000400u) {
mutable_lmult_pow()->::caffe::RandomGeneratorParameter::MergeFrom(from.lmult_pow());
}
if (cached_has_bits & 0x00000800u) {
mutable_lmult_mult()->::caffe::RandomGeneratorParameter::MergeFrom(from.lmult_mult());
}
if (cached_has_bits & 0x00001000u) {
mutable_lmult_add()->::caffe::RandomGeneratorParameter::MergeFrom(from.lmult_add());
}
if (cached_has_bits & 0x00002000u) {
mutable_sat_pow()->::caffe::RandomGeneratorParameter::MergeFrom(from.sat_pow());
}
if (cached_has_bits & 0x00004000u) {
mutable_sat_mult()->::caffe::RandomGeneratorParameter::MergeFrom(from.sat_mult());
}
if (cached_has_bits & 0x00008000u) {
mutable_sat_add()->::caffe::RandomGeneratorParameter::MergeFrom(from.sat_add());
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
mutable_col_pow()->::caffe::RandomGeneratorParameter::MergeFrom(from.col_pow());
}
if (cached_has_bits & 0x00020000u) {
mutable_col_mult()->::caffe::RandomGeneratorParameter::MergeFrom(from.col_mult());
}
if (cached_has_bits & 0x00040000u) {
mutable_col_add()->::caffe::RandomGeneratorParameter::MergeFrom(from.col_add());
}
if (cached_has_bits & 0x00080000u) {
mutable_ladd_pow()->::caffe::RandomGeneratorParameter::MergeFrom(from.ladd_pow());
}
if (cached_has_bits & 0x00100000u) {
mutable_ladd_mult()->::caffe::RandomGeneratorParameter::MergeFrom(from.ladd_mult());
}
if (cached_has_bits & 0x00200000u) {
mutable_ladd_add()->::caffe::RandomGeneratorParameter::MergeFrom(from.ladd_add());
}
if (cached_has_bits & 0x00400000u) {
mutable_col_rotate()->::caffe::RandomGeneratorParameter::MergeFrom(from.col_rotate());
}
if (cached_has_bits & 0x00800000u) {
mutable_gamma()->::caffe::RandomGeneratorParameter::MergeFrom(from.gamma());
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
mutable_brightness()->::caffe::RandomGeneratorParameter::MergeFrom(from.brightness());
}
if (cached_has_bits & 0x02000000u) {
mutable_contrast()->::caffe::RandomGeneratorParameter::MergeFrom(from.contrast());
}
if (cached_has_bits & 0x04000000u) {
mutable_color()->::caffe::RandomGeneratorParameter::MergeFrom(from.color());
}
if (cached_has_bits & 0x08000000u) {
mutable_fog_amount()->::caffe::RandomGeneratorParameter::MergeFrom(from.fog_amount());
}
if (cached_has_bits & 0x10000000u) {
mutable_fog_size()->::caffe::RandomGeneratorParameter::MergeFrom(from.fog_size());
}
if (cached_has_bits & 0x20000000u) {
mutable_motion_blur_angle()->::caffe::RandomGeneratorParameter::MergeFrom(from.motion_blur_angle());
}
if (cached_has_bits & 0x40000000u) {
mutable_motion_blur_size()->::caffe::RandomGeneratorParameter::MergeFrom(from.motion_blur_size());
}
if (cached_has_bits & 0x80000000u) {
mutable_shadow_angle()->::caffe::RandomGeneratorParameter::MergeFrom(from.shadow_angle());
}
}
cached_has_bits = from._has_bits_[1];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
mutable_shadow_distance()->::caffe::RandomGeneratorParameter::MergeFrom(from.shadow_distance());
}
if (cached_has_bits & 0x00000002u) {
mutable_shadow_strength()->::caffe::RandomGeneratorParameter::MergeFrom(from.shadow_strength());
}
if (cached_has_bits & 0x00000004u) {
mutable_noise()->::caffe::RandomGeneratorParameter::MergeFrom(from.noise());
}
if (cached_has_bits & 0x00000008u) {
augment_during_test_ = from.augment_during_test_;
}
if (cached_has_bits & 0x00000010u) {
recompute_mean_ = from.recompute_mean_;
}
if (cached_has_bits & 0x00000020u) {
crop_width_ = from.crop_width_;
}
if (cached_has_bits & 0x00000040u) {
crop_height_ = from.crop_height_;
}
if (cached_has_bits & 0x00000080u) {
num_ = from.num_;
}
_has_bits_[1] |= cached_has_bits;
}
if (cached_has_bits & 3840u) {
if (cached_has_bits & 0x00000100u) {
bottomwidth_ = from.bottomwidth_;
}
if (cached_has_bits & 0x00000200u) {
bottomheight_ = from.bottomheight_;
}
if (cached_has_bits & 0x00000400u) {
max_multiplier_ = from.max_multiplier_;
}
if (cached_has_bits & 0x00000800u) {
mean_per_pixel_ = from.mean_per_pixel_;
}
_has_bits_[1] |= cached_has_bits;
}
}

void AugmentationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AugmentationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void AugmentationParameter::CopyFrom(const AugmentationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AugmentationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool AugmentationParameter::IsInitialized() const {
return true;
}

void AugmentationParameter::Swap(AugmentationParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void AugmentationParameter::InternalSwap(AugmentationParameter* other) {
using std::swap;
mean_.InternalSwap(&other->mean_);
chromatic_eigvec_.InternalSwap(&other->chromatic_eigvec_);
write_augmented_.Swap(&other->write_augmented_);
write_mean_.Swap(&other->write_mean_);
mode_.Swap(&other->mode_);
swap(mirror_, other->mirror_);
swap(translate_, other->translate_);
swap(rotate_, other->rotate_);
swap(zoom_, other->zoom_);
swap(squeeze_, other->squeeze_);
swap(translate_x_, other->translate_x_);
swap(translate_y_, other->translate_y_);
swap(lmult_pow_, other->lmult_pow_);
swap(lmult_mult_, other->lmult_mult_);
swap(lmult_add_, other->lmult_add_);
swap(sat_pow_, other->sat_pow_);
swap(sat_mult_, other->sat_mult_);
swap(sat_add_, other->sat_add_);
swap(col_pow_, other->col_pow_);
swap(col_mult_, other->col_mult_);
swap(col_add_, other->col_add_);
swap(ladd_pow_, other->ladd_pow_);
swap(ladd_mult_, other->ladd_mult_);
swap(ladd_add_, other->ladd_add_);
swap(col_rotate_, other->col_rotate_);
swap(gamma_, other->gamma_);
swap(brightness_, other->brightness_);
swap(contrast_, other->contrast_);
swap(color_, other->color_);
swap(fog_amount_, other->fog_amount_);
swap(fog_size_, other->fog_size_);
swap(motion_blur_angle_, other->motion_blur_angle_);
swap(motion_blur_size_, other->motion_blur_size_);
swap(shadow_angle_, other->shadow_angle_);
swap(shadow_distance_, other->shadow_distance_);
swap(shadow_strength_, other->shadow_strength_);
swap(noise_, other->noise_);
swap(augment_during_test_, other->augment_during_test_);
swap(recompute_mean_, other->recompute_mean_);
swap(crop_width_, other->crop_width_);
swap(crop_height_, other->crop_height_);
swap(num_, other->num_);
swap(bottomwidth_, other->bottomwidth_);
swap(bottomheight_, other->bottomheight_);
swap(max_multiplier_, other->max_multiplier_);
swap(mean_per_pixel_, other->mean_per_pixel_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AugmentationParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RandomGeneratorParameter::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> RandomGeneratorParameter::_default_rand_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomGeneratorParameter::kRandTypeFieldNumber;
const int RandomGeneratorParameter::kExpFieldNumber;
const int RandomGeneratorParameter::kMeanFieldNumber;
const int RandomGeneratorParameter::kSpreadFieldNumber;
const int RandomGeneratorParameter::kProbFieldNumber;
const int RandomGeneratorParameter::kApplyScheduleFieldNumber;
const int RandomGeneratorParameter::kDiscretizeFieldNumber;
const int RandomGeneratorParameter::kMultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomGeneratorParameter::RandomGeneratorParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsRandomGeneratorParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.RandomGeneratorParameter)
}
RandomGeneratorParameter::RandomGeneratorParameter(const RandomGeneratorParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
rand_type_.UnsafeSetDefault(&::caffe::RandomGeneratorParameter::_default_rand_type_.get());
if (from.has_rand_type()) {
rand_type_.AssignWithDefault(&::caffe::RandomGeneratorParameter::_default_rand_type_.get(), from.rand_type_);
}
::memcpy(&mean_, &from.mean_,
static_cast<size_t>(reinterpret_cast<char*>(&apply_schedule_) -
reinterpret_cast<char*>(&mean_)) + sizeof(apply_schedule_));
// @@protoc_insertion_point(copy_constructor:caffe.RandomGeneratorParameter)
}

void RandomGeneratorParameter::SharedCtor() {
_cached_size_ = 0;
rand_type_.UnsafeSetDefault(&::caffe::RandomGeneratorParameter::_default_rand_type_.get());
::memset(&mean_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&discretize_) -
reinterpret_cast<char*>(&mean_)) + sizeof(discretize_));
multiplier_ = 1;
prob_ = 1;
apply_schedule_ = true;
}

RandomGeneratorParameter::~RandomGeneratorParameter() {
// @@protoc_insertion_point(destructor:caffe.RandomGeneratorParameter)
SharedDtor();
}

void RandomGeneratorParameter::SharedDtor() {
rand_type_.DestroyNoArena(&::caffe::RandomGeneratorParameter::_default_rand_type_.get());
}

void RandomGeneratorParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomGeneratorParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomGeneratorParameter& RandomGeneratorParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsRandomGeneratorParameter();
return *internal_default_instance();
}

RandomGeneratorParameter* RandomGeneratorParameter::New(::google::protobuf::Arena* arena) const {
RandomGeneratorParameter* n = new RandomGeneratorParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void RandomGeneratorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RandomGeneratorParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!rand_type_.IsDefault(&::caffe::RandomGeneratorParameter::_default_rand_type_.get()));
(*rand_type_.UnsafeRawStringPointer())->assign(*&::caffe::RandomGeneratorParameter::_default_rand_type_.get());
}
if (cached_has_bits & 254u) {
::memset(&mean_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&discretize_) -
reinterpret_cast<char*>(&mean_)) + sizeof(discretize_));
multiplier_ = 1;
prob_ = 1;
apply_schedule_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool RandomGeneratorParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.RandomGeneratorParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string rand_type = 1 [default = "uniform"];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_rand_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->rand_type().data(), static_cast<int>(this->rand_type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.RandomGeneratorParameter.rand_type");
} else {
goto handle_unusual;
}
break;
}

// optional bool exp = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_exp();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &exp_)));
} else {
goto handle_unusual;
}
break;
}

// optional float mean = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_mean();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mean_)));
} else {
goto handle_unusual;
}
break;
}

// optional float spread = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_spread();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &spread_)));
} else {
goto handle_unusual;
}
break;
}

// optional float prob = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
set_has_prob();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &prob_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool apply_schedule = 7 [default = true];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_apply_schedule();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &apply_schedule_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool discretize = 8 [default = false];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
set_has_discretize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &discretize_)));
} else {
goto handle_unusual;
}
break;
}

// optional float multiplier = 9 [default = 1];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
set_has_multiplier();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &multiplier_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.RandomGeneratorParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.RandomGeneratorParameter)
return false;
#undef DO_
}

void RandomGeneratorParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.RandomGeneratorParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string rand_type = 1 [default = "uniform"];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->rand_type().data(), static_cast<int>(this->rand_type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.RandomGeneratorParameter.rand_type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->rand_type(), output);
}

// optional bool exp = 2 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exp(), output);
}

// optional float mean = 4 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mean(), output);
}

// optional float spread = 5 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->spread(), output);
}

// optional float prob = 6 [default = 1];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->prob(), output);
}

// optional bool apply_schedule = 7 [default = true];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->apply_schedule(), output);
}

// optional bool discretize = 8 [default = false];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(8, this->discretize(), output);
}

// optional float multiplier = 9 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->multiplier(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.RandomGeneratorParameter)
}

::google::protobuf::uint8* RandomGeneratorParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.RandomGeneratorParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string rand_type = 1 [default = "uniform"];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->rand_type().data(), static_cast<int>(this->rand_type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.RandomGeneratorParameter.rand_type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->rand_type(), target);
}

// optional bool exp = 2 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exp(), target);
}

// optional float mean = 4 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mean(), target);
}

// optional float spread = 5 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->spread(), target);
}

// optional float prob = 6 [default = 1];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->prob(), target);
}

// optional bool apply_schedule = 7 [default = true];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->apply_schedule(), target);
}

// optional bool discretize = 8 [default = false];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->discretize(), target);
}

// optional float multiplier = 9 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->multiplier(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.RandomGeneratorParameter)
return target;
}

size_t RandomGeneratorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RandomGeneratorParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional string rand_type = 1 [default = "uniform"];
if (has_rand_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->rand_type());
}

// optional float mean = 4 [default = 0];
if (has_mean()) {
total_size += 1 + 4;
}

// optional float spread = 5 [default = 0];
if (has_spread()) {
total_size += 1 + 4;
}

// optional bool exp = 2 [default = false];
if (has_exp()) {
total_size += 1 + 1;
}

// optional bool discretize = 8 [default = false];
if (has_discretize()) {
total_size += 1 + 1;
}

// optional float multiplier = 9 [default = 1];
if (has_multiplier()) {
total_size += 1 + 4;
}

// optional float prob = 6 [default = 1];
if (has_prob()) {
total_size += 1 + 4;
}

// optional bool apply_schedule = 7 [default = true];
if (has_apply_schedule()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void RandomGeneratorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RandomGeneratorParameter)
GOOGLE_DCHECK_NE(&from, this);
const RandomGeneratorParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const RandomGeneratorParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RandomGeneratorParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RandomGeneratorParameter)
MergeFrom(*source);
}
}

void RandomGeneratorParameter::MergeFrom(const RandomGeneratorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RandomGeneratorParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_rand_type();
rand_type_.AssignWithDefault(&::caffe::RandomGeneratorParameter::_default_rand_type_.get(), from.rand_type_);
}
if (cached_has_bits & 0x00000002u) {
mean_ = from.mean_;
}
if (cached_has_bits & 0x00000004u) {
spread_ = from.spread_;
}
if (cached_has_bits & 0x00000008u) {
exp_ = from.exp_;
}
if (cached_has_bits & 0x00000010u) {
discretize_ = from.discretize_;
}
if (cached_has_bits & 0x00000020u) {
multiplier_ = from.multiplier_;
}
if (cached_has_bits & 0x00000040u) {
prob_ = from.prob_;
}
if (cached_has_bits & 0x00000080u) {
apply_schedule_ = from.apply_schedule_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void RandomGeneratorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RandomGeneratorParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void RandomGeneratorParameter::CopyFrom(const RandomGeneratorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RandomGeneratorParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool RandomGeneratorParameter::IsInitialized() const {
return true;
}

void RandomGeneratorParameter::Swap(RandomGeneratorParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void RandomGeneratorParameter::InternalSwap(RandomGeneratorParameter* other) {
using std::swap;
rand_type_.Swap(&other->rand_type_);
swap(mean_, other->mean_);
swap(spread_, other->spread_);
swap(exp_, other->exp_);
swap(discretize_, other->discretize_);
swap(multiplier_, other->multiplier_);
swap(prob_, other->prob_);
swap(apply_schedule_, other->apply_schedule_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomGeneratorParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void L1LossParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int L1LossParameter::kL2PerLocationFieldNumber;
const int L1LossParameter::kL2PrescaleByChannelsFieldNumber;
const int L1LossParameter::kNormalizeByNumEntriesFieldNumber;
const int L1LossParameter::kEpsilonFieldNumber;
const int L1LossParameter::kPlateauFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

L1LossParameter::L1LossParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsL1LossParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.L1LossParameter)
}
L1LossParameter::L1LossParameter(const L1LossParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&l2_per_location_, &from.l2_per_location_,
static_cast<size_t>(reinterpret_cast<char*>(&epsilon_) -
reinterpret_cast<char*>(&l2_per_location_)) + sizeof(epsilon_));
// @@protoc_insertion_point(copy_constructor:caffe.L1LossParameter)
}

void L1LossParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&l2_per_location_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&plateau_) -
reinterpret_cast<char*>(&l2_per_location_)) + sizeof(plateau_));
epsilon_ = 0.01f;
}

L1LossParameter::~L1LossParameter() {
// @@protoc_insertion_point(destructor:caffe.L1LossParameter)
SharedDtor();
}

void L1LossParameter::SharedDtor() {
}

void L1LossParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L1LossParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const L1LossParameter& L1LossParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsL1LossParameter();
return *internal_default_instance();
}

L1LossParameter* L1LossParameter::New(::google::protobuf::Arena* arena) const {
L1LossParameter* n = new L1LossParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void L1LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.L1LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 31u) {
::memset(&l2_per_location_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&plateau_) -
reinterpret_cast<char*>(&l2_per_location_)) + sizeof(plateau_));
epsilon_ = 0.01f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool L1LossParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.L1LossParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(24013u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional bool l2_per_location = 1 [default = false];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_l2_per_location();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &l2_per_location_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool l2_prescale_by_channels = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_l2_prescale_by_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &l2_prescale_by_channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool normalize_by_num_entries = 3 [default = false];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_normalize_by_num_entries();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &normalize_by_num_entries_)));
} else {
goto handle_unusual;
}
break;
}

// optional float epsilon = 4 [default = 0.01];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_epsilon();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &epsilon_)));
} else {
goto handle_unusual;
}
break;
}

// optional float plateau = 3001 [default = 0];
case 3001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(205u /* 24013 & 0xFF */)) {
set_has_plateau();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &plateau_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.L1LossParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.L1LossParameter)
return false;
#undef DO_
}

void L1LossParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.L1LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool l2_per_location = 1 [default = false];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBool(1, this->l2_per_location(), output);
}

// optional bool l2_prescale_by_channels = 2 [default = false];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->l2_prescale_by_channels(), output);
}

// optional bool normalize_by_num_entries = 3 [default = false];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3, this->normalize_by_num_entries(), output);
}

// optional float epsilon = 4 [default = 0.01];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->epsilon(), output);
}

// optional float plateau = 3001 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3001, this->plateau(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.L1LossParameter)
}

::google::protobuf::uint8* L1LossParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.L1LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool l2_per_location = 1 [default = false];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->l2_per_location(), target);
}

// optional bool l2_prescale_by_channels = 2 [default = false];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->l2_prescale_by_channels(), target);
}

// optional bool normalize_by_num_entries = 3 [default = false];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->normalize_by_num_entries(), target);
}

// optional float epsilon = 4 [default = 0.01];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->epsilon(), target);
}

// optional float plateau = 3001 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3001, this->plateau(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.L1LossParameter)
return target;
}

size_t L1LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.L1LossParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 31u) {
// optional bool l2_per_location = 1 [default = false];
if (has_l2_per_location()) {
total_size += 1 + 1;
}

// optional bool l2_prescale_by_channels = 2 [default = false];
if (has_l2_prescale_by_channels()) {
total_size += 1 + 1;
}

// optional bool normalize_by_num_entries = 3 [default = false];
if (has_normalize_by_num_entries()) {
total_size += 1 + 1;
}

// optional float plateau = 3001 [default = 0];
if (has_plateau()) {
total_size += 3 + 4;
}

// optional float epsilon = 4 [default = 0.01];
if (has_epsilon()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void L1LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.L1LossParameter)
GOOGLE_DCHECK_NE(&from, this);
const L1LossParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const L1LossParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.L1LossParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.L1LossParameter)
MergeFrom(*source);
}
}

void L1LossParameter::MergeFrom(const L1LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.L1LossParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
l2_per_location_ = from.l2_per_location_;
}
if (cached_has_bits & 0x00000002u) {
l2_prescale_by_channels_ = from.l2_prescale_by_channels_;
}
if (cached_has_bits & 0x00000004u) {
normalize_by_num_entries_ = from.normalize_by_num_entries_;
}
if (cached_has_bits & 0x00000008u) {
plateau_ = from.plateau_;
}
if (cached_has_bits & 0x00000010u) {
epsilon_ = from.epsilon_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void L1LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.L1LossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void L1LossParameter::CopyFrom(const L1LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.L1LossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool L1LossParameter::IsInitialized() const {
return true;
}

void L1LossParameter::Swap(L1LossParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void L1LossParameter::InternalSwap(L1LossParameter* other) {
using std::swap;
swap(l2_per_location_, other->l2_per_location_);
swap(l2_prescale_by_channels_, other->l2_prescale_by_channels_);
swap(normalize_by_num_entries_, other->normalize_by_num_entries_);
swap(plateau_, other->plateau_);
swap(epsilon_, other->epsilon_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata L1LossParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CorrelationParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CorrelationParameter::kPadFieldNumber;
const int CorrelationParameter::kKernelSizeFieldNumber;
const int CorrelationParameter::kMaxDisplacementFieldNumber;
const int CorrelationParameter::kStride1FieldNumber;
const int CorrelationParameter::kStride2FieldNumber;
const int CorrelationParameter::kSingleDirectionFieldNumber;
const int CorrelationParameter::kDoAbsFieldNumber;
const int CorrelationParameter::kCorrelationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CorrelationParameter::CorrelationParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsCorrelationParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.CorrelationParameter)
}
CorrelationParameter::CorrelationParameter(const CorrelationParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&pad_, &from.pad_,
static_cast<size_t>(reinterpret_cast<char*>(&stride_2_) -
reinterpret_cast<char*>(&pad_)) + sizeof(stride_2_));
// @@protoc_insertion_point(copy_constructor:caffe.CorrelationParameter)
}

void CorrelationParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&pad_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&correlation_type_) -
reinterpret_cast<char*>(&pad_)) + sizeof(correlation_type_));
stride_1_ = 1u;
stride_2_ = 1u;
}

CorrelationParameter::~CorrelationParameter() {
// @@protoc_insertion_point(destructor:caffe.CorrelationParameter)
SharedDtor();
}

void CorrelationParameter::SharedDtor() {
}

void CorrelationParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorrelationParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CorrelationParameter& CorrelationParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsCorrelationParameter();
return *internal_default_instance();
}

CorrelationParameter* CorrelationParameter::New(::google::protobuf::Arena* arena) const {
CorrelationParameter* n = new CorrelationParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void CorrelationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CorrelationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
::memset(&pad_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&correlation_type_) -
reinterpret_cast<char*>(&pad_)) + sizeof(correlation_type_));
stride_1_ = 1u;
stride_2_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool CorrelationParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.CorrelationParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 pad = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_pad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_size = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_kernel_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 max_displacement = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_max_displacement();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &max_displacement_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_1 = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_stride_1();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_1_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_2 = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_stride_2();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_2_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool do_abs = 7 [default = false];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_do_abs();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &do_abs_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 single_direction = 8 [default = 0];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
set_has_single_direction();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &single_direction_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.CorrelationParameter.CorrelationType correlation_type = 15 [default = MULTIPLY];
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::CorrelationParameter_CorrelationType_IsValid(value)) {
set_correlation_type(static_cast< ::caffe::CorrelationParameter_CorrelationType >(value));
} else {
mutable_unknown_fields()->AddVarint(
15, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.CorrelationParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.CorrelationParameter)
return false;
#undef DO_
}

void CorrelationParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.CorrelationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 pad = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad(), output);
}

// optional uint32 kernel_size = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kernel_size(), output);
}

// optional uint32 max_displacement = 4;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_displacement(), output);
}

// optional uint32 stride_1 = 5 [default = 1];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stride_1(), output);
}

// optional uint32 stride_2 = 6 [default = 1];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride_2(), output);
}

// optional bool do_abs = 7 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->do_abs(), output);
}

// optional int32 single_direction = 8 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->single_direction(), output);
}

// optional .caffe.CorrelationParameter.CorrelationType correlation_type = 15 [default = MULTIPLY];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
15, this->correlation_type(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.CorrelationParameter)
}

::google::protobuf::uint8* CorrelationParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.CorrelationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 pad = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad(), target);
}

// optional uint32 kernel_size = 3;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kernel_size(), target);
}

// optional uint32 max_displacement = 4;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_displacement(), target);
}

// optional uint32 stride_1 = 5 [default = 1];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stride_1(), target);
}

// optional uint32 stride_2 = 6 [default = 1];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride_2(), target);
}

// optional bool do_abs = 7 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->do_abs(), target);
}

// optional int32 single_direction = 8 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->single_direction(), target);
}

// optional .caffe.CorrelationParameter.CorrelationType correlation_type = 15 [default = MULTIPLY];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
15, this->correlation_type(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.CorrelationParameter)
return target;
}

size_t CorrelationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CorrelationParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional uint32 pad = 2 [default = 0];
if (has_pad()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad());
}

// optional uint32 kernel_size = 3;
if (has_kernel_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_size());
}

// optional uint32 max_displacement = 4;
if (has_max_displacement()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->max_displacement());
}

// optional bool do_abs = 7 [default = false];
if (has_do_abs()) {
total_size += 1 + 1;
}

// optional int32 single_direction = 8 [default = 0];
if (has_single_direction()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->single_direction());
}

// optional .caffe.CorrelationParameter.CorrelationType correlation_type = 15 [default = MULTIPLY];
if (has_correlation_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->correlation_type());
}

// optional uint32 stride_1 = 5 [default = 1];
if (has_stride_1()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_1());
}

// optional uint32 stride_2 = 6 [default = 1];
if (has_stride_2()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_2());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void CorrelationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CorrelationParameter)
GOOGLE_DCHECK_NE(&from, this);
const CorrelationParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const CorrelationParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CorrelationParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CorrelationParameter)
MergeFrom(*source);
}
}

void CorrelationParameter::MergeFrom(const CorrelationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CorrelationParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
pad_ = from.pad_;
}
if (cached_has_bits & 0x00000002u) {
kernel_size_ = from.kernel_size_;
}
if (cached_has_bits & 0x00000004u) {
max_displacement_ = from.max_displacement_;
}
if (cached_has_bits & 0x00000008u) {
do_abs_ = from.do_abs_;
}
if (cached_has_bits & 0x00000010u) {
single_direction_ = from.single_direction_;
}
if (cached_has_bits & 0x00000020u) {
correlation_type_ = from.correlation_type_;
}
if (cached_has_bits & 0x00000040u) {
stride_1_ = from.stride_1_;
}
if (cached_has_bits & 0x00000080u) {
stride_2_ = from.stride_2_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void CorrelationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CorrelationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void CorrelationParameter::CopyFrom(const CorrelationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CorrelationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool CorrelationParameter::IsInitialized() const {
return true;
}

void CorrelationParameter::Swap(CorrelationParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void CorrelationParameter::InternalSwap(CorrelationParameter* other) {
using std::swap;
swap(pad_, other->pad_);
swap(kernel_size_, other->kernel_size_);
swap(max_displacement_, other->max_displacement_);
swap(do_abs_, other->do_abs_);
swap(single_direction_, other->single_direction_);
swap(correlation_type_, other->correlation_type_);
swap(stride_1_, other->stride_1_);
swap(stride_2_, other->stride_2_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CorrelationParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DownsampleParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownsampleParameter::kTopHeightFieldNumber;
const int DownsampleParameter::kTopWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownsampleParameter::DownsampleParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsDownsampleParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.DownsampleParameter)
}
DownsampleParameter::DownsampleParameter(const DownsampleParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&top_height_, &from.top_height_,
static_cast<size_t>(reinterpret_cast<char*>(&top_width_) -
reinterpret_cast<char*>(&top_height_)) + sizeof(top_width_));
// @@protoc_insertion_point(copy_constructor:caffe.DownsampleParameter)
}

void DownsampleParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&top_height_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&top_width_) -
reinterpret_cast<char*>(&top_height_)) + sizeof(top_width_));
}

DownsampleParameter::~DownsampleParameter() {
// @@protoc_insertion_point(destructor:caffe.DownsampleParameter)
SharedDtor();
}

void DownsampleParameter::SharedDtor() {
}

void DownsampleParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownsampleParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownsampleParameter& DownsampleParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsDownsampleParameter();
return *internal_default_instance();
}

DownsampleParameter* DownsampleParameter::New(::google::protobuf::Arena* arena) const {
DownsampleParameter* n = new DownsampleParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void DownsampleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DownsampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
::memset(&top_height_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&top_width_) -
reinterpret_cast<char*>(&top_height_)) + sizeof(top_width_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool DownsampleParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.DownsampleParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 top_height = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_top_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &top_height_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 top_width = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_top_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &top_width_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.DownsampleParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.DownsampleParameter)
return false;
#undef DO_
}

void DownsampleParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.DownsampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 top_height = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_height(), output);
}

// optional uint32 top_width = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_width(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.DownsampleParameter)
}

::google::protobuf::uint8* DownsampleParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.DownsampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 top_height = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_height(), target);
}

// optional uint32 top_width = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_width(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.DownsampleParameter)
return target;
}

size_t DownsampleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DownsampleParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional uint32 top_height = 1 [default = 0];
if (has_top_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->top_height());
}

// optional uint32 top_width = 2 [default = 0];
if (has_top_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->top_width());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void DownsampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DownsampleParameter)
GOOGLE_DCHECK_NE(&from, this);
const DownsampleParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const DownsampleParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DownsampleParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DownsampleParameter)
MergeFrom(*source);
}
}

void DownsampleParameter::MergeFrom(const DownsampleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DownsampleParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
top_height_ = from.top_height_;
}
if (cached_has_bits & 0x00000002u) {
top_width_ = from.top_width_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void DownsampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DownsampleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void DownsampleParameter::CopyFrom(const DownsampleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DownsampleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool DownsampleParameter::IsInitialized() const {
return true;
}

void DownsampleParameter::Swap(DownsampleParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void DownsampleParameter::InternalSwap(DownsampleParameter* other) {
using std::swap;
swap(top_height_, other->top_height_);
swap(top_width_, other->top_width_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownsampleParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReaderParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReaderParameter::kFileFieldNumber;
const int ReaderParameter::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReaderParameter::ReaderParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsReaderParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ReaderParameter)
}
ReaderParameter::ReaderParameter(const ReaderParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_file()) {
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
num_ = from.num_;
// @@protoc_insertion_point(copy_constructor:caffe.ReaderParameter)
}

void ReaderParameter::SharedCtor() {
_cached_size_ = 0;
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
num_ = 1u;
}

ReaderParameter::~ReaderParameter() {
// @@protoc_insertion_point(destructor:caffe.ReaderParameter)
SharedDtor();
}

void ReaderParameter::SharedDtor() {
file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReaderParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReaderParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReaderParameter& ReaderParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsReaderParameter();
return *internal_default_instance();
}

ReaderParameter* ReaderParameter::New(::google::protobuf::Arena* arena) const {
ReaderParameter* n = new ReaderParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ReaderParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReaderParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*file_.UnsafeRawStringPointer())->clear();
}
num_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ReaderParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ReaderParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// required string file = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.ReaderParameter.file");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 num = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_num();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ReaderParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ReaderParameter)
return false;
#undef DO_
}

void ReaderParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ReaderParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// required string file = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ReaderParameter.file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->file(), output);
}

// optional uint32 num = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ReaderParameter)
}

::google::protobuf::uint8* ReaderParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ReaderParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// required string file = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ReaderParameter.file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->file(), target);
}

// optional uint32 num = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ReaderParameter)
return target;
}

size_t ReaderParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReaderParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// required string file = 1;
if (has_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->file());
}
// optional uint32 num = 2 [default = 1];
if (has_num()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ReaderParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReaderParameter)
GOOGLE_DCHECK_NE(&from, this);
const ReaderParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ReaderParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReaderParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReaderParameter)
MergeFrom(*source);
}
}

void ReaderParameter::MergeFrom(const ReaderParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReaderParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
set_has_file();
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
if (cached_has_bits & 0x00000002u) {
num_ = from.num_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ReaderParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReaderParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ReaderParameter::CopyFrom(const ReaderParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReaderParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ReaderParameter::IsInitialized() const {
if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
return true;
}

void ReaderParameter::Swap(ReaderParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ReaderParameter::InternalSwap(ReaderParameter* other) {
using std::swap;
file_.Swap(&other->file_);
swap(num_, other->num_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReaderParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriterParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriterParameter::kFileFieldNumber;
const int WriterParameter::kFolderFieldNumber;
const int WriterParameter::kPrefixFieldNumber;
const int WriterParameter::kSuffixFieldNumber;
const int WriterParameter::kNormalizeFieldNumber;
const int WriterParameter::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriterParameter::WriterParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsWriterParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.WriterParameter)
}
WriterParameter::WriterParameter(const WriterParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_file()) {
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_folder()) {
folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_);
}
prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_prefix()) {
prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
}
suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_suffix()) {
suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
}
::memcpy(&normalize_, &from.normalize_,
static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
reinterpret_cast<char*>(&normalize_)) + sizeof(scale_));
// @@protoc_insertion_point(copy_constructor:caffe.WriterParameter)
}

void WriterParameter::SharedCtor() {
_cached_size_ = 0;
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
normalize_ = false;
scale_ = 1;
}

WriterParameter::~WriterParameter() {
// @@protoc_insertion_point(destructor:caffe.WriterParameter)
SharedDtor();
}

void WriterParameter::SharedDtor() {
file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriterParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriterParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriterParameter& WriterParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsWriterParameter();
return *internal_default_instance();
}

WriterParameter* WriterParameter::New(::google::protobuf::Arena* arena) const {
WriterParameter* n = new WriterParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void WriterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WriterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*file_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*folder_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*prefix_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(!suffix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*suffix_.UnsafeRawStringPointer())->clear();
}
}
if (cached_has_bits & 48u) {
normalize_ = false;
scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool WriterParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.WriterParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string file = 1 [default = ""];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WriterParameter.file");
} else {
goto handle_unusual;
}
break;
}

// optional string folder = 2 [default = ""];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_folder()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->folder().data(), static_cast<int>(this->folder().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WriterParameter.folder");
} else {
goto handle_unusual;
}
break;
}

// optional string prefix = 3 [default = ""];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_prefix()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->prefix().data(), static_cast<int>(this->prefix().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WriterParameter.prefix");
} else {
goto handle_unusual;
}
break;
}

// optional string suffix = 4 [default = ""];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_suffix()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->suffix().data(), static_cast<int>(this->suffix().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WriterParameter.suffix");
} else {
goto handle_unusual;
}
break;
}

// optional bool normalize = 5 [default = false];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_normalize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &normalize_)));
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.WriterParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.WriterParameter)
return false;
#undef DO_
}

void WriterParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.WriterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string file = 1 [default = ""];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->file(), output);
}

// optional string folder = 2 [default = ""];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->folder().data(), static_cast<int>(this->folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.folder");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->folder(), output);
}

// optional string prefix = 3 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->prefix().data(), static_cast<int>(this->prefix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.prefix");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3, this->prefix(), output);
}

// optional string suffix = 4 [default = ""];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->suffix().data(), static_cast<int>(this->suffix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.suffix");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
4, this->suffix(), output);
}

// optional bool normalize = 5 [default = false];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(5, this->normalize(), output);
}

// optional float scale = 6 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.WriterParameter)
}

::google::protobuf::uint8* WriterParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.WriterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string file = 1 [default = ""];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->file(), target);
}

// optional string folder = 2 [default = ""];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->folder().data(), static_cast<int>(this->folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.folder");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->folder(), target);
}

// optional string prefix = 3 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->prefix().data(), static_cast<int>(this->prefix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.prefix");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3, this->prefix(), target);
}

// optional string suffix = 4 [default = ""];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->suffix().data(), static_cast<int>(this->suffix().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WriterParameter.suffix");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
4, this->suffix(), target);
}

// optional bool normalize = 5 [default = false];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->normalize(), target);
}

// optional float scale = 6 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.WriterParameter)
return target;
}

size_t WriterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WriterParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 63u) {
// optional string file = 1 [default = ""];
if (has_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->file());
}

// optional string folder = 2 [default = ""];
if (has_folder()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->folder());
}

// optional string prefix = 3 [default = ""];
if (has_prefix()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->prefix());
}

// optional string suffix = 4 [default = ""];
if (has_suffix()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->suffix());
}

// optional bool normalize = 5 [default = false];
if (has_normalize()) {
total_size += 1 + 1;
}

// optional float scale = 6 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void WriterParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WriterParameter)
GOOGLE_DCHECK_NE(&from, this);
const WriterParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const WriterParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WriterParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WriterParameter)
MergeFrom(*source);
}
}

void WriterParameter::MergeFrom(const WriterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WriterParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 63u) {
if (cached_has_bits & 0x00000001u) {
set_has_file();
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
if (cached_has_bits & 0x00000002u) {
set_has_folder();
folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_);
}
if (cached_has_bits & 0x00000004u) {
set_has_prefix();
prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
}
if (cached_has_bits & 0x00000008u) {
set_has_suffix();
suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
}
if (cached_has_bits & 0x00000010u) {
normalize_ = from.normalize_;
}
if (cached_has_bits & 0x00000020u) {
scale_ = from.scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void WriterParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WriterParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void WriterParameter::CopyFrom(const WriterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WriterParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool WriterParameter::IsInitialized() const {
return true;
}

void WriterParameter::Swap(WriterParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void WriterParameter::InternalSwap(WriterParameter* other) {
using std::swap;
file_.Swap(&other->file_);
folder_.Swap(&other->folder_);
prefix_.Swap(&other->prefix_);
suffix_.Swap(&other->suffix_);
swap(normalize_, other->normalize_);
swap(scale_, other->scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriterParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResampleParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResampleParameter::kAntialiasFieldNumber;
const int ResampleParameter::kWidthFieldNumber;
const int ResampleParameter::kHeightFieldNumber;
const int ResampleParameter::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResampleParameter::ResampleParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsResampleParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ResampleParameter)
}
ResampleParameter::ResampleParameter(const ResampleParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&width_, &from.width_,
static_cast<size_t>(reinterpret_cast<char*>(&antialias_) -
reinterpret_cast<char*>(&width_)) + sizeof(antialias_));
// @@protoc_insertion_point(copy_constructor:caffe.ResampleParameter)
}

void ResampleParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&width_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&height_) -
reinterpret_cast<char*>(&width_)) + sizeof(height_));
type_ = 2;
antialias_ = true;
}

ResampleParameter::~ResampleParameter() {
// @@protoc_insertion_point(destructor:caffe.ResampleParameter)
SharedDtor();
}

void ResampleParameter::SharedDtor() {
}

void ResampleParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResampleParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResampleParameter& ResampleParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsResampleParameter();
return *internal_default_instance();
}

ResampleParameter* ResampleParameter::New(::google::protobuf::Arena* arena) const {
ResampleParameter* n = new ResampleParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ResampleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ResampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 15u) {
::memset(&width_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&height_) -
reinterpret_cast<char*>(&width_)) + sizeof(height_));
type_ = 2;
antialias_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ResampleParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ResampleParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 width = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &width_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 height = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &height_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::ResampleParameter_ResampleType_IsValid(value)) {
set_type(static_cast< ::caffe::ResampleParameter_ResampleType >(value));
} else {
mutable_unknown_fields()->AddVarint(
3, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional bool antialias = 4 [default = true];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_antialias();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &antialias_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ResampleParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ResampleParameter)
return false;
#undef DO_
}

void ResampleParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ResampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 width = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
}

// optional uint32 height = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
3, this->type(), output);
}

// optional bool antialias = 4 [default = true];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->antialias(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ResampleParameter)
}

::google::protobuf::uint8* ResampleParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ResampleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 width = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
}

// optional uint32 height = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
3, this->type(), target);
}

// optional bool antialias = 4 [default = true];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->antialias(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ResampleParameter)
return target;
}

size_t ResampleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ResampleParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 15u) {
// optional uint32 width = 1;
if (has_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->width());
}

// optional uint32 height = 2;
if (has_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->height());
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
if (has_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
}

// optional bool antialias = 4 [default = true];
if (has_antialias()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ResampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ResampleParameter)
GOOGLE_DCHECK_NE(&from, this);
const ResampleParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ResampleParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ResampleParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ResampleParameter)
MergeFrom(*source);
}
}

void ResampleParameter::MergeFrom(const ResampleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ResampleParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
width_ = from.width_;
}
if (cached_has_bits & 0x00000002u) {
height_ = from.height_;
}
if (cached_has_bits & 0x00000004u) {
type_ = from.type_;
}
if (cached_has_bits & 0x00000008u) {
antialias_ = from.antialias_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ResampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ResampleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ResampleParameter::CopyFrom(const ResampleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ResampleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ResampleParameter::IsInitialized() const {
return true;
}

void ResampleParameter::Swap(ResampleParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ResampleParameter::InternalSwap(ResampleParameter* other) {
using std::swap;
swap(width_, other->width_);
swap(height_, other->height_);
swap(type_, other->type_);
swap(antialias_, other->antialias_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResampleParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeanParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeanParameter::kOperationFieldNumber;
const int MeanParameter::kFileFieldNumber;
const int MeanParameter::kValueFieldNumber;
const int MeanParameter::kMeanScaleFieldNumber;
const int MeanParameter::kInputScaleFieldNumber;
const int MeanParameter::kOutputScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeanParameter::MeanParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsMeanParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.MeanParameter)
}
MeanParameter::MeanParameter(const MeanParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
value_(from.value_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_file()) {
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
::memcpy(&operation_, &from.operation_,
static_cast<size_t>(reinterpret_cast<char*>(&output_scale_) -
reinterpret_cast<char*>(&operation_)) + sizeof(output_scale_));
// @@protoc_insertion_point(copy_constructor:caffe.MeanParameter)
}

void MeanParameter::SharedCtor() {
_cached_size_ = 0;
file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
operation_ = 1;
mean_scale_ = 1;
input_scale_ = 1;
output_scale_ = 1;
}

MeanParameter::~MeanParameter() {
// @@protoc_insertion_point(destructor:caffe.MeanParameter)
SharedDtor();
}

void MeanParameter::SharedDtor() {
file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MeanParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeanParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeanParameter& MeanParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsMeanParameter();
return *internal_default_instance();
}

MeanParameter* MeanParameter::New(::google::protobuf::Arena* arena) const {
MeanParameter* n = new MeanParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void MeanParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MeanParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

value_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*file_.UnsafeRawStringPointer())->clear();
}
operation_ = 1;
mean_scale_ = 1;
input_scale_ = 1;
output_scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool MeanParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.MeanParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// required .caffe.MeanParameter.MeanOperation operation = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::MeanParameter_MeanOperation_IsValid(value)) {
set_operation(static_cast< ::caffe::MeanParameter_MeanOperation >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional string file = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.MeanParameter.file");
} else {
goto handle_unusual;
}
break;
}

// repeated float value = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 29u, input, this->mutable_value())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_value())));
} else {
goto handle_unusual;
}
break;
}

// optional float mean_scale = 4 [default = 1];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
set_has_mean_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &mean_scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional float input_scale = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_input_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &input_scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional float output_scale = 6 [default = 1];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
set_has_output_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &output_scale_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.MeanParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.MeanParameter)
return false;
#undef DO_
}

void MeanParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.MeanParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// required .caffe.MeanParameter.MeanOperation operation = 1;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->operation(), output);
}

// optional string file = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.MeanParameter.file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->file(), output);
}

// repeated float value = 3;
for (int i = 0, n = this->value_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
3, this->value(i), output);
}

// optional float mean_scale = 4 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mean_scale(), output);
}

// optional float input_scale = 5 [default = 1];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->input_scale(), output);
}

// optional float output_scale = 6 [default = 1];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->output_scale(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.MeanParameter)
}

::google::protobuf::uint8* MeanParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.MeanParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// required .caffe.MeanParameter.MeanOperation operation = 1;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->operation(), target);
}

// optional string file = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file().data(), static_cast<int>(this->file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.MeanParameter.file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->file(), target);
}

// repeated float value = 3;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(3, this->value_, target);

// optional float mean_scale = 4 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mean_scale(), target);
}

// optional float input_scale = 5 [default = 1];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->input_scale(), target);
}

// optional float output_scale = 6 [default = 1];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->output_scale(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.MeanParameter)
return target;
}

size_t MeanParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MeanParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// required .caffe.MeanParameter.MeanOperation operation = 1;
if (has_operation()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
}
// repeated float value = 3;
{
unsigned int count = static_cast<unsigned int>(this->value_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->value_size());
total_size += data_size;
}

// optional string file = 2;
if (has_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->file());
}

if (_has_bits_[0 / 32] & 28u) {
// optional float mean_scale = 4 [default = 1];
if (has_mean_scale()) {
total_size += 1 + 4;
}

// optional float input_scale = 5 [default = 1];
if (has_input_scale()) {
total_size += 1 + 4;
}

// optional float output_scale = 6 [default = 1];
if (has_output_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void MeanParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MeanParameter)
GOOGLE_DCHECK_NE(&from, this);
const MeanParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const MeanParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MeanParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MeanParameter)
MergeFrom(*source);
}
}

void MeanParameter::MergeFrom(const MeanParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MeanParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

value_.MergeFrom(from.value_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
set_has_file();
file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
}
if (cached_has_bits & 0x00000002u) {
operation_ = from.operation_;
}
if (cached_has_bits & 0x00000004u) {
mean_scale_ = from.mean_scale_;
}
if (cached_has_bits & 0x00000008u) {
input_scale_ = from.input_scale_;
}
if (cached_has_bits & 0x00000010u) {
output_scale_ = from.output_scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void MeanParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MeanParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void MeanParameter::CopyFrom(const MeanParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MeanParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool MeanParameter::IsInitialized() const {
if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
return true;
}

void MeanParameter::Swap(MeanParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void MeanParameter::InternalSwap(MeanParameter* other) {
using std::swap;
value_.InternalSwap(&other->value_);
file_.Swap(&other->file_);
swap(operation_, other->operation_);
swap(mean_scale_, other->mean_scale_);
swap(input_scale_, other->input_scale_);
swap(output_scale_, other->output_scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeanParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CoeffScheduleParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoeffScheduleParameter::kHalfLifeFieldNumber;
const int CoeffScheduleParameter::kInitialCoeffFieldNumber;
const int CoeffScheduleParameter::kFinalCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoeffScheduleParameter::CoeffScheduleParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsCoeffScheduleParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.CoeffScheduleParameter)
}
CoeffScheduleParameter::CoeffScheduleParameter(const CoeffScheduleParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&final_coeff_, &from.final_coeff_,
static_cast<size_t>(reinterpret_cast<char*>(&initial_coeff_) -
reinterpret_cast<char*>(&final_coeff_)) + sizeof(initial_coeff_));
// @@protoc_insertion_point(copy_constructor:caffe.CoeffScheduleParameter)
}

void CoeffScheduleParameter::SharedCtor() {
_cached_size_ = 0;
final_coeff_ = 1;
half_life_ = 1;
initial_coeff_ = 1;
}

CoeffScheduleParameter::~CoeffScheduleParameter() {
// @@protoc_insertion_point(destructor:caffe.CoeffScheduleParameter)
SharedDtor();
}

void CoeffScheduleParameter::SharedDtor() {
}

void CoeffScheduleParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoeffScheduleParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoeffScheduleParameter& CoeffScheduleParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsCoeffScheduleParameter();
return *internal_default_instance();
}

CoeffScheduleParameter* CoeffScheduleParameter::New(::google::protobuf::Arena* arena) const {
CoeffScheduleParameter* n = new CoeffScheduleParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void CoeffScheduleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CoeffScheduleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
final_coeff_ = 1;
half_life_ = 1;
initial_coeff_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool CoeffScheduleParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.CoeffScheduleParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float half_life = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_half_life();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &half_life_)));
} else {
goto handle_unusual;
}
break;
}

// optional float initial_coeff = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_initial_coeff();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &initial_coeff_)));
} else {
goto handle_unusual;
}
break;
}

// optional float final_coeff = 3 [default = 1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_final_coeff();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &final_coeff_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.CoeffScheduleParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.CoeffScheduleParameter)
return false;
#undef DO_
}

void CoeffScheduleParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.CoeffScheduleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float half_life = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->half_life(), output);
}

// optional float initial_coeff = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->initial_coeff(), output);
}

// optional float final_coeff = 3 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->final_coeff(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.CoeffScheduleParameter)
}

::google::protobuf::uint8* CoeffScheduleParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.CoeffScheduleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float half_life = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->half_life(), target);
}

// optional float initial_coeff = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->initial_coeff(), target);
}

// optional float final_coeff = 3 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->final_coeff(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.CoeffScheduleParameter)
return target;
}

size_t CoeffScheduleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CoeffScheduleParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional float final_coeff = 3 [default = 1];
if (has_final_coeff()) {
total_size += 1 + 4;
}

// optional float half_life = 1 [default = 1];
if (has_half_life()) {
total_size += 1 + 4;
}

// optional float initial_coeff = 2 [default = 1];
if (has_initial_coeff()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void CoeffScheduleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CoeffScheduleParameter)
GOOGLE_DCHECK_NE(&from, this);
const CoeffScheduleParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const CoeffScheduleParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CoeffScheduleParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CoeffScheduleParameter)
MergeFrom(*source);
}
}

void CoeffScheduleParameter::MergeFrom(const CoeffScheduleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CoeffScheduleParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
final_coeff_ = from.final_coeff_;
}
if (cached_has_bits & 0x00000002u) {
half_life_ = from.half_life_;
}
if (cached_has_bits & 0x00000004u) {
initial_coeff_ = from.initial_coeff_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void CoeffScheduleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CoeffScheduleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void CoeffScheduleParameter::CopyFrom(const CoeffScheduleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CoeffScheduleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool CoeffScheduleParameter::IsInitialized() const {
return true;
}

void CoeffScheduleParameter::Swap(CoeffScheduleParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void CoeffScheduleParameter::InternalSwap(CoeffScheduleParameter* other) {
using std::swap;
swap(final_coeff_, other->final_coeff_);
swap(half_life_, other->half_life_);
swap(initial_coeff_, other->initial_coeff_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoeffScheduleParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsTransformationParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
mean_value_(from.mean_value_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_mean_file()) {
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
::memcpy(&crop_size_, &from.crop_size_,
static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(scale_));
// @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
_cached_size_ = 0;
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&force_gray_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
scale_ = 1;
}

TransformationParameter::~TransformationParameter() {
// @@protoc_insertion_point(destructor:caffe.TransformationParameter)
SharedDtor();
}

void TransformationParameter::SharedDtor() {
mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationParameter& TransformationParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsTransformationParameter();
return *internal_default_instance();
}

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
TransformationParameter* n = new TransformationParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

mean_value_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*mean_file_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 62u) {
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&force_gray_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool TransformationParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float scale = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool mirror = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_size = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_crop_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional string mean_file = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_mean_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.TransformationParameter.mean_file");
} else {
goto handle_unusual;
}
break;
}

// repeated float mean_value = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 45u, input, this->mutable_mean_value())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_mean_value())));
} else {
goto handle_unusual;
}
break;
}

// optional bool force_color = 6 [default = false];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_force_color();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &force_color_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool force_gray = 7 [default = false];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_force_gray();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &force_gray_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float scale = 1 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
}

// optional bool mirror = 2 [default = false];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
}

// optional uint32 crop_size = 3 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
}

// optional string mean_file = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.TransformationParameter.mean_file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
4, this->mean_file(), output);
}

// repeated float mean_value = 5;
for (int i = 0, n = this->mean_value_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
5, this->mean_value(i), output);
}

// optional bool force_color = 6 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
}

// optional bool force_gray = 7 [default = false];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float scale = 1 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
}

// optional bool mirror = 2 [default = false];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
}

// optional uint32 crop_size = 3 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
}

// optional string mean_file = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.TransformationParameter.mean_file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
4, this->mean_file(), target);
}

// repeated float mean_value = 5;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(5, this->mean_value_, target);

// optional bool force_color = 6 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
}

// optional bool force_gray = 7 [default = false];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float mean_value = 5;
{
unsigned int count = static_cast<unsigned int>(this->mean_value_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->mean_value_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 63u) {
// optional string mean_file = 4;
if (has_mean_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->mean_file());
}

// optional uint32 crop_size = 3 [default = 0];
if (has_crop_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_size());
}

// optional bool mirror = 2 [default = false];
if (has_mirror()) {
total_size += 1 + 1;
}

// optional bool force_color = 6 [default = false];
if (has_force_color()) {
total_size += 1 + 1;
}

// optional bool force_gray = 7 [default = false];
if (has_force_gray()) {
total_size += 1 + 1;
}

// optional float scale = 1 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
GOOGLE_DCHECK_NE(&from, this);
const TransformationParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
MergeFrom(*source);
}
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

mean_value_.MergeFrom(from.mean_value_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 63u) {
if (cached_has_bits & 0x00000001u) {
set_has_mean_file();
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
if (cached_has_bits & 0x00000002u) {
crop_size_ = from.crop_size_;
}
if (cached_has_bits & 0x00000004u) {
mirror_ = from.mirror_;
}
if (cached_has_bits & 0x00000008u) {
force_color_ = from.force_color_;
}
if (cached_has_bits & 0x00000010u) {
force_gray_ = from.force_gray_;
}
if (cached_has_bits & 0x00000020u) {
scale_ = from.scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
using std::swap;
mean_value_.InternalSwap(&other->mean_value_);
mean_file_.Swap(&other->mean_file_);
swap(crop_size_, other->crop_size_);
swap(mirror_, other->mirror_);
swap(force_color_, other->force_color_);
swap(force_gray_, other->force_gray_);
swap(scale_, other->scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LossParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsLossParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&ignore_label_, &from.ignore_label_,
static_cast<size_t>(reinterpret_cast<char*>(&normalization_) -
reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalization_));
// @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&ignore_label_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&normalize_) -
reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
normalization_ = 1;
}

LossParameter::~LossParameter() {
// @@protoc_insertion_point(destructor:caffe.LossParameter)
SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LossParameter& LossParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsLossParameter();
return *internal_default_instance();
}

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
LossParameter* n = new LossParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
::memset(&ignore_label_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&normalize_) -
reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
normalization_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool LossParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.LossParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 ignore_label = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_ignore_label();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &ignore_label_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool normalize = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_normalize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &normalize_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
} else {
mutable_unknown_fields()->AddVarint(
3, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.LossParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.LossParameter)
return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 ignore_label = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
}

// optional bool normalize = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
3, this->normalization(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 ignore_label = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
}

// optional bool normalize = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
3, this->normalization(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional int32 ignore_label = 1;
if (has_ignore_label()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->ignore_label());
}

// optional bool normalize = 2;
if (has_normalize()) {
total_size += 1 + 1;
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
if (has_normalization()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
GOOGLE_DCHECK_NE(&from, this);
const LossParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
MergeFrom(*source);
}
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
ignore_label_ = from.ignore_label_;
}
if (cached_has_bits & 0x00000002u) {
normalize_ = from.normalize_;
}
if (cached_has_bits & 0x00000004u) {
normalization_ = from.normalization_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
return true;
}

void LossParameter::Swap(LossParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
using std::swap;
swap(ignore_label_, other->ignore_label_);
swap(normalize_, other->normalize_);
swap(normalization_, other->normalization_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccuracyParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsAccuracyParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&ignore_label_, &from.ignore_label_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&ignore_label_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
_cached_size_ = 0;
ignore_label_ = 0;
top_k_ = 1u;
axis_ = 1;
}

AccuracyParameter::~AccuracyParameter() {
// @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsAccuracyParameter();
return *internal_default_instance();
}

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
AccuracyParameter* n = new AccuracyParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
ignore_label_ = 0;
top_k_ = 1u;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool AccuracyParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 top_k = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_top_k();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &top_k_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 ignore_label = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_ignore_label();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &ignore_label_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 top_k = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
}

// optional int32 ignore_label = 3;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 top_k = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
}

// optional int32 ignore_label = 3;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional int32 ignore_label = 3;
if (has_ignore_label()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->ignore_label());
}

// optional uint32 top_k = 1 [default = 1];
if (has_top_k()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->top_k());
}

// optional int32 axis = 2 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
GOOGLE_DCHECK_NE(&from, this);
const AccuracyParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
MergeFrom(*source);
}
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
ignore_label_ = from.ignore_label_;
}
if (cached_has_bits & 0x00000002u) {
top_k_ = from.top_k_;
}
if (cached_has_bits & 0x00000004u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
using std::swap;
swap(ignore_label_, other->ignore_label_);
swap(top_k_, other->top_k_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArgMaxParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgMaxParameter::ArgMaxParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsArgMaxParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}
ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&out_max_val_, &from.out_max_val_,
static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
reinterpret_cast<char*>(&out_max_val_)) + sizeof(top_k_));
// @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&out_max_val_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
top_k_ = 1u;
}

ArgMaxParameter::~ArgMaxParameter() {
// @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
}

void ArgMaxParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsArgMaxParameter();
return *internal_default_instance();
}

ArgMaxParameter* ArgMaxParameter::New(::google::protobuf::Arena* arena) const {
ArgMaxParameter* n = new ArgMaxParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ArgMaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
::memset(&out_max_val_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
top_k_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ArgMaxParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional bool out_max_val = 1 [default = false];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_out_max_val();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &out_max_val_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 top_k = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_top_k();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &top_k_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool out_max_val = 1 [default = false];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
}

// optional uint32 top_k = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
}

// optional int32 axis = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool out_max_val = 1 [default = false];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
}

// optional uint32 top_k = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
}

// optional int32 axis = 3;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ArgMaxParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional bool out_max_val = 1 [default = false];
if (has_out_max_val()) {
total_size += 1 + 1;
}

// optional int32 axis = 3;
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional uint32 top_k = 2 [default = 1];
if (has_top_k()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->top_k());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ArgMaxParameter)
GOOGLE_DCHECK_NE(&from, this);
const ArgMaxParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ArgMaxParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ArgMaxParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ArgMaxParameter)
MergeFrom(*source);
}
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ArgMaxParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
out_max_val_ = from.out_max_val_;
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000004u) {
top_k_ = from.top_k_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ArgMaxParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ArgMaxParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {
return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
using std::swap;
swap(out_max_val_, other->out_max_val_);
swap(axis_, other->axis_);
swap(top_k_, other->top_k_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConcatParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsConcatParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&concat_dim_, &from.concat_dim_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&concat_dim_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
_cached_size_ = 0;
concat_dim_ = 1u;
axis_ = 1;
}

ConcatParameter::~ConcatParameter() {
// @@protoc_insertion_point(destructor:caffe.ConcatParameter)
SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConcatParameter& ConcatParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsConcatParameter();
return *internal_default_instance();
}

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
ConcatParameter* n = new ConcatParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
concat_dim_ = 1u;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 concat_dim = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_concat_dim();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &concat_dim_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 concat_dim = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 concat_dim = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional uint32 concat_dim = 1 [default = 1];
if (has_concat_dim()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->concat_dim());
}

// optional int32 axis = 2 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
GOOGLE_DCHECK_NE(&from, this);
const ConcatParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
MergeFrom(*source);
}
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
concat_dim_ = from.concat_dim_;
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
using std::swap;
swap(concat_dim_, other->concat_dim_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchNormParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsBatchNormParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&use_global_stats_, &from.use_global_stats_,
static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
reinterpret_cast<char*>(&use_global_stats_)) + sizeof(eps_));
// @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
_cached_size_ = 0;
use_global_stats_ = false;
moving_average_fraction_ = 0.999f;
eps_ = 1e-05f;
}

BatchNormParameter::~BatchNormParameter() {
// @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
SharedDtor();
}

void BatchNormParameter::SharedDtor() {
}

void BatchNormParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsBatchNormParameter();
return *internal_default_instance();
}

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
BatchNormParameter* n = new BatchNormParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
use_global_stats_ = false;
moving_average_fraction_ = 0.999f;
eps_ = 1e-05f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool BatchNormParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional bool use_global_stats = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_use_global_stats();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &use_global_stats_)));
} else {
goto handle_unusual;
}
break;
}

// optional float moving_average_fraction = 2 [default = 0.999];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_moving_average_fraction();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &moving_average_fraction_)));
} else {
goto handle_unusual;
}
break;
}

// optional float eps = 3 [default = 1e-05];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_eps();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &eps_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool use_global_stats = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
}

// optional float moving_average_fraction = 2 [default = 0.999];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
}

// optional float eps = 3 [default = 1e-05];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool use_global_stats = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
}

// optional float moving_average_fraction = 2 [default = 0.999];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
}

// optional float eps = 3 [default = 1e-05];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional bool use_global_stats = 1;
if (has_use_global_stats()) {
total_size += 1 + 1;
}

// optional float moving_average_fraction = 2 [default = 0.999];
if (has_moving_average_fraction()) {
total_size += 1 + 4;
}

// optional float eps = 3 [default = 1e-05];
if (has_eps()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
GOOGLE_DCHECK_NE(&from, this);
const BatchNormParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
MergeFrom(*source);
}
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
use_global_stats_ = from.use_global_stats_;
}
if (cached_has_bits & 0x00000002u) {
moving_average_fraction_ = from.moving_average_fraction_;
}
if (cached_has_bits & 0x00000004u) {
eps_ = from.eps_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
using std::swap;
swap(use_global_stats_, other->use_global_stats_);
swap(moving_average_fraction_, other->moving_average_fraction_);
swap(eps_, other->eps_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BiasParameter::InitAsDefaultInstance() {
::caffe::_BiasParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasParameter::BiasParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsBiasParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.BiasParameter)
}
BiasParameter::BiasParameter(const BiasParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_filler()) {
filler_ = new ::caffe::FillerParameter(*from.filler_);
} else {
filler_ = NULL;
}
::memcpy(&axis_, &from.axis_,
static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
// @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
_cached_size_ = 0;
filler_ = NULL;
axis_ = 1;
num_axes_ = 1;
}

BiasParameter::~BiasParameter() {
// @@protoc_insertion_point(destructor:caffe.BiasParameter)
SharedDtor();
}

void BiasParameter::SharedDtor() {
if (this != internal_default_instance()) delete filler_;
}

void BiasParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BiasParameter& BiasParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsBiasParameter();
return *internal_default_instance();
}

BiasParameter* BiasParameter::New(::google::protobuf::Arena* arena) const {
BiasParameter* n = new BiasParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BiasParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(filler_ != NULL);
filler_->Clear();
}
axis_ = 1;
num_axes_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool BiasParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.BiasParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 axis = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 num_axes = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_num_axes();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &num_axes_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter filler = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_filler()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.BiasParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
}

// optional int32 num_axes = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
}

// optional .caffe.FillerParameter filler = 3;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
3, *this->filler_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
}

// optional int32 num_axes = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
}

// optional .caffe.FillerParameter filler = 3;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
3, *this->filler_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BiasParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional .caffe.FillerParameter filler = 3;
if (has_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->filler_);
}

// optional int32 axis = 1 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional int32 num_axes = 2 [default = 1];
if (has_num_axes()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->num_axes());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BiasParameter)
GOOGLE_DCHECK_NE(&from, this);
const BiasParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const BiasParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BiasParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BiasParameter)
MergeFrom(*source);
}
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BiasParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000004u) {
num_axes_ = from.num_axes_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BiasParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BiasParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {
return true;
}

void BiasParameter::Swap(BiasParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void BiasParameter::InternalSwap(BiasParameter* other) {
using std::swap;
swap(filler_, other->filler_);
swap(axis_, other->axis_);
swap(num_axes_, other->num_axes_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContrastiveLossParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContrastiveLossParameter::ContrastiveLossParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsContrastiveLossParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}
ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&legacy_version_, &from.legacy_version_,
static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
reinterpret_cast<char*>(&legacy_version_)) + sizeof(margin_));
// @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
_cached_size_ = 0;
legacy_version_ = false;
margin_ = 1;
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
// @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsContrastiveLossParameter();
return *internal_default_instance();
}

ContrastiveLossParameter* ContrastiveLossParameter::New(::google::protobuf::Arena* arena) const {
ContrastiveLossParameter* n = new ContrastiveLossParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContrastiveLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
legacy_version_ = false;
margin_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float margin = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_margin();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &margin_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool legacy_version = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_legacy_version();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &legacy_version_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float margin = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
}

// optional bool legacy_version = 2 [default = false];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float margin = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
}

// optional bool legacy_version = 2 [default = false];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContrastiveLossParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional bool legacy_version = 2 [default = false];
if (has_legacy_version()) {
total_size += 1 + 1;
}

// optional float margin = 1 [default = 1];
if (has_margin()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContrastiveLossParameter)
GOOGLE_DCHECK_NE(&from, this);
const ContrastiveLossParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ContrastiveLossParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContrastiveLossParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContrastiveLossParameter)
MergeFrom(*source);
}
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContrastiveLossParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
legacy_version_ = from.legacy_version_;
}
if (cached_has_bits & 0x00000002u) {
margin_ = from.margin_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContrastiveLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContrastiveLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {
return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
using std::swap;
swap(legacy_version_, other->legacy_version_);
swap(margin_, other->margin_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConvolutionParameter::InitAsDefaultInstance() {
::caffe::_ConvolutionParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_ConvolutionParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsConvolutionParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
pad_(from.pad_),
kernel_size_(from.kernel_size_),
stride_(from.stride_),
dilation_(from.dilation_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_weight_filler()) {
weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
} else {
weight_filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
::memcpy(&num_output_, &from.num_output_,
static_cast<size_t>(reinterpret_cast<char*>(&group_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(group_));
// @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&weight_filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&force_nd_im2col_) -
reinterpret_cast<char*>(&weight_filler_)) + sizeof(force_nd_im2col_));
axis_ = 1;
bias_term_ = true;
group_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
// @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
if (this != internal_default_instance()) delete weight_filler_;
if (this != internal_default_instance()) delete bias_filler_;
}

void ConvolutionParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsConvolutionParameter();
return *internal_default_instance();
}

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
ConvolutionParameter* n = new ConvolutionParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

pad_.Clear();
kernel_size_.Clear();
stride_.Clear();
dilation_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(weight_filler_ != NULL);
weight_filler_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
}
if (cached_has_bits & 252u) {
::memset(&num_output_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&stride_h_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(stride_h_));
}
if (cached_has_bits & 16128u) {
::memset(&stride_w_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&force_nd_im2col_) -
reinterpret_cast<char*>(&stride_w_)) + sizeof(force_nd_im2col_));
axis_ = 1;
bias_term_ = true;
group_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 num_output = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_num_output();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_output_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool bias_term = 2 [default = true];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_bias_term();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &bias_term_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 pad = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 24u, input, this->mutable_pad())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_pad())));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 kernel_size = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 32u, input, this->mutable_kernel_size())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_kernel_size())));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 group = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_group();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &group_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 stride = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 48u, input, this->mutable_stride())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_stride())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter weight_filler = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_weight_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad_h = 9 [default = 0];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
set_has_pad_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad_w = 10 [default = 0];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_pad_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_h = 11;
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
set_has_kernel_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_w = 12;
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
set_has_kernel_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_h = 13;
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
set_has_stride_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_w = 14;
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
set_has_stride_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
15, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 16 [default = 1];
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool force_nd_im2col = 17 [default = false];
case 17: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
set_has_force_nd_im2col();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &force_nd_im2col_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 dilation = 18;
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
2, 144u, input, this->mutable_dilation())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_dilation())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
}

// optional bool bias_term = 2 [default = true];
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
}

// repeated uint32 pad = 3;
for (int i = 0, n = this->pad_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
3, this->pad(i), output);
}

// repeated uint32 kernel_size = 4;
for (int i = 0, n = this->kernel_size_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
4, this->kernel_size(i), output);
}

// optional uint32 group = 5 [default = 1];
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
}

// repeated uint32 stride = 6;
for (int i = 0, n = this->stride_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
6, this->stride(i), output);
}

// optional .caffe.FillerParameter weight_filler = 7;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
7, *this->weight_filler_, output);
}

// optional .caffe.FillerParameter bias_filler = 8;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
8, *this->bias_filler_, output);
}

// optional uint32 pad_h = 9 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
}

// optional uint32 pad_w = 10 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
}

// optional uint32 kernel_h = 11;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
}

// optional uint32 kernel_w = 12;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
}

// optional uint32 stride_h = 13;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
}

// optional uint32 stride_w = 14;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
15, this->engine(), output);
}

// optional int32 axis = 16 [default = 1];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
}

// optional bool force_nd_im2col = 17 [default = false];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
}

// repeated uint32 dilation = 18;
for (int i = 0, n = this->dilation_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
18, this->dilation(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
}

// optional bool bias_term = 2 [default = true];
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
}

// repeated uint32 pad = 3;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(3, this->pad_, target);

// repeated uint32 kernel_size = 4;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(4, this->kernel_size_, target);

// optional uint32 group = 5 [default = 1];
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
}

// repeated uint32 stride = 6;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(6, this->stride_, target);

// optional .caffe.FillerParameter weight_filler = 7;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
7, *this->weight_filler_, deterministic, target);
}

// optional .caffe.FillerParameter bias_filler = 8;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
8, *this->bias_filler_, deterministic, target);
}

// optional uint32 pad_h = 9 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
}

// optional uint32 pad_w = 10 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
}

// optional uint32 kernel_h = 11;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
}

// optional uint32 kernel_w = 12;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
}

// optional uint32 stride_h = 13;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
}

// optional uint32 stride_w = 14;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
15, this->engine(), target);
}

// optional int32 axis = 16 [default = 1];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
}

// optional bool force_nd_im2col = 17 [default = false];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
}

// repeated uint32 dilation = 18;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(18, this->dilation_, target);

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated uint32 pad = 3;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->pad_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->pad_size());
total_size += data_size;
}

// repeated uint32 kernel_size = 4;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->kernel_size_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->kernel_size_size());
total_size += data_size;
}

// repeated uint32 stride = 6;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->stride_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->stride_size());
total_size += data_size;
}

// repeated uint32 dilation = 18;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->dilation_);
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->dilation_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional .caffe.FillerParameter weight_filler = 7;
if (has_weight_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->weight_filler_);
}

// optional .caffe.FillerParameter bias_filler = 8;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional uint32 num_output = 1;
if (has_num_output()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num_output());
}

// optional uint32 pad_h = 9 [default = 0];
if (has_pad_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad_h());
}

// optional uint32 pad_w = 10 [default = 0];
if (has_pad_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad_w());
}

// optional uint32 kernel_h = 11;
if (has_kernel_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_h());
}

// optional uint32 kernel_w = 12;
if (has_kernel_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_w());
}

// optional uint32 stride_h = 13;
if (has_stride_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_h());
}

}
if (_has_bits_[8 / 32] & 16128u) {
// optional uint32 stride_w = 14;
if (has_stride_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_w());
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

// optional bool force_nd_im2col = 17 [default = false];
if (has_force_nd_im2col()) {
total_size += 2 + 1;
}

// optional int32 axis = 16 [default = 1];
if (has_axis()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional bool bias_term = 2 [default = true];
if (has_bias_term()) {
total_size += 1 + 1;
}

// optional uint32 group = 5 [default = 1];
if (has_group()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->group());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
GOOGLE_DCHECK_NE(&from, this);
const ConvolutionParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
MergeFrom(*source);
}
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

pad_.MergeFrom(from.pad_);
kernel_size_.MergeFrom(from.kernel_size_);
stride_.MergeFrom(from.stride_);
dilation_.MergeFrom(from.dilation_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
}
if (cached_has_bits & 0x00000002u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000004u) {
num_output_ = from.num_output_;
}
if (cached_has_bits & 0x00000008u) {
pad_h_ = from.pad_h_;
}
if (cached_has_bits & 0x00000010u) {
pad_w_ = from.pad_w_;
}
if (cached_has_bits & 0x00000020u) {
kernel_h_ = from.kernel_h_;
}
if (cached_has_bits & 0x00000040u) {
kernel_w_ = from.kernel_w_;
}
if (cached_has_bits & 0x00000080u) {
stride_h_ = from.stride_h_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 16128u) {
if (cached_has_bits & 0x00000100u) {
stride_w_ = from.stride_w_;
}
if (cached_has_bits & 0x00000200u) {
engine_ = from.engine_;
}
if (cached_has_bits & 0x00000400u) {
force_nd_im2col_ = from.force_nd_im2col_;
}
if (cached_has_bits & 0x00000800u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00001000u) {
bias_term_ = from.bias_term_;
}
if (cached_has_bits & 0x00002000u) {
group_ = from.group_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
using std::swap;
pad_.InternalSwap(&other->pad_);
kernel_size_.InternalSwap(&other->kernel_size_);
stride_.InternalSwap(&other->stride_);
dilation_.InternalSwap(&other->dilation_);
swap(weight_filler_, other->weight_filler_);
swap(bias_filler_, other->bias_filler_);
swap(num_output_, other->num_output_);
swap(pad_h_, other->pad_h_);
swap(pad_w_, other->pad_w_);
swap(kernel_h_, other->kernel_h_);
swap(kernel_w_, other->kernel_w_);
swap(stride_h_, other->stride_h_);
swap(stride_w_, other->stride_w_);
swap(engine_, other->engine_);
swap(force_nd_im2col_, other->force_nd_im2col_);
swap(axis_, other->axis_);
swap(bias_term_, other->bias_term_);
swap(group_, other->group_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CropParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropParameter::kAxisFieldNumber;
const int CropParameter::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropParameter::CropParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsCropParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.CropParameter)
}
CropParameter::CropParameter(const CropParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
offset_(from.offset_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
axis_ = from.axis_;
// @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
_cached_size_ = 0;
axis_ = 2;
}

CropParameter::~CropParameter() {
// @@protoc_insertion_point(destructor:caffe.CropParameter)
SharedDtor();
}

void CropParameter::SharedDtor() {
}

void CropParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CropParameter& CropParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsCropParameter();
return *internal_default_instance();
}

CropParameter* CropParameter::New(::google::protobuf::Arena* arena) const {
CropParameter* n = new CropParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CropParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

offset_.Clear();
axis_ = 2;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool CropParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.CropParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 axis = 1 [default = 2];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 offset = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 16u, input, this->mutable_offset())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_offset())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.CropParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.CropParameter)
return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.CropParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 2];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
}

// repeated uint32 offset = 2;
for (int i = 0, n = this->offset_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
2, this->offset(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 2];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
}

// repeated uint32 offset = 2;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(2, this->offset_, target);

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CropParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated uint32 offset = 2;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->offset_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->offset_size());
total_size += data_size;
}

// optional int32 axis = 1 [default = 2];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CropParameter)
GOOGLE_DCHECK_NE(&from, this);
const CropParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const CropParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CropParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CropParameter)
MergeFrom(*source);
}
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CropParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

offset_.MergeFrom(from.offset_);
if (from.has_axis()) {
set_axis(from.axis());
}
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CropParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CropParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
return true;
}

void CropParameter::Swap(CropParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void CropParameter::InternalSwap(CropParameter* other) {
using std::swap;
offset_.InternalSwap(&other->offset_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
const int DataParameter::kDiskReaderThreadsFieldNumber;
const int DataParameter::kHugeVideoDatasetFieldNumber;
const int DataParameter::kLimitSamplesFieldNumber;
const int DataParameter::kPreselectionFileFieldNumber;
const int DataParameter::kPreselectionLabelFieldNumber;
const int DataParameter::kRangeStartFieldNumber;
const int DataParameter::kRangeEndFieldNumber;
const int DataParameter::kRandPermuteFieldNumber;
const int DataParameter::kRandPermuteOrderFieldNumber;
const int DataParameter::kRandPermuteSeedFieldNumber;
const int DataParameter::kSlicePointFieldNumber;
const int DataParameter::kEncodingFieldNumber;
const int DataParameter::kVerboseFieldNumber;
const int DataParameter::kSubtractFieldNumber;
const int DataParameter::kPermuteEveryIterFieldNumber;
const int DataParameter::kBlockSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsDataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
slice_point_(from.slice_point_),
encoding_(from.encoding_),
subtract_(from.subtract_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_mean_file()) {
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
preselection_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_preselection_file()) {
preselection_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preselection_file_);
}
::memcpy(&crop_size_, &from.crop_size_,
static_cast<size_t>(reinterpret_cast<char*>(&limit_samples_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(limit_samples_));
// @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
_cached_size_ = 0;
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
preselection_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&permute_every_iter_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(permute_every_iter_));
scale_ = 1;
batch_size_ = 1u;
prefetch_ = 4u;
range_end_ = -1;
disk_reader_threads_ = 1u;
limit_samples_ = -1;
}

DataParameter::~DataParameter() {
// @@protoc_insertion_point(destructor:caffe.DataParameter)
SharedDtor();
}

void DataParameter::SharedDtor() {
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
preselection_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataParameter& DataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsDataParameter();
return *internal_default_instance();
}

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
DataParameter* n = new DataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

slice_point_.Clear();
encoding_.Clear();
subtract_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*mean_file_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!preselection_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*preselection_file_.UnsafeRawStringPointer())->clear();
}
}
if (cached_has_bits & 248u) {
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&mirror_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(mirror_));
}
if (cached_has_bits & 65280u) {
::memset(&force_encoded_color_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&verbose_) -
reinterpret_cast<char*>(&force_encoded_color_)) + sizeof(verbose_));
}
if (cached_has_bits & 8323072u) {
permute_every_iter_ = 0u;
scale_ = 1;
batch_size_ = 1u;
prefetch_ = 4u;
range_end_ = -1;
disk_reader_threads_ = 1u;
limit_samples_ = -1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool DataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.DataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(56008u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string source = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.DataParameter.source");
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional string mean_file = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_mean_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.DataParameter.mean_file");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 batch_size = 4 [default = 1];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_batch_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batch_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_size = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_crop_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool mirror = 6 [default = false];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 rand_skip = 7 [default = 0];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_rand_skip();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &rand_skip_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::DataParameter_DB_IsValid(value)) {
set_backend(static_cast< ::caffe::DataParameter_DB >(value));
} else {
mutable_unknown_fields()->AddVarint(
8, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional bool force_encoded_color = 9 [default = false];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
set_has_force_encoded_color();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &force_encoded_color_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 prefetch = 10 [default = 4];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_prefetch();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &prefetch_)));
} else {
goto handle_unusual;
}
break;
}

// optional string preselection_file = 3001;
case 3001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 24010 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_preselection_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->preselection_file().data(), static_cast<int>(this->preselection_file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.DataParameter.preselection_file");
} else {
goto handle_unusual;
}
break;
}

// optional int32 preselection_label = 3002;
case 3002: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(208u /* 24016 & 0xFF */)) {
set_has_preselection_label();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &preselection_label_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 range_start = 3003 [default = 0];
case 3003: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(216u /* 24024 & 0xFF */)) {
set_has_range_start();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &range_start_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 range_end = 3004 [default = -1];
case 3004: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(224u /* 24032 & 0xFF */)) {
set_has_range_end();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &range_end_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool rand_permute = 3005 [default = false];
case 3005: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(232u /* 24040 & 0xFF */)) {
set_has_rand_permute();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &rand_permute_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DataParameter.RANDPERMORDER rand_permute_order = 3006 [default = FIRST_PERMUTE_THEN_RANGE];
case 3006: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(240u /* 24048 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::DataParameter_RANDPERMORDER_IsValid(value)) {
set_rand_permute_order(static_cast< ::caffe::DataParameter_RANDPERMORDER >(value));
} else {
mutable_unknown_fields()->AddVarint(
3006, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional uint32 rand_permute_seed = 3007 [default = 0];
case 3007: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(248u /* 24056 & 0xFF */)) {
set_has_rand_permute_seed();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &rand_permute_seed_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 slice_point = 3008;
case 3008: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(0u /* 24064 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
3, 24064u, input, this->mutable_slice_point())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(2u /* 24066 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_slice_point())));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.DataParameter.CHANNELENCODING encoding = 3009;
case 3009: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 24072 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::DataParameter_CHANNELENCODING_IsValid(value)) {
add_encoding(static_cast< ::caffe::DataParameter_CHANNELENCODING >(value));
} else {
mutable_unknown_fields()->AddVarint(
3009, static_cast< ::google::protobuf::uint64>(value));
}
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 24074 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
input,
3009,
::caffe::DataParameter_CHANNELENCODING_IsValid,
mutable_unknown_fields(),
this->mutable_encoding())));
} else {
goto handle_unusual;
}
break;
}

// optional bool verbose = 3010 [default = false];
case 3010: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 24080 & 0xFF */)) {
set_has_verbose();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &verbose_)));
} else {
goto handle_unusual;
}
break;
}

// repeated float subtract = 3011;
case 3011: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 24093 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
3, 24093u, input, this->mutable_subtract())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 24090 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_subtract())));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 permute_every_iter = 3012 [default = 0];
case 3012: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 24096 & 0xFF */)) {
set_has_permute_every_iter();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &permute_every_iter_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 block_size = 3013 [default = 0];
case 3013: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 24104 & 0xFF */)) {
set_has_block_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &block_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 disk_reader_threads = 4001 [default = 1];
case 4001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 32008 & 0xFF */)) {
set_has_disk_reader_threads();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &disk_reader_threads_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool huge_video_dataset = 7000 [default = false];
case 7000: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(192u /* 56000 & 0xFF */)) {
set_has_huge_video_dataset();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &huge_video_dataset_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 limit_samples = 7001 [default = -1];
case 7001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(200u /* 56008 & 0xFF */)) {
set_has_limit_samples();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &limit_samples_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.DataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.DataParameter)
return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->source(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.mean_file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3, this->mean_file(), output);
}

// optional uint32 batch_size = 4 [default = 1];
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
}

// optional uint32 rand_skip = 7 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
8, this->backend(), output);
}

// optional bool force_encoded_color = 9 [default = false];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
}

// optional uint32 prefetch = 10 [default = 4];
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
}

// optional string preselection_file = 3001;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->preselection_file().data(), static_cast<int>(this->preselection_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.preselection_file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3001, this->preselection_file(), output);
}

// optional int32 preselection_label = 3002;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3002, this->preselection_label(), output);
}

// optional int32 range_start = 3003 [default = 0];
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3003, this->range_start(), output);
}

// optional int32 range_end = 3004 [default = -1];
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3004, this->range_end(), output);
}

// optional bool rand_permute = 3005 [default = false];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3005, this->rand_permute(), output);
}

// optional .caffe.DataParameter.RANDPERMORDER rand_permute_order = 3006 [default = FIRST_PERMUTE_THEN_RANGE];
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
3006, this->rand_permute_order(), output);
}

// optional uint32 rand_permute_seed = 3007 [default = 0];
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3007, this->rand_permute_seed(), output);
}

// repeated uint32 slice_point = 3008;
for (int i = 0, n = this->slice_point_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
3008, this->slice_point(i), output);
}

// repeated .caffe.DataParameter.CHANNELENCODING encoding = 3009;
for (int i = 0, n = this->encoding_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
3009, this->encoding(i), output);
}

// optional bool verbose = 3010 [default = false];
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3010, this->verbose(), output);
}

// repeated float subtract = 3011;
for (int i = 0, n = this->subtract_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
3011, this->subtract(i), output);
}

// optional uint32 permute_every_iter = 3012 [default = 0];
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3012, this->permute_every_iter(), output);
}

// optional uint32 block_size = 3013 [default = 0];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3013, this->block_size(), output);
}

// optional uint32 disk_reader_threads = 4001 [default = 1];
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4001, this->disk_reader_threads(), output);
}

// optional bool huge_video_dataset = 7000 [default = false];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteBool(7000, this->huge_video_dataset(), output);
}

// optional int32 limit_samples = 7001 [default = -1];
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(7001, this->limit_samples(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->source(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.mean_file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3, this->mean_file(), target);
}

// optional uint32 batch_size = 4 [default = 1];
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
}

// optional uint32 rand_skip = 7 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
8, this->backend(), target);
}

// optional bool force_encoded_color = 9 [default = false];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
}

// optional uint32 prefetch = 10 [default = 4];
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
}

// optional string preselection_file = 3001;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->preselection_file().data(), static_cast<int>(this->preselection_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.DataParameter.preselection_file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3001, this->preselection_file(), target);
}

// optional int32 preselection_label = 3002;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3002, this->preselection_label(), target);
}

// optional int32 range_start = 3003 [default = 0];
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3003, this->range_start(), target);
}

// optional int32 range_end = 3004 [default = -1];
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3004, this->range_end(), target);
}

// optional bool rand_permute = 3005 [default = false];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3005, this->rand_permute(), target);
}

// optional .caffe.DataParameter.RANDPERMORDER rand_permute_order = 3006 [default = FIRST_PERMUTE_THEN_RANGE];
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
3006, this->rand_permute_order(), target);
}

// optional uint32 rand_permute_seed = 3007 [default = 0];
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3007, this->rand_permute_seed(), target);
}

// repeated uint32 slice_point = 3008;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(3008, this->slice_point_, target);

// repeated .caffe.DataParameter.CHANNELENCODING encoding = 3009;
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
3009, this->encoding_, target);

// optional bool verbose = 3010 [default = false];
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3010, this->verbose(), target);
}

// repeated float subtract = 3011;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(3011, this->subtract_, target);

// optional uint32 permute_every_iter = 3012 [default = 0];
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3012, this->permute_every_iter(), target);
}

// optional uint32 block_size = 3013 [default = 0];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3013, this->block_size(), target);
}

// optional uint32 disk_reader_threads = 4001 [default = 1];
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4001, this->disk_reader_threads(), target);
}

// optional bool huge_video_dataset = 7000 [default = false];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7000, this->huge_video_dataset(), target);
}

// optional int32 limit_samples = 7001 [default = -1];
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7001, this->limit_samples(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated uint32 slice_point = 3008;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->slice_point_);
total_size += 3 *
::google::protobuf::internal::FromIntSize(this->slice_point_size());
total_size += data_size;
}

// repeated .caffe.DataParameter.CHANNELENCODING encoding = 3009;
{
size_t data_size = 0;
unsigned int count = static_cast<unsigned int>(this->encoding_size());for (unsigned int i = 0; i < count; i++) {
data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
this->encoding(static_cast<int>(i)));
}
total_size += (3UL * count) + data_size;
}

// repeated float subtract = 3011;
{
unsigned int count = static_cast<unsigned int>(this->subtract_size());
size_t data_size = 4UL * count;
total_size += 3 *
::google::protobuf::internal::FromIntSize(this->subtract_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string source = 1;
if (has_source()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

// optional string mean_file = 3;
if (has_mean_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->mean_file());
}

// optional string preselection_file = 3001;
if (has_preselection_file()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->preselection_file());
}

// optional uint32 crop_size = 5 [default = 0];
if (has_crop_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_size());
}

// optional uint32 rand_skip = 7 [default = 0];
if (has_rand_skip()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->rand_skip());
}

// optional uint32 block_size = 3013 [default = 0];
if (has_block_size()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->block_size());
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
if (has_backend()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
}

// optional bool mirror = 6 [default = false];
if (has_mirror()) {
total_size += 1 + 1;
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional bool force_encoded_color = 9 [default = false];
if (has_force_encoded_color()) {
total_size += 1 + 1;
}

// optional bool huge_video_dataset = 7000 [default = false];
if (has_huge_video_dataset()) {
total_size += 3 + 1;
}

// optional bool rand_permute = 3005 [default = false];
if (has_rand_permute()) {
total_size += 3 + 1;
}

// optional int32 preselection_label = 3002;
if (has_preselection_label()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->preselection_label());
}

// optional int32 range_start = 3003 [default = 0];
if (has_range_start()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->range_start());
}

// optional .caffe.DataParameter.RANDPERMORDER rand_permute_order = 3006 [default = FIRST_PERMUTE_THEN_RANGE];
if (has_rand_permute_order()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->rand_permute_order());
}

// optional uint32 rand_permute_seed = 3007 [default = 0];
if (has_rand_permute_seed()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->rand_permute_seed());
}

// optional bool verbose = 3010 [default = false];
if (has_verbose()) {
total_size += 3 + 1;
}

}
if (_has_bits_[16 / 32] & 8323072u) {
// optional uint32 permute_every_iter = 3012 [default = 0];
if (has_permute_every_iter()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->permute_every_iter());
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

// optional uint32 batch_size = 4 [default = 1];
if (has_batch_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batch_size());
}

// optional uint32 prefetch = 10 [default = 4];
if (has_prefetch()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->prefetch());
}

// optional int32 range_end = 3004 [default = -1];
if (has_range_end()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->range_end());
}

// optional uint32 disk_reader_threads = 4001 [default = 1];
if (has_disk_reader_threads()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->disk_reader_threads());
}

// optional int32 limit_samples = 7001 [default = -1];
if (has_limit_samples()) {
total_size += 3 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->limit_samples());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
GOOGLE_DCHECK_NE(&from, this);
const DataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
MergeFrom(*source);
}
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

slice_point_.MergeFrom(from.slice_point_);
encoding_.MergeFrom(from.encoding_);
subtract_.MergeFrom(from.subtract_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
if (cached_has_bits & 0x00000002u) {
set_has_mean_file();
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
if (cached_has_bits & 0x00000004u) {
set_has_preselection_file();
preselection_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preselection_file_);
}
if (cached_has_bits & 0x00000008u) {
crop_size_ = from.crop_size_;
}
if (cached_has_bits & 0x00000010u) {
rand_skip_ = from.rand_skip_;
}
if (cached_has_bits & 0x00000020u) {
block_size_ = from.block_size_;
}
if (cached_has_bits & 0x00000040u) {
backend_ = from.backend_;
}
if (cached_has_bits & 0x00000080u) {
mirror_ = from.mirror_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
force_encoded_color_ = from.force_encoded_color_;
}
if (cached_has_bits & 0x00000200u) {
huge_video_dataset_ = from.huge_video_dataset_;
}
if (cached_has_bits & 0x00000400u) {
rand_permute_ = from.rand_permute_;
}
if (cached_has_bits & 0x00000800u) {
preselection_label_ = from.preselection_label_;
}
if (cached_has_bits & 0x00001000u) {
range_start_ = from.range_start_;
}
if (cached_has_bits & 0x00002000u) {
rand_permute_order_ = from.rand_permute_order_;
}
if (cached_has_bits & 0x00004000u) {
rand_permute_seed_ = from.rand_permute_seed_;
}
if (cached_has_bits & 0x00008000u) {
verbose_ = from.verbose_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 8323072u) {
if (cached_has_bits & 0x00010000u) {
permute_every_iter_ = from.permute_every_iter_;
}
if (cached_has_bits & 0x00020000u) {
scale_ = from.scale_;
}
if (cached_has_bits & 0x00040000u) {
batch_size_ = from.batch_size_;
}
if (cached_has_bits & 0x00080000u) {
prefetch_ = from.prefetch_;
}
if (cached_has_bits & 0x00100000u) {
range_end_ = from.range_end_;
}
if (cached_has_bits & 0x00200000u) {
disk_reader_threads_ = from.disk_reader_threads_;
}
if (cached_has_bits & 0x00400000u) {
limit_samples_ = from.limit_samples_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
return true;
}

void DataParameter::Swap(DataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
using std::swap;
slice_point_.InternalSwap(&other->slice_point_);
encoding_.InternalSwap(&other->encoding_);
subtract_.InternalSwap(&other->subtract_);
source_.Swap(&other->source_);
mean_file_.Swap(&other->mean_file_);
preselection_file_.Swap(&other->preselection_file_);
swap(crop_size_, other->crop_size_);
swap(rand_skip_, other->rand_skip_);
swap(block_size_, other->block_size_);
swap(backend_, other->backend_);
swap(mirror_, other->mirror_);
swap(force_encoded_color_, other->force_encoded_color_);
swap(huge_video_dataset_, other->huge_video_dataset_);
swap(rand_permute_, other->rand_permute_);
swap(preselection_label_, other->preselection_label_);
swap(range_start_, other->range_start_);
swap(rand_permute_order_, other->rand_permute_order_);
swap(rand_permute_seed_, other->rand_permute_seed_);
swap(verbose_, other->verbose_);
swap(permute_every_iter_, other->permute_every_iter_);
swap(scale_, other->scale_);
swap(batch_size_, other->batch_size_);
swap(prefetch_, other->prefetch_);
swap(range_end_, other->range_end_);
swap(disk_reader_threads_, other->disk_reader_threads_);
swap(limit_samples_, other->limit_samples_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropoutParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsDropoutParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
dropout_ratio_ = from.dropout_ratio_;
// @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
_cached_size_ = 0;
dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
// @@protoc_insertion_point(destructor:caffe.DropoutParameter)
SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropoutParameter& DropoutParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsDropoutParameter();
return *internal_default_instance();
}

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
DropoutParameter* n = new DropoutParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

dropout_ratio_ = 0.5f;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float dropout_ratio = 1 [default = 0.5];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_dropout_ratio();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &dropout_ratio_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float dropout_ratio = 1 [default = 0.5];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float dropout_ratio = 1 [default = 0.5];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional float dropout_ratio = 1 [default = 0.5];
if (has_dropout_ratio()) {
total_size += 1 + 4;
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
GOOGLE_DCHECK_NE(&from, this);
const DropoutParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
MergeFrom(*source);
}
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_dropout_ratio()) {
set_dropout_ratio(from.dropout_ratio());
}
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
using std::swap;
swap(dropout_ratio_, other->dropout_ratio_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DummyDataParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DummyDataParameter::DummyDataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsDummyDataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}
DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
data_filler_(from.data_filler_),
num_(from.num_),
channels_(from.channels_),
height_(from.height_),
width_(from.width_),
shape_(from.shape_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
// @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
_cached_size_ = 0;
}

DummyDataParameter::~DummyDataParameter() {
// @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
SharedDtor();
}

void DummyDataParameter::SharedDtor() {
}

void DummyDataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsDummyDataParameter();
return *internal_default_instance();
}

DummyDataParameter* DummyDataParameter::New(::google::protobuf::Arena* arena) const {
DummyDataParameter* n = new DummyDataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DummyDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

data_filler_.Clear();
num_.Clear();
channels_.Clear();
height_.Clear();
width_.Clear();
shape_.Clear();
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool DummyDataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// repeated .caffe.FillerParameter data_filler = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_filler()));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 num = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 16u, input, this->mutable_num())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_num())));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 channels = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 24u, input, this->mutable_channels())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_channels())));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 height = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 32u, input, this->mutable_height())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_height())));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 width = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 40u, input, this->mutable_width())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_width())));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobShape shape = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_shape()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.FillerParameter data_filler = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->data_filler_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, this->data_filler(static_cast<int>(i)), output);
}

// repeated uint32 num = 2;
for (int i = 0, n = this->num_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
2, this->num(i), output);
}

// repeated uint32 channels = 3;
for (int i = 0, n = this->channels_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
3, this->channels(i), output);
}

// repeated uint32 height = 4;
for (int i = 0, n = this->height_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
4, this->height(i), output);
}

// repeated uint32 width = 5;
for (int i = 0, n = this->width_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
5, this->width(i), output);
}

// repeated .caffe.BlobShape shape = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
6, this->shape(static_cast<int>(i)), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.FillerParameter data_filler = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->data_filler_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, this->data_filler(static_cast<int>(i)), deterministic, target);
}

// repeated uint32 num = 2;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(2, this->num_, target);

// repeated uint32 channels = 3;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(3, this->channels_, target);

// repeated uint32 height = 4;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(4, this->height_, target);

// repeated uint32 width = 5;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(5, this->width_, target);

// repeated .caffe.BlobShape shape = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
6, this->shape(static_cast<int>(i)), deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DummyDataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.FillerParameter data_filler = 1;
{
unsigned int count = static_cast<unsigned int>(this->data_filler_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->data_filler(static_cast<int>(i)));
}
}

// repeated uint32 num = 2;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->num_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->num_size());
total_size += data_size;
}

// repeated uint32 channels = 3;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->channels_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->channels_size());
total_size += data_size;
}

// repeated uint32 height = 4;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->height_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->height_size());
total_size += data_size;
}

// repeated uint32 width = 5;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->width_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->width_size());
total_size += data_size;
}

// repeated .caffe.BlobShape shape = 6;
{
unsigned int count = static_cast<unsigned int>(this->shape_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->shape(static_cast<int>(i)));
}
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DummyDataParameter)
GOOGLE_DCHECK_NE(&from, this);
const DummyDataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const DummyDataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DummyDataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DummyDataParameter)
MergeFrom(*source);
}
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DummyDataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

data_filler_.MergeFrom(from.data_filler_);
num_.MergeFrom(from.num_);
channels_.MergeFrom(from.channels_);
height_.MergeFrom(from.height_);
width_.MergeFrom(from.width_);
shape_.MergeFrom(from.shape_);
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DummyDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DummyDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {
return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
using std::swap;
data_filler_.InternalSwap(&other->data_filler_);
num_.InternalSwap(&other->num_);
channels_.InternalSwap(&other->channels_);
height_.InternalSwap(&other->height_);
width_.InternalSwap(&other->width_);
shape_.InternalSwap(&other->shape_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EltwiseParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsEltwiseParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
coeff_(from.coeff_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&operation_, &from.operation_,
static_cast<size_t>(reinterpret_cast<char*>(&stable_prod_grad_) -
reinterpret_cast<char*>(&operation_)) + sizeof(stable_prod_grad_));
// @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
_cached_size_ = 0;
operation_ = 1;
stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
// @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
SharedDtor();
}

void EltwiseParameter::SharedDtor() {
}

void EltwiseParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsEltwiseParameter();
return *internal_default_instance();
}

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
EltwiseParameter* n = new EltwiseParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

coeff_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
operation_ = 1;
stable_prod_grad_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool EltwiseParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// repeated float coeff = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 21u, input, this->mutable_coeff())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_coeff())));
} else {
goto handle_unusual;
}
break;
}

// optional bool stable_prod_grad = 3 [default = true];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_stable_prod_grad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &stable_prod_grad_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->operation(), output);
}

// repeated float coeff = 2;
for (int i = 0, n = this->coeff_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
2, this->coeff(i), output);
}

// optional bool stable_prod_grad = 3 [default = true];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->operation(), target);
}

// repeated float coeff = 2;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(2, this->coeff_, target);

// optional bool stable_prod_grad = 3 [default = true];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated float coeff = 2;
{
unsigned int count = static_cast<unsigned int>(this->coeff_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->coeff_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 3u) {
// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
if (has_operation()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
}

// optional bool stable_prod_grad = 3 [default = true];
if (has_stable_prod_grad()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
GOOGLE_DCHECK_NE(&from, this);
const EltwiseParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
MergeFrom(*source);
}
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

coeff_.MergeFrom(from.coeff_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
operation_ = from.operation_;
}
if (cached_has_bits & 0x00000002u) {
stable_prod_grad_ = from.stable_prod_grad_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
using std::swap;
coeff_.InternalSwap(&other->coeff_);
swap(operation_, other->operation_);
swap(stable_prod_grad_, other->stable_prod_grad_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ELUParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ELUParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ELUParameter::ELUParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsELUParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ELUParameter)
}
ELUParameter::ELUParameter(const ELUParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
alpha_ = from.alpha_;
// @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
_cached_size_ = 0;
alpha_ = 1;
}

ELUParameter::~ELUParameter() {
// @@protoc_insertion_point(destructor:caffe.ELUParameter)
SharedDtor();
}

void ELUParameter::SharedDtor() {
}

void ELUParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ELUParameter& ELUParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsELUParameter();
return *internal_default_instance();
}

ELUParameter* ELUParameter::New(::google::protobuf::Arena* arena) const {
ELUParameter* n = new ELUParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ELUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

alpha_ = 1;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ELUParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ELUParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float alpha = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_alpha();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &alpha_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ELUParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float alpha = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float alpha = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ELUParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional float alpha = 1 [default = 1];
if (has_alpha()) {
total_size += 1 + 4;
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ELUParameter)
GOOGLE_DCHECK_NE(&from, this);
const ELUParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ELUParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ELUParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ELUParameter)
MergeFrom(*source);
}
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ELUParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_alpha()) {
set_alpha(from.alpha());
}
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ELUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ELUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {
return true;
}

void ELUParameter::Swap(ELUParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ELUParameter::InternalSwap(ELUParameter* other) {
using std::swap;
swap(alpha_, other->alpha_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmbedParameter::InitAsDefaultInstance() {
::caffe::_EmbedParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_EmbedParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedParameter::EmbedParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsEmbedParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}
EmbedParameter::EmbedParameter(const EmbedParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_weight_filler()) {
weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
} else {
weight_filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
::memcpy(&num_output_, &from.num_output_,
static_cast<size_t>(reinterpret_cast<char*>(&bias_term_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(bias_term_));
// @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&weight_filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&input_dim_) -
reinterpret_cast<char*>(&weight_filler_)) + sizeof(input_dim_));
bias_term_ = true;
}

EmbedParameter::~EmbedParameter() {
// @@protoc_insertion_point(destructor:caffe.EmbedParameter)
SharedDtor();
}

void EmbedParameter::SharedDtor() {
if (this != internal_default_instance()) delete weight_filler_;
if (this != internal_default_instance()) delete bias_filler_;
}

void EmbedParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedParameter& EmbedParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsEmbedParameter();
return *internal_default_instance();
}

EmbedParameter* EmbedParameter::New(::google::protobuf::Arena* arena) const {
EmbedParameter* n = new EmbedParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EmbedParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(weight_filler_ != NULL);
weight_filler_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
}
if (cached_has_bits & 28u) {
::memset(&num_output_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&input_dim_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(input_dim_));
bias_term_ = true;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool EmbedParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 num_output = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_num_output();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_output_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 input_dim = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_input_dim();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &input_dim_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool bias_term = 3 [default = true];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_bias_term();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &bias_term_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter weight_filler = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_weight_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
}

// optional uint32 input_dim = 2;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
}

// optional bool bias_term = 3 [default = true];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
}

// optional .caffe.FillerParameter weight_filler = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
4, *this->weight_filler_, output);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
5, *this->bias_filler_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
}

// optional uint32 input_dim = 2;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
}

// optional bool bias_term = 3 [default = true];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
}

// optional .caffe.FillerParameter weight_filler = 4;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
4, *this->weight_filler_, deterministic, target);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
5, *this->bias_filler_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EmbedParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 31u) {
// optional .caffe.FillerParameter weight_filler = 4;
if (has_weight_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->weight_filler_);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional uint32 num_output = 1;
if (has_num_output()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num_output());
}

// optional uint32 input_dim = 2;
if (has_input_dim()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->input_dim());
}

// optional bool bias_term = 3 [default = true];
if (has_bias_term()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EmbedParameter)
GOOGLE_DCHECK_NE(&from, this);
const EmbedParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const EmbedParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EmbedParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EmbedParameter)
MergeFrom(*source);
}
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EmbedParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
}
if (cached_has_bits & 0x00000002u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000004u) {
num_output_ = from.num_output_;
}
if (cached_has_bits & 0x00000008u) {
input_dim_ = from.input_dim_;
}
if (cached_has_bits & 0x00000010u) {
bias_term_ = from.bias_term_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EmbedParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EmbedParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {
return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void EmbedParameter::InternalSwap(EmbedParameter* other) {
using std::swap;
swap(weight_filler_, other->weight_filler_);
swap(bias_filler_, other->bias_filler_);
swap(num_output_, other->num_output_);
swap(input_dim_, other->input_dim_);
swap(bias_term_, other->bias_term_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExpParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParameter::ExpParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsExpParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ExpParameter)
}
ExpParameter::ExpParameter(const ExpParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&shift_, &from.shift_,
static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
// @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
_cached_size_ = 0;
shift_ = 0;
base_ = -1;
scale_ = 1;
}

ExpParameter::~ExpParameter() {
// @@protoc_insertion_point(destructor:caffe.ExpParameter)
SharedDtor();
}

void ExpParameter::SharedDtor() {
}

void ExpParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExpParameter& ExpParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsExpParameter();
return *internal_default_instance();
}

ExpParameter* ExpParameter::New(::google::protobuf::Arena* arena) const {
ExpParameter* n = new ExpParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
shift_ = 0;
base_ = -1;
scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ExpParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ExpParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float base = 1 [default = -1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_base();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &base_)));
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shift = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_shift();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shift_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ExpParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float base = 1 [default = -1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float base = 1 [default = -1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional float shift = 3 [default = 0];
if (has_shift()) {
total_size += 1 + 4;
}

// optional float base = 1 [default = -1];
if (has_base()) {
total_size += 1 + 4;
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpParameter)
GOOGLE_DCHECK_NE(&from, this);
const ExpParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ExpParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpParameter)
MergeFrom(*source);
}
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
shift_ = from.shift_;
}
if (cached_has_bits & 0x00000002u) {
base_ = from.base_;
}
if (cached_has_bits & 0x00000004u) {
scale_ = from.scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
return true;
}

void ExpParameter::Swap(ExpParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ExpParameter::InternalSwap(ExpParameter* other) {
using std::swap;
swap(shift_, other->shift_);
swap(base_, other->base_);
swap(scale_, other->scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlattenParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlattenParameter::FlattenParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsFlattenParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&axis_, &from.axis_,
static_cast<size_t>(reinterpret_cast<char*>(&end_axis_) -
reinterpret_cast<char*>(&axis_)) + sizeof(end_axis_));
// @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
_cached_size_ = 0;
axis_ = 1;
end_axis_ = -1;
}

FlattenParameter::~FlattenParameter() {
// @@protoc_insertion_point(destructor:caffe.FlattenParameter)
SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlattenParameter& FlattenParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsFlattenParameter();
return *internal_default_instance();
}

FlattenParameter* FlattenParameter::New(::google::protobuf::Arena* arena) const {
FlattenParameter* n = new FlattenParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlattenParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
axis_ = 1;
end_axis_ = -1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool FlattenParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 axis = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 end_axis = 2 [default = -1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_end_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &end_axis_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
}

// optional int32 end_axis = 2 [default = -1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
}

// optional int32 end_axis = 2 [default = -1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlattenParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional int32 axis = 1 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional int32 end_axis = 2 [default = -1];
if (has_end_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->end_axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlattenParameter)
GOOGLE_DCHECK_NE(&from, this);
const FlattenParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const FlattenParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlattenParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlattenParameter)
MergeFrom(*source);
}
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlattenParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000002u) {
end_axis_ = from.end_axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlattenParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlattenParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void FlattenParameter::InternalSwap(FlattenParameter* other) {
using std::swap;
swap(axis_, other->axis_);
swap(end_axis_, other->end_axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HDF5DataParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5DataParameter::HDF5DataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsHDF5DataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}
HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
::memcpy(&batch_size_, &from.batch_size_,
static_cast<size_t>(reinterpret_cast<char*>(&shuffle_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
// @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
_cached_size_ = 0;
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&shuffle_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
}

HDF5DataParameter::~HDF5DataParameter() {
// @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5DataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsHDF5DataParameter();
return *internal_default_instance();
}

HDF5DataParameter* HDF5DataParameter::New(::google::protobuf::Arena* arena) const {
HDF5DataParameter* n = new HDF5DataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 6u) {
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&shuffle_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool HDF5DataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string source = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.HDF5DataParameter.source");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 batch_size = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_batch_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batch_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool shuffle = 3 [default = false];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_shuffle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &shuffle_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.HDF5DataParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->source(), output);
}

// optional uint32 batch_size = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
}

// optional bool shuffle = 3 [default = false];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.HDF5DataParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->source(), target);
}

// optional uint32 batch_size = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
}

// optional bool shuffle = 3 [default = false];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5DataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional string source = 1;
if (has_source()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

// optional uint32 batch_size = 2;
if (has_batch_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batch_size());
}

// optional bool shuffle = 3 [default = false];
if (has_shuffle()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5DataParameter)
GOOGLE_DCHECK_NE(&from, this);
const HDF5DataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const HDF5DataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5DataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5DataParameter)
MergeFrom(*source);
}
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5DataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
if (cached_has_bits & 0x00000002u) {
batch_size_ = from.batch_size_;
}
if (cached_has_bits & 0x00000004u) {
shuffle_ = from.shuffle_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5DataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5DataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {
return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
using std::swap;
source_.Swap(&other->source_);
swap(batch_size_, other->batch_size_);
swap(shuffle_, other->shuffle_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HDF5OutputParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5OutputParameter::HDF5OutputParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsHDF5OutputParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}
HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_file_name()) {
file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
}
// @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
_cached_size_ = 0;
file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HDF5OutputParameter::~HDF5OutputParameter() {
// @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5OutputParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsHDF5OutputParameter();
return *internal_default_instance();
}

HDF5OutputParameter* HDF5OutputParameter::New(::google::protobuf::Arena* arena) const {
HDF5OutputParameter* n = new HDF5OutputParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5OutputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*file_name_.UnsafeRawStringPointer())->clear();
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string file_name = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_file_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file_name().data(), static_cast<int>(this->file_name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.HDF5OutputParameter.file_name");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string file_name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file_name().data(), static_cast<int>(this->file_name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.HDF5OutputParameter.file_name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->file_name(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string file_name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->file_name().data(), static_cast<int>(this->file_name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.HDF5OutputParameter.file_name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->file_name(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5OutputParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional string file_name = 1;
if (has_file_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->file_name());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5OutputParameter)
GOOGLE_DCHECK_NE(&from, this);
const HDF5OutputParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const HDF5OutputParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5OutputParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5OutputParameter)
MergeFrom(*source);
}
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5OutputParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_file_name()) {
set_has_file_name();
file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
}
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5OutputParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5OutputParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {
return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
using std::swap;
file_name_.Swap(&other->file_name_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HingeLossParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeLossParameter::kNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeLossParameter::HingeLossParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsHingeLossParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}
HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
norm_ = from.norm_;
// @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
_cached_size_ = 0;
norm_ = 1;
}

HingeLossParameter::~HingeLossParameter() {
// @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
SharedDtor();
}

void HingeLossParameter::SharedDtor() {
}

void HingeLossParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsHingeLossParameter();
return *internal_default_instance();
}

HingeLossParameter* HingeLossParameter::New(::google::protobuf::Arena* arena) const {
HingeLossParameter* n = new HingeLossParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HingeLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

norm_ = 1;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool HingeLossParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->norm(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->norm(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HingeLossParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
if (has_norm()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HingeLossParameter)
GOOGLE_DCHECK_NE(&from, this);
const HingeLossParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const HingeLossParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HingeLossParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HingeLossParameter)
MergeFrom(*source);
}
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HingeLossParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_norm()) {
set_norm(from.norm());
}
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HingeLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HingeLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {
return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
using std::swap;
swap(norm_, other->norm_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageDataParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataParameter::ImageDataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsImageDataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}
ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_mean_file()) {
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_root_folder()) {
root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
}
::memcpy(&crop_size_, &from.crop_size_,
static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(batch_size_));
// @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
_cached_size_ = 0;
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&new_width_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(new_width_));
is_color_ = true;
scale_ = 1;
batch_size_ = 1u;
}

ImageDataParameter::~ImageDataParameter() {
// @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
SharedDtor();
}

void ImageDataParameter::SharedDtor() {
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsImageDataParameter();
return *internal_default_instance();
}

ImageDataParameter* ImageDataParameter::New(::google::protobuf::Arena* arena) const {
ImageDataParameter* n = new ImageDataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*mean_file_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*root_folder_.UnsafeRawStringPointer())->clear();
}
}
if (cached_has_bits & 248u) {
::memset(&crop_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&new_height_) -
reinterpret_cast<char*>(&crop_size_)) + sizeof(new_height_));
}
if (cached_has_bits & 3840u) {
new_width_ = 0u;
is_color_ = true;
scale_ = 1;
batch_size_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ImageDataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string source = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.ImageDataParameter.source");
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional string mean_file = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_mean_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.ImageDataParameter.mean_file");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 batch_size = 4 [default = 1];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_batch_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batch_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_size = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_crop_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool mirror = 6 [default = false];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 rand_skip = 7 [default = 0];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_rand_skip();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &rand_skip_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool shuffle = 8 [default = false];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
set_has_shuffle();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &shuffle_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 new_height = 9 [default = 0];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
set_has_new_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &new_height_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 new_width = 10 [default = 0];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_new_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &new_width_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool is_color = 11 [default = true];
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
set_has_is_color();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &is_color_)));
} else {
goto handle_unusual;
}
break;
}

// optional string root_folder = 12 [default = ""];
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_root_folder()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.ImageDataParameter.root_folder");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->source(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.mean_file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3, this->mean_file(), output);
}

// optional uint32 batch_size = 4 [default = 1];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
}

// optional uint32 rand_skip = 7 [default = 0];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
}

// optional bool shuffle = 8 [default = false];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
}

// optional uint32 new_height = 9 [default = 0];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
}

// optional uint32 new_width = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
}

// optional bool is_color = 11 [default = true];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
}

// optional string root_folder = 12 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.root_folder");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
12, this->root_folder(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->source(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.mean_file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3, this->mean_file(), target);
}

// optional uint32 batch_size = 4 [default = 1];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
}

// optional uint32 rand_skip = 7 [default = 0];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
}

// optional bool shuffle = 8 [default = false];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
}

// optional uint32 new_height = 9 [default = 0];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
}

// optional uint32 new_width = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
}

// optional bool is_color = 11 [default = true];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
}

// optional string root_folder = 12 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.ImageDataParameter.root_folder");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
12, this->root_folder(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional string source = 1;
if (has_source()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

// optional string mean_file = 3;
if (has_mean_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->mean_file());
}

// optional string root_folder = 12 [default = ""];
if (has_root_folder()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->root_folder());
}

// optional uint32 crop_size = 5 [default = 0];
if (has_crop_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_size());
}

// optional uint32 rand_skip = 7 [default = 0];
if (has_rand_skip()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->rand_skip());
}

// optional bool shuffle = 8 [default = false];
if (has_shuffle()) {
total_size += 1 + 1;
}

// optional bool mirror = 6 [default = false];
if (has_mirror()) {
total_size += 1 + 1;
}

// optional uint32 new_height = 9 [default = 0];
if (has_new_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->new_height());
}

}
if (_has_bits_[8 / 32] & 3840u) {
// optional uint32 new_width = 10 [default = 0];
if (has_new_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->new_width());
}

// optional bool is_color = 11 [default = true];
if (has_is_color()) {
total_size += 1 + 1;
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

// optional uint32 batch_size = 4 [default = 1];
if (has_batch_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batch_size());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataParameter)
GOOGLE_DCHECK_NE(&from, this);
const ImageDataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ImageDataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataParameter)
MergeFrom(*source);
}
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
if (cached_has_bits & 0x00000002u) {
set_has_mean_file();
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
if (cached_has_bits & 0x00000004u) {
set_has_root_folder();
root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
}
if (cached_has_bits & 0x00000008u) {
crop_size_ = from.crop_size_;
}
if (cached_has_bits & 0x00000010u) {
rand_skip_ = from.rand_skip_;
}
if (cached_has_bits & 0x00000020u) {
shuffle_ = from.shuffle_;
}
if (cached_has_bits & 0x00000040u) {
mirror_ = from.mirror_;
}
if (cached_has_bits & 0x00000080u) {
new_height_ = from.new_height_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 3840u) {
if (cached_has_bits & 0x00000100u) {
new_width_ = from.new_width_;
}
if (cached_has_bits & 0x00000200u) {
is_color_ = from.is_color_;
}
if (cached_has_bits & 0x00000400u) {
scale_ = from.scale_;
}
if (cached_has_bits & 0x00000800u) {
batch_size_ = from.batch_size_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {
return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
using std::swap;
source_.Swap(&other->source_);
mean_file_.Swap(&other->mean_file_);
root_folder_.Swap(&other->root_folder_);
swap(crop_size_, other->crop_size_);
swap(rand_skip_, other->rand_skip_);
swap(shuffle_, other->shuffle_);
swap(mirror_, other->mirror_);
swap(new_height_, other->new_height_);
swap(new_width_, other->new_width_);
swap(is_color_, other->is_color_);
swap(scale_, other->scale_);
swap(batch_size_, other->batch_size_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfogainLossParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfogainLossParameter::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfogainLossParameter::InfogainLossParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsInfogainLossParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}
InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
// @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
_cached_size_ = 0;
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfogainLossParameter::~InfogainLossParameter() {
// @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfogainLossParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsInfogainLossParameter();
return *internal_default_instance();
}

InfogainLossParameter* InfogainLossParameter::New(::google::protobuf::Arena* arena) const {
InfogainLossParameter* n = new InfogainLossParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfogainLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool InfogainLossParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string source = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.InfogainLossParameter.source");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.InfogainLossParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->source(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.InfogainLossParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->source(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfogainLossParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional string source = 1;
if (has_source()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfogainLossParameter)
GOOGLE_DCHECK_NE(&from, this);
const InfogainLossParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const InfogainLossParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfogainLossParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfogainLossParameter)
MergeFrom(*source);
}
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfogainLossParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_source()) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfogainLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfogainLossParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
using std::swap;
source_.Swap(&other->source_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InnerProductParameter::InitAsDefaultInstance() {
::caffe::_InnerProductParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_InnerProductParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
const int InnerProductParameter::kTransposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsInnerProductParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_weight_filler()) {
weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
} else {
weight_filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
::memcpy(&num_output_, &from.num_output_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&weight_filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&transpose_) -
reinterpret_cast<char*>(&weight_filler_)) + sizeof(transpose_));
bias_term_ = true;
axis_ = 1;
}

InnerProductParameter::~InnerProductParameter() {
// @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
SharedDtor();
}

void InnerProductParameter::SharedDtor() {
if (this != internal_default_instance()) delete weight_filler_;
if (this != internal_default_instance()) delete bias_filler_;
}

void InnerProductParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsInnerProductParameter();
return *internal_default_instance();
}

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
InnerProductParameter* n = new InnerProductParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(weight_filler_ != NULL);
weight_filler_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
}
if (cached_has_bits & 60u) {
::memset(&num_output_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&transpose_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(transpose_));
bias_term_ = true;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 num_output = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_num_output();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_output_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool bias_term = 2 [default = true];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_bias_term();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &bias_term_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter weight_filler = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_weight_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool transpose = 6 [default = false];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_transpose();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &transpose_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
}

// optional bool bias_term = 2 [default = true];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
}

// optional .caffe.FillerParameter weight_filler = 3;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
3, *this->weight_filler_, output);
}

// optional .caffe.FillerParameter bias_filler = 4;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
4, *this->bias_filler_, output);
}

// optional int32 axis = 5 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
}

// optional bool transpose = 6 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
}

// optional bool bias_term = 2 [default = true];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
}

// optional .caffe.FillerParameter weight_filler = 3;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
3, *this->weight_filler_, deterministic, target);
}

// optional .caffe.FillerParameter bias_filler = 4;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
4, *this->bias_filler_, deterministic, target);
}

// optional int32 axis = 5 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
}

// optional bool transpose = 6 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 63u) {
// optional .caffe.FillerParameter weight_filler = 3;
if (has_weight_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->weight_filler_);
}

// optional .caffe.FillerParameter bias_filler = 4;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional uint32 num_output = 1;
if (has_num_output()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num_output());
}

// optional bool transpose = 6 [default = false];
if (has_transpose()) {
total_size += 1 + 1;
}

// optional bool bias_term = 2 [default = true];
if (has_bias_term()) {
total_size += 1 + 1;
}

// optional int32 axis = 5 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
GOOGLE_DCHECK_NE(&from, this);
const InnerProductParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
MergeFrom(*source);
}
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 63u) {
if (cached_has_bits & 0x00000001u) {
mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
}
if (cached_has_bits & 0x00000002u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000004u) {
num_output_ = from.num_output_;
}
if (cached_has_bits & 0x00000008u) {
transpose_ = from.transpose_;
}
if (cached_has_bits & 0x00000010u) {
bias_term_ = from.bias_term_;
}
if (cached_has_bits & 0x00000020u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
using std::swap;
swap(weight_filler_, other->weight_filler_);
swap(bias_filler_, other->bias_filler_);
swap(num_output_, other->num_output_);
swap(transpose_, other->transpose_);
swap(bias_term_, other->bias_term_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsInputParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
shape_(from.shape_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
// @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
_cached_size_ = 0;
}

InputParameter::~InputParameter() {
// @@protoc_insertion_point(destructor:caffe.InputParameter)
SharedDtor();
}

void InputParameter::SharedDtor() {
}

void InputParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputParameter& InputParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsInputParameter();
return *internal_default_instance();
}

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
InputParameter* n = new InputParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

shape_.Clear();
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool InputParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.InputParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// repeated .caffe.BlobShape shape = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_shape()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.InputParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.InputParameter)
return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.InputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.BlobShape shape = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, this->shape(static_cast<int>(i)), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

// repeated .caffe.BlobShape shape = 1;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, this->shape(static_cast<int>(i)), deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.BlobShape shape = 1;
{
unsigned int count = static_cast<unsigned int>(this->shape_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->shape(static_cast<int>(i)));
}
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputParameter)
GOOGLE_DCHECK_NE(&from, this);
const InputParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputParameter)
MergeFrom(*source);
}
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

shape_.MergeFrom(from.shape_);
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
return true;
}

void InputParameter::Swap(InputParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
using std::swap;
shape_.InternalSwap(&other->shape_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParameter::LogParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsLogParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.LogParameter)
}
LogParameter::LogParameter(const LogParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&shift_, &from.shift_,
static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
// @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
_cached_size_ = 0;
shift_ = 0;
base_ = -1;
scale_ = 1;
}

LogParameter::~LogParameter() {
// @@protoc_insertion_point(destructor:caffe.LogParameter)
SharedDtor();
}

void LogParameter::SharedDtor() {
}

void LogParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogParameter& LogParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsLogParameter();
return *internal_default_instance();
}

LogParameter* LogParameter::New(::google::protobuf::Arena* arena) const {
LogParameter* n = new LogParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LogParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
shift_ = 0;
base_ = -1;
scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool LogParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.LogParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float base = 1 [default = -1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_base();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &base_)));
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shift = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_shift();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shift_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.LogParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.LogParameter)
return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.LogParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float base = 1 [default = -1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float base = 1 [default = -1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LogParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional float shift = 3 [default = 0];
if (has_shift()) {
total_size += 1 + 4;
}

// optional float base = 1 [default = -1];
if (has_base()) {
total_size += 1 + 4;
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LogParameter)
GOOGLE_DCHECK_NE(&from, this);
const LogParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const LogParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LogParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LogParameter)
MergeFrom(*source);
}
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LogParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
shift_ = from.shift_;
}
if (cached_has_bits & 0x00000002u) {
base_ = from.base_;
}
if (cached_has_bits & 0x00000004u) {
scale_ = from.scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LogParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LogParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool LogParameter::IsInitialized() const {
return true;
}

void LogParameter::Swap(LogParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void LogParameter::InternalSwap(LogParameter* other) {
using std::swap;
swap(shift_, other->shift_);
swap(base_, other->base_);
swap(scale_, other->scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LRNParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNParameter::LRNParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsLRNParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.LRNParameter)
}
LRNParameter::LRNParameter(const LRNParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&norm_region_, &from.norm_region_,
static_cast<size_t>(reinterpret_cast<char*>(&k_) -
reinterpret_cast<char*>(&norm_region_)) + sizeof(k_));
// @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&norm_region_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
local_size_ = 5u;
alpha_ = 1;
beta_ = 0.75f;
k_ = 1;
}

LRNParameter::~LRNParameter() {
// @@protoc_insertion_point(destructor:caffe.LRNParameter)
SharedDtor();
}

void LRNParameter::SharedDtor() {
}

void LRNParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRNParameter& LRNParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsLRNParameter();
return *internal_default_instance();
}

LRNParameter* LRNParameter::New(::google::protobuf::Arena* arena) const {
LRNParameter* n = new LRNParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 63u) {
::memset(&norm_region_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
local_size_ = 5u;
alpha_ = 1;
beta_ = 0.75f;
k_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.LRNParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 local_size = 1 [default = 5];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_local_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &local_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional float alpha = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_alpha();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &alpha_)));
} else {
goto handle_unusual;
}
break;
}

// optional float beta = 3 [default = 0.75];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_beta();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &beta_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
} else {
mutable_unknown_fields()->AddVarint(
4, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional float k = 5 [default = 1];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
set_has_k();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &k_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::LRNParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
6, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.LRNParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 local_size = 1 [default = 5];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
}

// optional float alpha = 2 [default = 1];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
}

// optional float beta = 3 [default = 0.75];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
4, this->norm_region(), output);
}

// optional float k = 5 [default = 1];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
6, this->engine(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 local_size = 1 [default = 5];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
}

// optional float alpha = 2 [default = 1];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
}

// optional float beta = 3 [default = 0.75];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
4, this->norm_region(), target);
}

// optional float k = 5 [default = 1];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
6, this->engine(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 63u) {
// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
if (has_norm_region()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

// optional uint32 local_size = 1 [default = 5];
if (has_local_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->local_size());
}

// optional float alpha = 2 [default = 1];
if (has_alpha()) {
total_size += 1 + 4;
}

// optional float beta = 3 [default = 0.75];
if (has_beta()) {
total_size += 1 + 4;
}

// optional float k = 5 [default = 1];
if (has_k()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNParameter)
GOOGLE_DCHECK_NE(&from, this);
const LRNParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const LRNParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNParameter)
MergeFrom(*source);
}
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 63u) {
if (cached_has_bits & 0x00000001u) {
norm_region_ = from.norm_region_;
}
if (cached_has_bits & 0x00000002u) {
engine_ = from.engine_;
}
if (cached_has_bits & 0x00000004u) {
local_size_ = from.local_size_;
}
if (cached_has_bits & 0x00000008u) {
alpha_ = from.alpha_;
}
if (cached_has_bits & 0x00000010u) {
beta_ = from.beta_;
}
if (cached_has_bits & 0x00000020u) {
k_ = from.k_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
return true;
}

void LRNParameter::Swap(LRNParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void LRNParameter::InternalSwap(LRNParameter* other) {
using std::swap;
swap(norm_region_, other->norm_region_);
swap(engine_, other->engine_);
swap(local_size_, other->local_size_);
swap(alpha_, other->alpha_);
swap(beta_, other->beta_);
swap(k_, other->k_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemoryDataParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDataParameter::MemoryDataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsMemoryDataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}
MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&batch_size_, &from.batch_size_,
static_cast<size_t>(reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
// @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
}

MemoryDataParameter::~MemoryDataParameter() {
// @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
}

void MemoryDataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsMemoryDataParameter();
return *internal_default_instance();
}

MemoryDataParameter* MemoryDataParameter::New(::google::protobuf::Arena* arena) const {
MemoryDataParameter* n = new MemoryDataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MemoryDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 15u) {
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&width_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool MemoryDataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 batch_size = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_batch_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batch_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 channels = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 height = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &height_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 width = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &width_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 batch_size = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
}

// optional uint32 channels = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
}

// optional uint32 height = 3;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
}

// optional uint32 width = 4;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 batch_size = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
}

// optional uint32 channels = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
}

// optional uint32 height = 3;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
}

// optional uint32 width = 4;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MemoryDataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 15u) {
// optional uint32 batch_size = 1;
if (has_batch_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batch_size());
}

// optional uint32 channels = 2;
if (has_channels()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->channels());
}

// optional uint32 height = 3;
if (has_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->height());
}

// optional uint32 width = 4;
if (has_width()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->width());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MemoryDataParameter)
GOOGLE_DCHECK_NE(&from, this);
const MemoryDataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const MemoryDataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MemoryDataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MemoryDataParameter)
MergeFrom(*source);
}
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MemoryDataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
batch_size_ = from.batch_size_;
}
if (cached_has_bits & 0x00000002u) {
channels_ = from.channels_;
}
if (cached_has_bits & 0x00000004u) {
height_ = from.height_;
}
if (cached_has_bits & 0x00000008u) {
width_ = from.width_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MemoryDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MemoryDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {
return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
using std::swap;
swap(batch_size_, other->batch_size_);
swap(channels_, other->channels_);
swap(height_, other->height_);
swap(width_, other->width_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MVNParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVNParameter::MVNParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsMVNParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.MVNParameter)
}
MVNParameter::MVNParameter(const MVNParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&across_channels_, &from.across_channels_,
static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
reinterpret_cast<char*>(&across_channels_)) + sizeof(eps_));
// @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
_cached_size_ = 0;
across_channels_ = false;
normalize_variance_ = true;
eps_ = 1e-09f;
}

MVNParameter::~MVNParameter() {
// @@protoc_insertion_point(destructor:caffe.MVNParameter)
SharedDtor();
}

void MVNParameter::SharedDtor() {
}

void MVNParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVNParameter& MVNParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsMVNParameter();
return *internal_default_instance();
}

MVNParameter* MVNParameter::New(::google::protobuf::Arena* arena) const {
MVNParameter* n = new MVNParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MVNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
across_channels_ = false;
normalize_variance_ = true;
eps_ = 1e-09f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool MVNParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.MVNParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional bool normalize_variance = 1 [default = true];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_normalize_variance();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &normalize_variance_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool across_channels = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_across_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &across_channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional float eps = 3 [default = 1e-09];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_eps();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &eps_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.MVNParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool normalize_variance = 1 [default = true];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
}

// optional bool across_channels = 2 [default = false];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
}

// optional float eps = 3 [default = 1e-09];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional bool normalize_variance = 1 [default = true];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
}

// optional bool across_channels = 2 [default = false];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
}

// optional float eps = 3 [default = 1e-09];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MVNParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional bool across_channels = 2 [default = false];
if (has_across_channels()) {
total_size += 1 + 1;
}

// optional bool normalize_variance = 1 [default = true];
if (has_normalize_variance()) {
total_size += 1 + 1;
}

// optional float eps = 3 [default = 1e-09];
if (has_eps()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MVNParameter)
GOOGLE_DCHECK_NE(&from, this);
const MVNParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const MVNParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MVNParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MVNParameter)
MergeFrom(*source);
}
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MVNParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
across_channels_ = from.across_channels_;
}
if (cached_has_bits & 0x00000002u) {
normalize_variance_ = from.normalize_variance_;
}
if (cached_has_bits & 0x00000004u) {
eps_ = from.eps_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MVNParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MVNParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {
return true;
}

void MVNParameter::Swap(MVNParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void MVNParameter::InternalSwap(MVNParameter* other) {
using std::swap;
swap(across_channels_, other->across_channels_);
swap(normalize_variance_, other->normalize_variance_);
swap(eps_, other->eps_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParameterParameter::InitAsDefaultInstance() {
::caffe::_ParameterParameter_default_instance_._instance.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
::caffe::BlobShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterParameter::ParameterParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsParameterParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ParameterParameter)
}
ParameterParameter::ParameterParameter(const ParameterParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_shape()) {
shape_ = new ::caffe::BlobShape(*from.shape_);
} else {
shape_ = NULL;
}
// @@protoc_insertion_point(copy_constructor:caffe.ParameterParameter)
}

void ParameterParameter::SharedCtor() {
_cached_size_ = 0;
shape_ = NULL;
}

ParameterParameter::~ParameterParameter() {
// @@protoc_insertion_point(destructor:caffe.ParameterParameter)
SharedDtor();
}

void ParameterParameter::SharedDtor() {
if (this != internal_default_instance()) delete shape_;
}

void ParameterParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParameterParameter& ParameterParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsParameterParameter();
return *internal_default_instance();
}

ParameterParameter* ParameterParameter::New(::google::protobuf::Arena* arena) const {
ParameterParameter* n = new ParameterParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParameterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(shape_ != NULL);
shape_->Clear();
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ParameterParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ParameterParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.BlobShape shape = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shape()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ParameterParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ParameterParameter)
return false;
#undef DO_
}

void ParameterParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ParameterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.BlobShape shape = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, *this->shape_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ParameterParameter)
}

::google::protobuf::uint8* ParameterParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ParameterParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.BlobShape shape = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, *this->shape_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ParameterParameter)
return target;
}

size_t ParameterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParameterParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional .caffe.BlobShape shape = 1;
if (has_shape()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shape_);
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ParameterParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParameterParameter)
GOOGLE_DCHECK_NE(&from, this);
const ParameterParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ParameterParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParameterParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParameterParameter)
MergeFrom(*source);
}
}

void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParameterParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_shape()) {
mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
}
}

void ParameterParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParameterParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParameterParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {
return true;
}

void ParameterParameter::Swap(ParameterParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ParameterParameter::InternalSwap(ParameterParameter* other) {
using std::swap;
swap(shape_, other->shape_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoolingParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsPoolingParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&pool_, &from.pool_,
static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
reinterpret_cast<char*>(&pool_)) + sizeof(stride_));
// @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&pool_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&global_pooling_) -
reinterpret_cast<char*>(&pool_)) + sizeof(global_pooling_));
stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
// @@protoc_insertion_point(destructor:caffe.PoolingParameter)
SharedDtor();
}

void PoolingParameter::SharedDtor() {
}

void PoolingParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoolingParameter& PoolingParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsPoolingParameter();
return *internal_default_instance();
}

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
PoolingParameter* n = new PoolingParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
::memset(&pool_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&pad_h_) -
reinterpret_cast<char*>(&pool_)) + sizeof(pad_h_));
}
if (cached_has_bits & 3840u) {
::memset(&pad_w_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&global_pooling_) -
reinterpret_cast<char*>(&pad_w_)) + sizeof(global_pooling_));
stride_ = 1u;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_size = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_kernel_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride = 3 [default = 1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_stride();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad = 4 [default = 0];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_pad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_h = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_kernel_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernel_w = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_kernel_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernel_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_h = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_stride_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride_w = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
set_has_stride_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad_h = 9 [default = 0];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
set_has_pad_h();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_h_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad_w = 10 [default = 0];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_pad_w();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_w_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::PoolingParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
11, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional bool global_pooling = 12 [default = false];
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
set_has_global_pooling();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &global_pooling_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->pool(), output);
}

// optional uint32 kernel_size = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
}

// optional uint32 stride = 3 [default = 1];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
}

// optional uint32 pad = 4 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
}

// optional uint32 kernel_h = 5;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
}

// optional uint32 kernel_w = 6;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
}

// optional uint32 stride_h = 7;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
}

// optional uint32 stride_w = 8;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
}

// optional uint32 pad_h = 9 [default = 0];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
}

// optional uint32 pad_w = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
11, this->engine(), output);
}

// optional bool global_pooling = 12 [default = false];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->pool(), target);
}

// optional uint32 kernel_size = 2;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
}

// optional uint32 stride = 3 [default = 1];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
}

// optional uint32 pad = 4 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
}

// optional uint32 kernel_h = 5;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
}

// optional uint32 kernel_w = 6;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
}

// optional uint32 stride_h = 7;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
}

// optional uint32 stride_w = 8;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
}

// optional uint32 pad_h = 9 [default = 0];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
}

// optional uint32 pad_w = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
11, this->engine(), target);
}

// optional bool global_pooling = 12 [default = false];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
if (has_pool()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
}

// optional uint32 kernel_size = 2;
if (has_kernel_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_size());
}

// optional uint32 pad = 4 [default = 0];
if (has_pad()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad());
}

// optional uint32 kernel_h = 5;
if (has_kernel_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_h());
}

// optional uint32 kernel_w = 6;
if (has_kernel_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernel_w());
}

// optional uint32 stride_h = 7;
if (has_stride_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_h());
}

// optional uint32 stride_w = 8;
if (has_stride_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride_w());
}

// optional uint32 pad_h = 9 [default = 0];
if (has_pad_h()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad_h());
}

}
if (_has_bits_[8 / 32] & 3840u) {
// optional uint32 pad_w = 10 [default = 0];
if (has_pad_w()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad_w());
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

// optional bool global_pooling = 12 [default = false];
if (has_global_pooling()) {
total_size += 1 + 1;
}

// optional uint32 stride = 3 [default = 1];
if (has_stride()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
GOOGLE_DCHECK_NE(&from, this);
const PoolingParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
MergeFrom(*source);
}
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
pool_ = from.pool_;
}
if (cached_has_bits & 0x00000002u) {
kernel_size_ = from.kernel_size_;
}
if (cached_has_bits & 0x00000004u) {
pad_ = from.pad_;
}
if (cached_has_bits & 0x00000008u) {
kernel_h_ = from.kernel_h_;
}
if (cached_has_bits & 0x00000010u) {
kernel_w_ = from.kernel_w_;
}
if (cached_has_bits & 0x00000020u) {
stride_h_ = from.stride_h_;
}
if (cached_has_bits & 0x00000040u) {
stride_w_ = from.stride_w_;
}
if (cached_has_bits & 0x00000080u) {
pad_h_ = from.pad_h_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 3840u) {
if (cached_has_bits & 0x00000100u) {
pad_w_ = from.pad_w_;
}
if (cached_has_bits & 0x00000200u) {
engine_ = from.engine_;
}
if (cached_has_bits & 0x00000400u) {
global_pooling_ = from.global_pooling_;
}
if (cached_has_bits & 0x00000800u) {
stride_ = from.stride_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
using std::swap;
swap(pool_, other->pool_);
swap(kernel_size_, other->kernel_size_);
swap(pad_, other->pad_);
swap(kernel_h_, other->kernel_h_);
swap(kernel_w_, other->kernel_w_);
swap(stride_h_, other->stride_h_);
swap(stride_w_, other->stride_w_);
swap(pad_h_, other->pad_h_);
swap(pad_w_, other->pad_w_);
swap(engine_, other->engine_);
swap(global_pooling_, other->global_pooling_);
swap(stride_, other->stride_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PowerParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerParameter::PowerParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsPowerParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.PowerParameter)
}
PowerParameter::PowerParameter(const PowerParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&shift_, &from.shift_,
static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
// @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
_cached_size_ = 0;
shift_ = 0;
power_ = 1;
scale_ = 1;
}

PowerParameter::~PowerParameter() {
// @@protoc_insertion_point(destructor:caffe.PowerParameter)
SharedDtor();
}

void PowerParameter::SharedDtor() {
}

void PowerParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerParameter& PowerParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsPowerParameter();
return *internal_default_instance();
}

PowerParameter* PowerParameter::New(::google::protobuf::Arena* arena) const {
PowerParameter* n = new PowerParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PowerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
shift_ = 0;
power_ = 1;
scale_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool PowerParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.PowerParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float power = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_power();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &power_)));
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional float shift = 3 [default = 0];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_shift();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &shift_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.PowerParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float power = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float power = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional float shift = 3 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PowerParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional float shift = 3 [default = 0];
if (has_shift()) {
total_size += 1 + 4;
}

// optional float power = 1 [default = 1];
if (has_power()) {
total_size += 1 + 4;
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PowerParameter)
GOOGLE_DCHECK_NE(&from, this);
const PowerParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const PowerParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PowerParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PowerParameter)
MergeFrom(*source);
}
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PowerParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
shift_ = from.shift_;
}
if (cached_has_bits & 0x00000002u) {
power_ = from.power_;
}
if (cached_has_bits & 0x00000004u) {
scale_ = from.scale_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PowerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PowerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
return true;
}

void PowerParameter::Swap(PowerParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void PowerParameter::InternalSwap(PowerParameter* other) {
using std::swap;
swap(shift_, other->shift_);
swap(power_, other->power_);
swap(scale_, other->scale_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PythonParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PythonParameter::PythonParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsPythonParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.PythonParameter)
}
PythonParameter::PythonParameter(const PythonParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_module()) {
module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
}
layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_layer()) {
layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
}
param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_param_str()) {
param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
}
share_in_parallel_ = from.share_in_parallel_;
// @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
_cached_size_ = 0;
module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
share_in_parallel_ = false;
}

PythonParameter::~PythonParameter() {
// @@protoc_insertion_point(destructor:caffe.PythonParameter)
SharedDtor();
}

void PythonParameter::SharedDtor() {
module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PythonParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PythonParameter& PythonParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsPythonParameter();
return *internal_default_instance();
}

PythonParameter* PythonParameter::New(::google::protobuf::Arena* arena) const {
PythonParameter* n = new PythonParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PythonParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!module_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*module_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*layer_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!param_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*param_str_.UnsafeRawStringPointer())->clear();
}
}
share_in_parallel_ = false;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool PythonParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.PythonParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string module = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_module()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->module().data(), static_cast<int>(this->module().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.PythonParameter.module");
} else {
goto handle_unusual;
}
break;
}

// optional string layer = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_layer()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->layer().data(), static_cast<int>(this->layer().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.PythonParameter.layer");
} else {
goto handle_unusual;
}
break;
}

// optional string param_str = 3 [default = ""];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_param_str()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param_str().data(), static_cast<int>(this->param_str().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.PythonParameter.param_str");
} else {
goto handle_unusual;
}
break;
}

// optional bool share_in_parallel = 4 [default = false];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_share_in_parallel();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &share_in_parallel_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.PythonParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string module = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->module().data(), static_cast<int>(this->module().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.module");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->module(), output);
}

// optional string layer = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->layer().data(), static_cast<int>(this->layer().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.layer");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->layer(), output);
}

// optional string param_str = 3 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param_str().data(), static_cast<int>(this->param_str().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.param_str");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3, this->param_str(), output);
}

// optional bool share_in_parallel = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string module = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->module().data(), static_cast<int>(this->module().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.module");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->module(), target);
}

// optional string layer = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->layer().data(), static_cast<int>(this->layer().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.layer");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->layer(), target);
}

// optional string param_str = 3 [default = ""];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param_str().data(), static_cast<int>(this->param_str().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.PythonParameter.param_str");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3, this->param_str(), target);
}

// optional bool share_in_parallel = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PythonParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 15u) {
// optional string module = 1;
if (has_module()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->module());
}

// optional string layer = 2;
if (has_layer()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->layer());
}

// optional string param_str = 3 [default = ""];
if (has_param_str()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->param_str());
}

// optional bool share_in_parallel = 4 [default = false];
if (has_share_in_parallel()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PythonParameter)
GOOGLE_DCHECK_NE(&from, this);
const PythonParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const PythonParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PythonParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PythonParameter)
MergeFrom(*source);
}
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PythonParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
set_has_module();
module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
}
if (cached_has_bits & 0x00000002u) {
set_has_layer();
layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
}
if (cached_has_bits & 0x00000004u) {
set_has_param_str();
param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
}
if (cached_has_bits & 0x00000008u) {
share_in_parallel_ = from.share_in_parallel_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PythonParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PythonParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {
return true;
}

void PythonParameter::Swap(PythonParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void PythonParameter::InternalSwap(PythonParameter* other) {
using std::swap;
module_.Swap(&other->module_);
layer_.Swap(&other->layer_);
param_str_.Swap(&other->param_str_);
swap(share_in_parallel_, other->share_in_parallel_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecurrentParameter::InitAsDefaultInstance() {
::caffe::_RecurrentParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_RecurrentParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecurrentParameter::kNumOutputFieldNumber;
const int RecurrentParameter::kWeightFillerFieldNumber;
const int RecurrentParameter::kBiasFillerFieldNumber;
const int RecurrentParameter::kDebugInfoFieldNumber;
const int RecurrentParameter::kExposeHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecurrentParameter::RecurrentParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsRecurrentParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.RecurrentParameter)
}
RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_weight_filler()) {
weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
} else {
weight_filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
::memcpy(&num_output_, &from.num_output_,
static_cast<size_t>(reinterpret_cast<char*>(&expose_hidden_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(expose_hidden_));
// @@protoc_insertion_point(copy_constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&weight_filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&expose_hidden_) -
reinterpret_cast<char*>(&weight_filler_)) + sizeof(expose_hidden_));
}

RecurrentParameter::~RecurrentParameter() {
// @@protoc_insertion_point(destructor:caffe.RecurrentParameter)
SharedDtor();
}

void RecurrentParameter::SharedDtor() {
if (this != internal_default_instance()) delete weight_filler_;
if (this != internal_default_instance()) delete bias_filler_;
}

void RecurrentParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecurrentParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecurrentParameter& RecurrentParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsRecurrentParameter();
return *internal_default_instance();
}

RecurrentParameter* RecurrentParameter::New(::google::protobuf::Arena* arena) const {
RecurrentParameter* n = new RecurrentParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RecurrentParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(weight_filler_ != NULL);
weight_filler_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
}
if (cached_has_bits & 28u) {
::memset(&num_output_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&expose_hidden_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(expose_hidden_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool RecurrentParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.RecurrentParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 num_output = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_num_output();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_output_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter weight_filler = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_weight_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional bool debug_info = 4 [default = false];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_debug_info();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &debug_info_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool expose_hidden = 5 [default = false];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_expose_hidden();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &expose_hidden_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.RecurrentParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.RecurrentParameter)
return false;
#undef DO_
}

void RecurrentParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.RecurrentParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1 [default = 0];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
}

// optional .caffe.FillerParameter weight_filler = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
2, *this->weight_filler_, output);
}

// optional .caffe.FillerParameter bias_filler = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
3, *this->bias_filler_, output);
}

// optional bool debug_info = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->debug_info(), output);
}

// optional bool expose_hidden = 5 [default = false];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteBool(5, this->expose_hidden(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.RecurrentParameter)
}

::google::protobuf::uint8* RecurrentParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.RecurrentParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 num_output = 1 [default = 0];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
}

// optional .caffe.FillerParameter weight_filler = 2;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
2, *this->weight_filler_, deterministic, target);
}

// optional .caffe.FillerParameter bias_filler = 3;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
3, *this->bias_filler_, deterministic, target);
}

// optional bool debug_info = 4 [default = false];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->debug_info(), target);
}

// optional bool expose_hidden = 5 [default = false];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->expose_hidden(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.RecurrentParameter)
return target;
}

size_t RecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RecurrentParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 31u) {
// optional .caffe.FillerParameter weight_filler = 2;
if (has_weight_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->weight_filler_);
}

// optional .caffe.FillerParameter bias_filler = 3;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional uint32 num_output = 1 [default = 0];
if (has_num_output()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num_output());
}

// optional bool debug_info = 4 [default = false];
if (has_debug_info()) {
total_size += 1 + 1;
}

// optional bool expose_hidden = 5 [default = false];
if (has_expose_hidden()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void RecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RecurrentParameter)
GOOGLE_DCHECK_NE(&from, this);
const RecurrentParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const RecurrentParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RecurrentParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RecurrentParameter)
MergeFrom(*source);
}
}

void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RecurrentParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
}
if (cached_has_bits & 0x00000002u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000004u) {
num_output_ = from.num_output_;
}
if (cached_has_bits & 0x00000008u) {
debug_info_ = from.debug_info_;
}
if (cached_has_bits & 0x00000010u) {
expose_hidden_ = from.expose_hidden_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void RecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RecurrentParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RecurrentParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {
return true;
}

void RecurrentParameter::Swap(RecurrentParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
using std::swap;
swap(weight_filler_, other->weight_filler_);
swap(bias_filler_, other->bias_filler_);
swap(num_output_, other->num_output_);
swap(debug_info_, other->debug_info_);
swap(expose_hidden_, other->expose_hidden_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecurrentParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReductionParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReductionParameter::ReductionParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsReductionParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}
ReductionParameter::ReductionParameter(const ReductionParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&axis_, &from.axis_,
static_cast<size_t>(reinterpret_cast<char*>(&coeff_) -
reinterpret_cast<char*>(&axis_)) + sizeof(coeff_));
// @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
_cached_size_ = 0;
axis_ = 0;
operation_ = 1;
coeff_ = 1;
}

ReductionParameter::~ReductionParameter() {
// @@protoc_insertion_point(destructor:caffe.ReductionParameter)
SharedDtor();
}

void ReductionParameter::SharedDtor() {
}

void ReductionParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReductionParameter& ReductionParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsReductionParameter();
return *internal_default_instance();
}

ReductionParameter* ReductionParameter::New(::google::protobuf::Arena* arena) const {
ReductionParameter* n = new ReductionParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReductionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
axis_ = 0;
operation_ = 1;
coeff_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ReductionParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional float coeff = 3 [default = 1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
set_has_coeff();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &coeff_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->operation(), output);
}

// optional int32 axis = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
}

// optional float coeff = 3 [default = 1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->operation(), target);
}

// optional int32 axis = 2 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
}

// optional float coeff = 3 [default = 1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReductionParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional int32 axis = 2 [default = 0];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
if (has_operation()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
}

// optional float coeff = 3 [default = 1];
if (has_coeff()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReductionParameter)
GOOGLE_DCHECK_NE(&from, this);
const ReductionParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ReductionParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReductionParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReductionParameter)
MergeFrom(*source);
}
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReductionParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000002u) {
operation_ = from.operation_;
}
if (cached_has_bits & 0x00000004u) {
coeff_ = from.coeff_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReductionParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReductionParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {
return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ReductionParameter::InternalSwap(ReductionParameter* other) {
using std::swap;
swap(axis_, other->axis_);
swap(operation_, other->operation_);
swap(coeff_, other->coeff_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReLUParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsReLUParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&negative_slope_, &from.negative_slope_,
static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
// @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&negative_slope_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
}

ReLUParameter::~ReLUParameter() {
// @@protoc_insertion_point(destructor:caffe.ReLUParameter)
SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReLUParameter& ReLUParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsReLUParameter();
return *internal_default_instance();
}

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
ReLUParameter* n = new ReLUParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
::memset(&negative_slope_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ReLUParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float negative_slope = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_negative_slope();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &negative_slope_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::ReLUParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
2, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float negative_slope = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
2, this->engine(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float negative_slope = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
2, this->engine(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional float negative_slope = 1 [default = 0];
if (has_negative_slope()) {
total_size += 1 + 4;
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
GOOGLE_DCHECK_NE(&from, this);
const ReLUParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
MergeFrom(*source);
}
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
negative_slope_ = from.negative_slope_;
}
if (cached_has_bits & 0x00000002u) {
engine_ = from.engine_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
using std::swap;
swap(negative_slope_, other->negative_slope_);
swap(engine_, other->engine_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReshapeParameter::InitAsDefaultInstance() {
::caffe::_ReshapeParameter_default_instance_._instance.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
::caffe::BlobShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeParameter::ReshapeParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsReshapeParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}
ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_shape()) {
shape_ = new ::caffe::BlobShape(*from.shape_);
} else {
shape_ = NULL;
}
::memcpy(&axis_, &from.axis_,
static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
// @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&shape_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&shape_)) + sizeof(axis_));
num_axes_ = -1;
}

ReshapeParameter::~ReshapeParameter() {
// @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
SharedDtor();
}

void ReshapeParameter::SharedDtor() {
if (this != internal_default_instance()) delete shape_;
}

void ReshapeParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsReshapeParameter();
return *internal_default_instance();
}

ReshapeParameter* ReshapeParameter::New(::google::protobuf::Arena* arena) const {
ReshapeParameter* n = new ReshapeParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReshapeParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(shape_ != NULL);
shape_->Clear();
}
if (cached_has_bits & 6u) {
axis_ = 0;
num_axes_ = -1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ReshapeParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.BlobShape shape = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_shape()));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 2 [default = 0];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 num_axes = 3 [default = -1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_num_axes();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &num_axes_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.BlobShape shape = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, *this->shape_, output);
}

// optional int32 axis = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
}

// optional int32 num_axes = 3 [default = -1];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.BlobShape shape = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, *this->shape_, deterministic, target);
}

// optional int32 axis = 2 [default = 0];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
}

// optional int32 num_axes = 3 [default = -1];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReshapeParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional .caffe.BlobShape shape = 1;
if (has_shape()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->shape_);
}

// optional int32 axis = 2 [default = 0];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional int32 num_axes = 3 [default = -1];
if (has_num_axes()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->num_axes());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReshapeParameter)
GOOGLE_DCHECK_NE(&from, this);
const ReshapeParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ReshapeParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReshapeParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReshapeParameter)
MergeFrom(*source);
}
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReshapeParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000004u) {
num_axes_ = from.num_axes_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReshapeParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReshapeParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
using std::swap;
swap(shape_, other->shape_);
swap(axis_, other->axis_);
swap(num_axes_, other->num_axes_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScaleParameter::InitAsDefaultInstance() {
::caffe::_ScaleParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_ScaleParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleParameter::ScaleParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsScaleParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}
ScaleParameter::ScaleParameter(const ScaleParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_filler()) {
filler_ = new ::caffe::FillerParameter(*from.filler_);
} else {
filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
::memcpy(&bias_term_, &from.bias_term_,
static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
reinterpret_cast<char*>(&bias_term_)) + sizeof(num_axes_));
// @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&bias_term_) -
reinterpret_cast<char*>(&filler_)) + sizeof(bias_term_));
axis_ = 1;
num_axes_ = 1;
}

ScaleParameter::~ScaleParameter() {
// @@protoc_insertion_point(destructor:caffe.ScaleParameter)
SharedDtor();
}

void ScaleParameter::SharedDtor() {
if (this != internal_default_instance()) delete filler_;
if (this != internal_default_instance()) delete bias_filler_;
}

void ScaleParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScaleParameter& ScaleParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsScaleParameter();
return *internal_default_instance();
}

ScaleParameter* ScaleParameter::New(::google::protobuf::Arena* arena) const {
ScaleParameter* n = new ScaleParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ScaleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(filler_ != NULL);
filler_->Clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
}
if (cached_has_bits & 28u) {
bias_term_ = false;
axis_ = 1;
num_axes_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ScaleParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 axis = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 num_axes = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_num_axes();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &num_axes_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter filler = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional bool bias_term = 4 [default = false];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_bias_term();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &bias_term_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
}

// optional int32 num_axes = 2 [default = 1];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
}

// optional .caffe.FillerParameter filler = 3;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
3, *this->filler_, output);
}

// optional bool bias_term = 4 [default = false];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
5, *this->bias_filler_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
}

// optional int32 num_axes = 2 [default = 1];
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
}

// optional .caffe.FillerParameter filler = 3;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
3, *this->filler_, deterministic, target);
}

// optional bool bias_term = 4 [default = false];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
5, *this->bias_filler_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ScaleParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 31u) {
// optional .caffe.FillerParameter filler = 3;
if (has_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->filler_);
}

// optional .caffe.FillerParameter bias_filler = 5;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional bool bias_term = 4 [default = false];
if (has_bias_term()) {
total_size += 1 + 1;
}

// optional int32 axis = 1 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

// optional int32 num_axes = 2 [default = 1];
if (has_num_axes()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->num_axes());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ScaleParameter)
GOOGLE_DCHECK_NE(&from, this);
const ScaleParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ScaleParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ScaleParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ScaleParameter)
MergeFrom(*source);
}
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ScaleParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 31u) {
if (cached_has_bits & 0x00000001u) {
mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
}
if (cached_has_bits & 0x00000002u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000004u) {
bias_term_ = from.bias_term_;
}
if (cached_has_bits & 0x00000008u) {
axis_ = from.axis_;
}
if (cached_has_bits & 0x00000010u) {
num_axes_ = from.num_axes_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ScaleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ScaleParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {
return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ScaleParameter::InternalSwap(ScaleParameter* other) {
using std::swap;
swap(filler_, other->filler_);
swap(bias_filler_, other->bias_filler_);
swap(bias_term_, other->bias_term_);
swap(axis_, other->axis_);
swap(num_axes_, other->num_axes_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SigmoidParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidParameter::SigmoidParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSigmoidParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}
SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
engine_ = from.engine_;
// @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
_cached_size_ = 0;
engine_ = 0;
}

SigmoidParameter::~SigmoidParameter() {
// @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
SharedDtor();
}

void SigmoidParameter::SharedDtor() {
}

void SigmoidParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSigmoidParameter();
return *internal_default_instance();
}

SigmoidParameter* SigmoidParameter::New(::google::protobuf::Arena* arena) const {
SigmoidParameter* n = new SigmoidParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

engine_ = 0;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SigmoidParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->engine(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->engine(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidParameter)
GOOGLE_DCHECK_NE(&from, this);
const SigmoidParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const SigmoidParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidParameter)
MergeFrom(*source);
}
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_engine()) {
set_engine(from.engine());
}
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {
return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
using std::swap;
swap(engine_, other->engine_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SliceParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceParameter::SliceParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSliceParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SliceParameter)
}
SliceParameter::SliceParameter(const SliceParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0),
slice_point_(from.slice_point_) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&slice_dim_, &from.slice_dim_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&slice_dim_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
_cached_size_ = 0;
slice_dim_ = 1u;
axis_ = 1;
}

SliceParameter::~SliceParameter() {
// @@protoc_insertion_point(destructor:caffe.SliceParameter)
SharedDtor();
}

void SliceParameter::SharedDtor() {
}

void SliceParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SliceParameter& SliceParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSliceParameter();
return *internal_default_instance();
}

SliceParameter* SliceParameter::New(::google::protobuf::Arena* arena) const {
SliceParameter* n = new SliceParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SliceParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

slice_point_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
slice_dim_ = 1u;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SliceParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SliceParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 slice_dim = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_slice_dim();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &slice_dim_)));
} else {
goto handle_unusual;
}
break;
}

// repeated uint32 slice_point = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
1, 16u, input, this->mutable_slice_point())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, this->mutable_slice_point())));
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 3 [default = 1];
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SliceParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 slice_dim = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
}

// repeated uint32 slice_point = 2;
for (int i = 0, n = this->slice_point_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(
2, this->slice_point(i), output);
}

// optional int32 axis = 3 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 slice_dim = 1 [default = 1];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
}

// repeated uint32 slice_point = 2;
target = ::google::protobuf::internal::WireFormatLite::
WriteUInt32ToArray(2, this->slice_point_, target);

// optional int32 axis = 3 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SliceParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated uint32 slice_point = 2;
{
size_t data_size = ::google::protobuf::internal::WireFormatLite::
UInt32Size(this->slice_point_);
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->slice_point_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 3u) {
// optional uint32 slice_dim = 1 [default = 1];
if (has_slice_dim()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->slice_dim());
}

// optional int32 axis = 3 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SliceParameter)
GOOGLE_DCHECK_NE(&from, this);
const SliceParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const SliceParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SliceParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SliceParameter)
MergeFrom(*source);
}
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SliceParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

slice_point_.MergeFrom(from.slice_point_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
slice_dim_ = from.slice_dim_;
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SliceParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SliceParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {
return true;
}

void SliceParameter::Swap(SliceParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void SliceParameter::InternalSwap(SliceParameter* other) {
using std::swap;
slice_point_.InternalSwap(&other->slice_point_);
swap(slice_dim_, other->slice_dim_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftmaxParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSoftmaxParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}
SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&engine_, &from.engine_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&engine_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
_cached_size_ = 0;
engine_ = 0;
axis_ = 1;
}

SoftmaxParameter::~SoftmaxParameter() {
// @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
}

void SoftmaxParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSoftmaxParameter();
return *internal_default_instance();
}

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
SoftmaxParameter* n = new SoftmaxParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
engine_ = 0;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SoftmaxParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional int32 axis = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->engine(), output);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->engine(), target);
}

// optional int32 axis = 2 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

// optional int32 axis = 2 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxParameter)
GOOGLE_DCHECK_NE(&from, this);
const SoftmaxParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxParameter)
MergeFrom(*source);
}
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
engine_ = from.engine_;
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {
return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
using std::swap;
swap(engine_, other->engine_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TanHParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TanHParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TanHParameter::TanHParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsTanHParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.TanHParameter)
}
TanHParameter::TanHParameter(const TanHParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
engine_ = from.engine_;
// @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
_cached_size_ = 0;
engine_ = 0;
}

TanHParameter::~TanHParameter() {
// @@protoc_insertion_point(destructor:caffe.TanHParameter)
SharedDtor();
}

void TanHParameter::SharedDtor() {
}

void TanHParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TanHParameter& TanHParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsTanHParameter();
return *internal_default_instance();
}

TanHParameter* TanHParameter::New(::google::protobuf::Arena* arena) const {
TanHParameter* n = new TanHParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TanHParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

engine_ = 0;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool TanHParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.TanHParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::TanHParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
1, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.TanHParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1, this->engine(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1, this->engine(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TanHParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TanHParameter)
GOOGLE_DCHECK_NE(&from, this);
const TanHParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const TanHParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TanHParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TanHParameter)
MergeFrom(*source);
}
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TanHParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_engine()) {
set_engine(from.engine());
}
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TanHParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TanHParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {
return true;
}

void TanHParameter::Swap(TanHParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void TanHParameter::InternalSwap(TanHParameter* other) {
using std::swap;
swap(engine_, other->engine_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TileParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileParameter::TileParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsTileParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.TileParameter)
}
TileParameter::TileParameter(const TileParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&tiles_, &from.tiles_,
static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
reinterpret_cast<char*>(&tiles_)) + sizeof(axis_));
// @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
_cached_size_ = 0;
tiles_ = 0;
axis_ = 1;
}

TileParameter::~TileParameter() {
// @@protoc_insertion_point(destructor:caffe.TileParameter)
SharedDtor();
}

void TileParameter::SharedDtor() {
}

void TileParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TileParameter& TileParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsTileParameter();
return *internal_default_instance();
}

TileParameter* TileParameter::New(::google::protobuf::Arena* arena) const {
TileParameter* n = new TileParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TileParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 3u) {
tiles_ = 0;
axis_ = 1;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool TileParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.TileParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional int32 axis = 1 [default = 1];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_axis();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &axis_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 tiles = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_tiles();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &tiles_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.TileParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.TileParameter)
return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.TileParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
}

// optional int32 tiles = 2;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional int32 axis = 1 [default = 1];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
}

// optional int32 tiles = 2;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TileParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional int32 tiles = 2;
if (has_tiles()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->tiles());
}

// optional int32 axis = 1 [default = 1];
if (has_axis()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->axis());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TileParameter)
GOOGLE_DCHECK_NE(&from, this);
const TileParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const TileParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TileParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TileParameter)
MergeFrom(*source);
}
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TileParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
tiles_ = from.tiles_;
}
if (cached_has_bits & 0x00000002u) {
axis_ = from.axis_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TileParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TileParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool TileParameter::IsInitialized() const {
return true;
}

void TileParameter::Swap(TileParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void TileParameter::InternalSwap(TileParameter* other) {
using std::swap;
swap(tiles_, other->tiles_);
swap(axis_, other->axis_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ThresholdParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParameter::ThresholdParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsThresholdParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}
ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
threshold_ = from.threshold_;
// @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
_cached_size_ = 0;
threshold_ = 0;
}

ThresholdParameter::~ThresholdParameter() {
// @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
SharedDtor();
}

void ThresholdParameter::SharedDtor() {
}

void ThresholdParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsThresholdParameter();
return *internal_default_instance();
}

ThresholdParameter* ThresholdParameter::New(::google::protobuf::Arena* arena) const {
ThresholdParameter* n = new ThresholdParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ThresholdParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

threshold_ = 0;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool ThresholdParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional float threshold = 1 [default = 0];
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
set_has_threshold();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &threshold_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float threshold = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional float threshold = 1 [default = 0];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ThresholdParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// optional float threshold = 1 [default = 0];
if (has_threshold()) {
total_size += 1 + 4;
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ThresholdParameter)
GOOGLE_DCHECK_NE(&from, this);
const ThresholdParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ThresholdParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ThresholdParameter)
MergeFrom(*source);
}
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ThresholdParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

if (from.has_threshold()) {
set_threshold(from.threshold());
}
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ThresholdParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ThresholdParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {
return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
using std::swap;
swap(threshold_, other->threshold_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WindowDataParameter::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> WindowDataParameter::_default_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDataParameter::WindowDataParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsWindowDataParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}
WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_mean_file()) {
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
crop_mode_.UnsafeSetDefault(&::caffe::WindowDataParameter::_default_crop_mode_.get());
if (from.has_crop_mode()) {
crop_mode_.AssignWithDefault(&::caffe::WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
}
root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_root_folder()) {
root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
}
::memcpy(&batch_size_, &from.batch_size_,
static_cast<size_t>(reinterpret_cast<char*>(&fg_fraction_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(fg_fraction_));
// @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
_cached_size_ = 0;
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
crop_mode_.UnsafeSetDefault(&::caffe::WindowDataParameter::_default_crop_mode_.get());
root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&context_pad_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(context_pad_));
scale_ = 1;
fg_threshold_ = 0.5f;
bg_threshold_ = 0.5f;
fg_fraction_ = 0.25f;
}

WindowDataParameter::~WindowDataParameter() {
// @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
SharedDtor();
}

void WindowDataParameter::SharedDtor() {
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
crop_mode_.DestroyNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get());
root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WindowDataParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsWindowDataParameter();
return *internal_default_instance();
}

WindowDataParameter* WindowDataParameter::New(::google::protobuf::Arena* arena) const {
WindowDataParameter* n = new WindowDataParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WindowDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 15u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*mean_file_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!crop_mode_.IsDefault(&::caffe::WindowDataParameter::_default_crop_mode_.get()));
(*crop_mode_.UnsafeRawStringPointer())->assign(*&::caffe::WindowDataParameter::_default_crop_mode_.get());
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*root_folder_.UnsafeRawStringPointer())->clear();
}
}
if (cached_has_bits & 240u) {
::memset(&batch_size_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&cache_images_) -
reinterpret_cast<char*>(&batch_size_)) + sizeof(cache_images_));
}
if (cached_has_bits & 7936u) {
context_pad_ = 0u;
scale_ = 1;
fg_threshold_ = 0.5f;
bg_threshold_ = 0.5f;
fg_fraction_ = 0.25f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool WindowDataParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string source = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WindowDataParameter.source");
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 2 [default = 1];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional string mean_file = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_mean_file()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WindowDataParameter.mean_file");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 batch_size = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_batch_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batch_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 crop_size = 5 [default = 0];
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
set_has_crop_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &crop_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool mirror = 6 [default = false];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional float fg_threshold = 7 [default = 0.5];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
set_has_fg_threshold();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &fg_threshold_)));
} else {
goto handle_unusual;
}
break;
}

// optional float bg_threshold = 8 [default = 0.5];
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
set_has_bg_threshold();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &bg_threshold_)));
} else {
goto handle_unusual;
}
break;
}

// optional float fg_fraction = 9 [default = 0.25];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
set_has_fg_fraction();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &fg_fraction_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 context_pad = 10 [default = 0];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_context_pad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &context_pad_)));
} else {
goto handle_unusual;
}
break;
}

// optional string crop_mode = 11 [default = "warp"];
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_crop_mode()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WindowDataParameter.crop_mode");
} else {
goto handle_unusual;
}
break;
}

// optional bool cache_images = 12 [default = false];
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
set_has_cache_images();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &cache_images_)));
} else {
goto handle_unusual;
}
break;
}

// optional string root_folder = 13 [default = ""];
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_root_folder()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.WindowDataParameter.root_folder");
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->source(), output);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.mean_file");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
3, this->mean_file(), output);
}

// optional uint32 batch_size = 4;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
}

// optional float fg_threshold = 7 [default = 0.5];
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
}

// optional float bg_threshold = 8 [default = 0.5];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
}

// optional float fg_fraction = 9 [default = 0.25];
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
}

// optional uint32 context_pad = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
}

// optional string crop_mode = 11 [default = "warp"];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.crop_mode");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
11, this->crop_mode(), output);
}

// optional bool cache_images = 12 [default = false];
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
}

// optional string root_folder = 13 [default = ""];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.root_folder");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
13, this->root_folder(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string source = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->source(), target);
}

// optional float scale = 2 [default = 1];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
}

// optional string mean_file = 3;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->mean_file().data(), static_cast<int>(this->mean_file().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.mean_file");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
3, this->mean_file(), target);
}

// optional uint32 batch_size = 4;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
}

// optional uint32 crop_size = 5 [default = 0];
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
}

// optional bool mirror = 6 [default = false];
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
}

// optional float fg_threshold = 7 [default = 0.5];
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
}

// optional float bg_threshold = 8 [default = 0.5];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
}

// optional float fg_fraction = 9 [default = 0.25];
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
}

// optional uint32 context_pad = 10 [default = 0];
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
}

// optional string crop_mode = 11 [default = "warp"];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.crop_mode");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
11, this->crop_mode(), target);
}

// optional bool cache_images = 12 [default = false];
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
}

// optional string root_folder = 13 [default = ""];
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->root_folder().data(), static_cast<int>(this->root_folder().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.WindowDataParameter.root_folder");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
13, this->root_folder(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WindowDataParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 255u) {
// optional string source = 1;
if (has_source()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

// optional string mean_file = 3;
if (has_mean_file()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->mean_file());
}

// optional string crop_mode = 11 [default = "warp"];
if (has_crop_mode()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->crop_mode());
}

// optional string root_folder = 13 [default = ""];
if (has_root_folder()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->root_folder());
}

// optional uint32 batch_size = 4;
if (has_batch_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batch_size());
}

// optional uint32 crop_size = 5 [default = 0];
if (has_crop_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->crop_size());
}

// optional bool mirror = 6 [default = false];
if (has_mirror()) {
total_size += 1 + 1;
}

// optional bool cache_images = 12 [default = false];
if (has_cache_images()) {
total_size += 1 + 1;
}

}
if (_has_bits_[8 / 32] & 7936u) {
// optional uint32 context_pad = 10 [default = 0];
if (has_context_pad()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->context_pad());
}

// optional float scale = 2 [default = 1];
if (has_scale()) {
total_size += 1 + 4;
}

// optional float fg_threshold = 7 [default = 0.5];
if (has_fg_threshold()) {
total_size += 1 + 4;
}

// optional float bg_threshold = 8 [default = 0.5];
if (has_bg_threshold()) {
total_size += 1 + 4;
}

// optional float fg_fraction = 9 [default = 0.25];
if (has_fg_fraction()) {
total_size += 1 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WindowDataParameter)
GOOGLE_DCHECK_NE(&from, this);
const WindowDataParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const WindowDataParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WindowDataParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WindowDataParameter)
MergeFrom(*source);
}
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WindowDataParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
if (cached_has_bits & 0x00000002u) {
set_has_mean_file();
mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
}
if (cached_has_bits & 0x00000004u) {
set_has_crop_mode();
crop_mode_.AssignWithDefault(&::caffe::WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
}
if (cached_has_bits & 0x00000008u) {
set_has_root_folder();
root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
}
if (cached_has_bits & 0x00000010u) {
batch_size_ = from.batch_size_;
}
if (cached_has_bits & 0x00000020u) {
crop_size_ = from.crop_size_;
}
if (cached_has_bits & 0x00000040u) {
mirror_ = from.mirror_;
}
if (cached_has_bits & 0x00000080u) {
cache_images_ = from.cache_images_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 7936u) {
if (cached_has_bits & 0x00000100u) {
context_pad_ = from.context_pad_;
}
if (cached_has_bits & 0x00000200u) {
scale_ = from.scale_;
}
if (cached_has_bits & 0x00000400u) {
fg_threshold_ = from.fg_threshold_;
}
if (cached_has_bits & 0x00000800u) {
bg_threshold_ = from.bg_threshold_;
}
if (cached_has_bits & 0x00001000u) {
fg_fraction_ = from.fg_fraction_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WindowDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WindowDataParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {
return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
using std::swap;
source_.Swap(&other->source_);
mean_file_.Swap(&other->mean_file_);
crop_mode_.Swap(&other->crop_mode_);
root_folder_.Swap(&other->root_folder_);
swap(batch_size_, other->batch_size_);
swap(crop_size_, other->crop_size_);
swap(mirror_, other->mirror_);
swap(cache_images_, other->cache_images_);
swap(context_pad_, other->context_pad_);
swap(scale_, other->scale_);
swap(fg_threshold_, other->fg_threshold_);
swap(bg_threshold_, other->bg_threshold_);
swap(fg_fraction_, other->fg_fraction_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SPPParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPPParameter::SPPParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsSPPParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.SPPParameter)
}
SPPParameter::SPPParameter(const SPPParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
::memcpy(&pyramid_height_, &from.pyramid_height_,
static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
// @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&pyramid_height_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
}

SPPParameter::~SPPParameter() {
// @@protoc_insertion_point(destructor:caffe.SPPParameter)
SharedDtor();
}

void SPPParameter::SharedDtor() {
}

void SPPParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SPPParameter& SPPParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsSPPParameter();
return *internal_default_instance();
}

SPPParameter* SPPParameter::New(::google::protobuf::Arena* arena) const {
SPPParameter* n = new SPPParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPPParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 7u) {
::memset(&pyramid_height_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&engine_) -
reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool SPPParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.SPPParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional uint32 pyramid_height = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
set_has_pyramid_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pyramid_height_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
} else {
mutable_unknown_fields()->AddVarint(
2, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::SPPParameter_Engine_IsValid(value)) {
set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
} else {
mutable_unknown_fields()->AddVarint(
6, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.SPPParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 pyramid_height = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
2, this->pool(), output);
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
6, this->engine(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional uint32 pyramid_height = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
2, this->pool(), target);
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
6, this->engine(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPPParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 7u) {
// optional uint32 pyramid_height = 1;
if (has_pyramid_height()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pyramid_height());
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
if (has_pool()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
if (has_engine()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPPParameter)
GOOGLE_DCHECK_NE(&from, this);
const SPPParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const SPPParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPPParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPPParameter)
MergeFrom(*source);
}
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPPParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
pyramid_height_ = from.pyramid_height_;
}
if (cached_has_bits & 0x00000002u) {
pool_ = from.pool_;
}
if (cached_has_bits & 0x00000004u) {
engine_ = from.engine_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPPParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPPParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {
return true;
}

void SPPParameter::Swap(SPPParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void SPPParameter::InternalSwap(SPPParameter* other) {
using std::swap;
swap(pyramid_height_, other->pyramid_height_);
swap(pool_, other->pool_);
swap(engine_, other->engine_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void V1LayerParameter::InitAsDefaultInstance() {
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
::caffe::AccuracyParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
::caffe::ArgMaxParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
::caffe::ConcatParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
::caffe::ContrastiveLossParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
::caffe::ConvolutionParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
::caffe::DataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
::caffe::DropoutParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
::caffe::DummyDataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
::caffe::EltwiseParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
::caffe::ExpParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
::caffe::HDF5DataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
::caffe::HDF5OutputParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
::caffe::HingeLossParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
::caffe::ImageDataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
::caffe::InfogainLossParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
::caffe::InnerProductParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
::caffe::LRNParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
::caffe::MemoryDataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
::caffe::MVNParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
::caffe::PoolingParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
::caffe::PowerParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
::caffe::ReLUParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
::caffe::SigmoidParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
::caffe::SoftmaxParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
::caffe::SliceParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
::caffe::TanHParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
::caffe::ThresholdParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
::caffe::WindowDataParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
::caffe::TransformationParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
::caffe::LossParameter::internal_default_instance());
::caffe::_V1LayerParameter_default_instance_._instance.get_mutable()->layer_ = const_cast< ::caffe::V0LayerParameter*>(
::caffe::V0LayerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V1LayerParameter::V1LayerParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsV1LayerParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}
V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
bottom_(from.bottom_),
top_(from.top_),
blobs_(from.blobs_),
blobs_lr_(from.blobs_lr_),
weight_decay_(from.weight_decay_),
include_(from.include_),
exclude_(from.exclude_),
loss_weight_(from.loss_weight_),
param_(from.param_),
blob_share_mode_(from.blob_share_mode_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_name()) {
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (from.has_layer()) {
layer_ = new ::caffe::V0LayerParameter(*from.layer_);
} else {
layer_ = NULL;
}
if (from.has_concat_param()) {
concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
} else {
concat_param_ = NULL;
}
if (from.has_convolution_param()) {
convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
} else {
convolution_param_ = NULL;
}
if (from.has_data_param()) {
data_param_ = new ::caffe::DataParameter(*from.data_param_);
} else {
data_param_ = NULL;
}
if (from.has_dropout_param()) {
dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
} else {
dropout_param_ = NULL;
}
if (from.has_hdf5_data_param()) {
hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
} else {
hdf5_data_param_ = NULL;
}
if (from.has_hdf5_output_param()) {
hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
} else {
hdf5_output_param_ = NULL;
}
if (from.has_image_data_param()) {
image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
} else {
image_data_param_ = NULL;
}
if (from.has_infogain_loss_param()) {
infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
} else {
infogain_loss_param_ = NULL;
}
if (from.has_inner_product_param()) {
inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
} else {
inner_product_param_ = NULL;
}
if (from.has_lrn_param()) {
lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
} else {
lrn_param_ = NULL;
}
if (from.has_pooling_param()) {
pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
} else {
pooling_param_ = NULL;
}
if (from.has_window_data_param()) {
window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
} else {
window_data_param_ = NULL;
}
if (from.has_power_param()) {
power_param_ = new ::caffe::PowerParameter(*from.power_param_);
} else {
power_param_ = NULL;
}
if (from.has_memory_data_param()) {
memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
} else {
memory_data_param_ = NULL;
}
if (from.has_argmax_param()) {
argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
} else {
argmax_param_ = NULL;
}
if (from.has_eltwise_param()) {
eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
} else {
eltwise_param_ = NULL;
}
if (from.has_threshold_param()) {
threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
} else {
threshold_param_ = NULL;
}
if (from.has_dummy_data_param()) {
dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
} else {
dummy_data_param_ = NULL;
}
if (from.has_accuracy_param()) {
accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
} else {
accuracy_param_ = NULL;
}
if (from.has_hinge_loss_param()) {
hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
} else {
hinge_loss_param_ = NULL;
}
if (from.has_relu_param()) {
relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
} else {
relu_param_ = NULL;
}
if (from.has_slice_param()) {
slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
} else {
slice_param_ = NULL;
}
if (from.has_mvn_param()) {
mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
} else {
mvn_param_ = NULL;
}
if (from.has_transform_param()) {
transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
} else {
transform_param_ = NULL;
}
if (from.has_tanh_param()) {
tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
} else {
tanh_param_ = NULL;
}
if (from.has_sigmoid_param()) {
sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
} else {
sigmoid_param_ = NULL;
}
if (from.has_softmax_param()) {
softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
} else {
softmax_param_ = NULL;
}
if (from.has_contrastive_loss_param()) {
contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
} else {
contrastive_loss_param_ = NULL;
}
if (from.has_exp_param()) {
exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
} else {
exp_param_ = NULL;
}
if (from.has_loss_param()) {
loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
} else {
loss_param_ = NULL;
}
type_ = from.type_;
// @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
::memset(&layer_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&type_) -
reinterpret_cast<char*>(&layer_)) + sizeof(type_));
_cached_size_ = 0;
}

V1LayerParameter::~V1LayerParameter() {
// @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
SharedDtor();
}

void V1LayerParameter::SharedDtor() {
name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (this != internal_default_instance()) delete layer_;
if (this != internal_default_instance()) delete concat_param_;
if (this != internal_default_instance()) delete convolution_param_;
if (this != internal_default_instance()) delete data_param_;
if (this != internal_default_instance()) delete dropout_param_;
if (this != internal_default_instance()) delete hdf5_data_param_;
if (this != internal_default_instance()) delete hdf5_output_param_;
if (this != internal_default_instance()) delete image_data_param_;
if (this != internal_default_instance()) delete infogain_loss_param_;
if (this != internal_default_instance()) delete inner_product_param_;
if (this != internal_default_instance()) delete lrn_param_;
if (this != internal_default_instance()) delete pooling_param_;
if (this != internal_default_instance()) delete window_data_param_;
if (this != internal_default_instance()) delete power_param_;
if (this != internal_default_instance()) delete memory_data_param_;
if (this != internal_default_instance()) delete argmax_param_;
if (this != internal_default_instance()) delete eltwise_param_;
if (this != internal_default_instance()) delete threshold_param_;
if (this != internal_default_instance()) delete dummy_data_param_;
if (this != internal_default_instance()) delete accuracy_param_;
if (this != internal_default_instance()) delete hinge_loss_param_;
if (this != internal_default_instance()) delete relu_param_;
if (this != internal_default_instance()) delete slice_param_;
if (this != internal_default_instance()) delete mvn_param_;
if (this != internal_default_instance()) delete transform_param_;
if (this != internal_default_instance()) delete tanh_param_;
if (this != internal_default_instance()) delete sigmoid_param_;
if (this != internal_default_instance()) delete softmax_param_;
if (this != internal_default_instance()) delete contrastive_loss_param_;
if (this != internal_default_instance()) delete exp_param_;
if (this != internal_default_instance()) delete loss_param_;
}

void V1LayerParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsV1LayerParameter();
return *internal_default_instance();
}

V1LayerParameter* V1LayerParameter::New(::google::protobuf::Arena* arena) const {
V1LayerParameter* n = new V1LayerParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V1LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

bottom_.Clear();
top_.Clear();
blobs_.Clear();
blobs_lr_.Clear();
weight_decay_.Clear();
include_.Clear();
exclude_.Clear();
loss_weight_.Clear();
param_.Clear();
blob_share_mode_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*name_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(layer_ != NULL);
layer_->Clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(concat_param_ != NULL);
concat_param_->Clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(convolution_param_ != NULL);
convolution_param_->Clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(data_param_ != NULL);
data_param_->Clear();
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(dropout_param_ != NULL);
dropout_param_->Clear();
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(hdf5_data_param_ != NULL);
hdf5_data_param_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(hdf5_output_param_ != NULL);
hdf5_output_param_->Clear();
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
GOOGLE_DCHECK(image_data_param_ != NULL);
image_data_param_->Clear();
}
if (cached_has_bits & 0x00000200u) {
GOOGLE_DCHECK(infogain_loss_param_ != NULL);
infogain_loss_param_->Clear();
}
if (cached_has_bits & 0x00000400u) {
GOOGLE_DCHECK(inner_product_param_ != NULL);
inner_product_param_->Clear();
}
if (cached_has_bits & 0x00000800u) {
GOOGLE_DCHECK(lrn_param_ != NULL);
lrn_param_->Clear();
}
if (cached_has_bits & 0x00001000u) {
GOOGLE_DCHECK(pooling_param_ != NULL);
pooling_param_->Clear();
}
if (cached_has_bits & 0x00002000u) {
GOOGLE_DCHECK(window_data_param_ != NULL);
window_data_param_->Clear();
}
if (cached_has_bits & 0x00004000u) {
GOOGLE_DCHECK(power_param_ != NULL);
power_param_->Clear();
}
if (cached_has_bits & 0x00008000u) {
GOOGLE_DCHECK(memory_data_param_ != NULL);
memory_data_param_->Clear();
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
GOOGLE_DCHECK(argmax_param_ != NULL);
argmax_param_->Clear();
}
if (cached_has_bits & 0x00020000u) {
GOOGLE_DCHECK(eltwise_param_ != NULL);
eltwise_param_->Clear();
}
if (cached_has_bits & 0x00040000u) {
GOOGLE_DCHECK(threshold_param_ != NULL);
threshold_param_->Clear();
}
if (cached_has_bits & 0x00080000u) {
GOOGLE_DCHECK(dummy_data_param_ != NULL);
dummy_data_param_->Clear();
}
if (cached_has_bits & 0x00100000u) {
GOOGLE_DCHECK(accuracy_param_ != NULL);
accuracy_param_->Clear();
}
if (cached_has_bits & 0x00200000u) {
GOOGLE_DCHECK(hinge_loss_param_ != NULL);
hinge_loss_param_->Clear();
}
if (cached_has_bits & 0x00400000u) {
GOOGLE_DCHECK(relu_param_ != NULL);
relu_param_->Clear();
}
if (cached_has_bits & 0x00800000u) {
GOOGLE_DCHECK(slice_param_ != NULL);
slice_param_->Clear();
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
GOOGLE_DCHECK(mvn_param_ != NULL);
mvn_param_->Clear();
}
if (cached_has_bits & 0x02000000u) {
GOOGLE_DCHECK(transform_param_ != NULL);
transform_param_->Clear();
}
if (cached_has_bits & 0x04000000u) {
GOOGLE_DCHECK(tanh_param_ != NULL);
tanh_param_->Clear();
}
if (cached_has_bits & 0x08000000u) {
GOOGLE_DCHECK(sigmoid_param_ != NULL);
sigmoid_param_->Clear();
}
if (cached_has_bits & 0x10000000u) {
GOOGLE_DCHECK(softmax_param_ != NULL);
softmax_param_->Clear();
}
if (cached_has_bits & 0x20000000u) {
GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
contrastive_loss_param_->Clear();
}
if (cached_has_bits & 0x40000000u) {
GOOGLE_DCHECK(exp_param_ != NULL);
exp_param_->Clear();
}
if (cached_has_bits & 0x80000000u) {
GOOGLE_DCHECK(loss_param_ != NULL);
loss_param_->Clear();
}
}
type_ = 0;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool V1LayerParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.V0LayerParameter layer = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_layer()));
} else {
goto handle_unusual;
}
break;
}

// repeated string bottom = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_bottom()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(this->bottom_size() - 1).data(),
static_cast<int>(this->bottom(this->bottom_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V1LayerParameter.bottom");
} else {
goto handle_unusual;
}
break;
}

// repeated string top = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_top()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(this->top_size() - 1).data(),
static_cast<int>(this->top(this->top_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V1LayerParameter.top");
} else {
goto handle_unusual;
}
break;
}

// optional string name = 4;
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V1LayerParameter.name");
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
} else {
mutable_unknown_fields()->AddVarint(
5, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobProto blobs = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blobs()));
} else {
goto handle_unusual;
}
break;
}

// repeated float blobs_lr = 7;
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 61u, input, this->mutable_blobs_lr())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_blobs_lr())));
} else {
goto handle_unusual;
}
break;
}

// repeated float weight_decay = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
1, 69u, input, this->mutable_weight_decay())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_weight_decay())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ConcatParameter concat_param = 9;
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_concat_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_convolution_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DataParameter data_param = 11;
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DropoutParameter dropout_param = 12;
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_dropout_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hdf5_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hdf5_output_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ImageDataParameter image_data_param = 15;
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_image_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_infogain_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
case 17: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_inner_product_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LRNParameter lrn_param = 18;
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_lrn_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PoolingParameter pooling_param = 19;
case 19: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_pooling_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.WindowDataParameter window_data_param = 20;
case 20: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_window_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.PowerParameter power_param = 21;
case 21: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_power_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
case 22: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_memory_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
case 23: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_argmax_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
case 24: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_eltwise_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ThresholdParameter threshold_param = 25;
case 25: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_threshold_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
case 26: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_dummy_data_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
case 27: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_accuracy_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
case 29: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hinge_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ReLUParameter relu_param = 30;
case 30: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_relu_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SliceParameter slice_param = 31;
case 31: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_slice_param()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetStateRule include = 32;
case 32: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_include()));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.NetStateRule exclude = 33;
case 33: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exclude()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.MVNParameter mvn_param = 34;
case 34: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_mvn_param()));
} else {
goto handle_unusual;
}
break;
}

// repeated float loss_weight = 35;
case 35: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
2, 285u, input, this->mutable_loss_weight())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_loss_weight())));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.TransformationParameter transform_param = 36;
case 36: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_transform_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.TanHParameter tanh_param = 37;
case 37: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_tanh_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
case 38: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_sigmoid_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
case 39: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_softmax_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
case 40: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_contrastive_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.ExpParameter exp_param = 41;
case 41: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_exp_param()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.LossParameter loss_param = 42;
case 42: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_loss_param()));
} else {
goto handle_unusual;
}
break;
}

// repeated string param = 1001;
case 1001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 8010 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->add_param()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param(this->param_size() - 1).data(),
static_cast<int>(this->param(this->param_size() - 1).length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V1LayerParameter.param");
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
case 1002: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 8016 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
} else {
mutable_unknown_fields()->AddVarint(
1002, static_cast< ::google::protobuf::uint64>(value));
}
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(82u /* 8018 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
input,
1002,
::caffe::V1LayerParameter_DimCheckMode_IsValid,
mutable_unknown_fields(),
this->mutable_blob_share_mode())));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.V0LayerParameter layer = 1;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, *this->layer_, output);
}

// repeated string bottom = 2;
for (int i = 0, n = this->bottom_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.bottom");
::google::protobuf::internal::WireFormatLite::WriteString(
2, this->bottom(i), output);
}

// repeated string top = 3;
for (int i = 0, n = this->top_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(i).data(), static_cast<int>(this->top(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.top");
::google::protobuf::internal::WireFormatLite::WriteString(
3, this->top(i), output);
}

// optional string name = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
4, this->name(), output);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.V1LayerParameter.LayerType type = 5;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
5, this->type(), output);
}

// repeated .caffe.BlobProto blobs = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
6, this->blobs(static_cast<int>(i)), output);
}

// repeated float blobs_lr = 7;
for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
7, this->blobs_lr(i), output);
}

// repeated float weight_decay = 8;
for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
8, this->weight_decay(i), output);
}

cached_has_bits = _has_bits_[0];
// optional .caffe.ConcatParameter concat_param = 9;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
9, *this->concat_param_, output);
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
10, *this->convolution_param_, output);
}

// optional .caffe.DataParameter data_param = 11;
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
11, *this->data_param_, output);
}

// optional .caffe.DropoutParameter dropout_param = 12;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
12, *this->dropout_param_, output);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
13, *this->hdf5_data_param_, output);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
14, *this->hdf5_output_param_, output);
}

// optional .caffe.ImageDataParameter image_data_param = 15;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
15, *this->image_data_param_, output);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
16, *this->infogain_loss_param_, output);
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
17, *this->inner_product_param_, output);
}

// optional .caffe.LRNParameter lrn_param = 18;
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
18, *this->lrn_param_, output);
}

// optional .caffe.PoolingParameter pooling_param = 19;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
19, *this->pooling_param_, output);
}

// optional .caffe.WindowDataParameter window_data_param = 20;
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
20, *this->window_data_param_, output);
}

// optional .caffe.PowerParameter power_param = 21;
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
21, *this->power_param_, output);
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
22, *this->memory_data_param_, output);
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
23, *this->argmax_param_, output);
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
24, *this->eltwise_param_, output);
}

// optional .caffe.ThresholdParameter threshold_param = 25;
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
25, *this->threshold_param_, output);
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
26, *this->dummy_data_param_, output);
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
27, *this->accuracy_param_, output);
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
29, *this->hinge_loss_param_, output);
}

// optional .caffe.ReLUParameter relu_param = 30;
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
30, *this->relu_param_, output);
}

// optional .caffe.SliceParameter slice_param = 31;
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
31, *this->slice_param_, output);
}

// repeated .caffe.NetStateRule include = 32;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
32, this->include(static_cast<int>(i)), output);
}

// repeated .caffe.NetStateRule exclude = 33;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
33, this->exclude(static_cast<int>(i)), output);
}

// optional .caffe.MVNParameter mvn_param = 34;
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
34, *this->mvn_param_, output);
}

// repeated float loss_weight = 35;
for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
35, this->loss_weight(i), output);
}

// optional .caffe.TransformationParameter transform_param = 36;
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
36, *this->transform_param_, output);
}

// optional .caffe.TanHParameter tanh_param = 37;
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
37, *this->tanh_param_, output);
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
38, *this->sigmoid_param_, output);
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
39, *this->softmax_param_, output);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
40, *this->contrastive_loss_param_, output);
}

// optional .caffe.ExpParameter exp_param = 41;
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
41, *this->exp_param_, output);
}

// optional .caffe.LossParameter loss_param = 42;
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
42, *this->loss_param_, output);
}

// repeated string param = 1001;
for (int i = 0, n = this->param_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param(i).data(), static_cast<int>(this->param(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.param");
::google::protobuf::internal::WireFormatLite::WriteString(
1001, this->param(i), output);
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
for (int i = 0, n = this->blob_share_mode_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
1002, this->blob_share_mode(i), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.V0LayerParameter layer = 1;
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, *this->layer_, deterministic, target);
}

// repeated string bottom = 2;
for (int i = 0, n = this->bottom_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.bottom");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(2, this->bottom(i), target);
}

// repeated string top = 3;
for (int i = 0, n = this->top_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->top(i).data(), static_cast<int>(this->top(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.top");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(3, this->top(i), target);
}

// optional string name = 4;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
4, this->name(), target);
}

cached_has_bits = _has_bits_[1];
// optional .caffe.V1LayerParameter.LayerType type = 5;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
5, this->type(), target);
}

// repeated .caffe.BlobProto blobs = 6;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
6, this->blobs(static_cast<int>(i)), deterministic, target);
}

// repeated float blobs_lr = 7;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(7, this->blobs_lr_, target);

// repeated float weight_decay = 8;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(8, this->weight_decay_, target);

cached_has_bits = _has_bits_[0];
// optional .caffe.ConcatParameter concat_param = 9;
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
9, *this->concat_param_, deterministic, target);
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
if (cached_has_bits & 0x00000008u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
10, *this->convolution_param_, deterministic, target);
}

// optional .caffe.DataParameter data_param = 11;
if (cached_has_bits & 0x00000010u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
11, *this->data_param_, deterministic, target);
}

// optional .caffe.DropoutParameter dropout_param = 12;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
12, *this->dropout_param_, deterministic, target);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
13, *this->hdf5_data_param_, deterministic, target);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
14, *this->hdf5_output_param_, deterministic, target);
}

// optional .caffe.ImageDataParameter image_data_param = 15;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
15, *this->image_data_param_, deterministic, target);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
16, *this->infogain_loss_param_, deterministic, target);
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
17, *this->inner_product_param_, deterministic, target);
}

// optional .caffe.LRNParameter lrn_param = 18;
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
18, *this->lrn_param_, deterministic, target);
}

// optional .caffe.PoolingParameter pooling_param = 19;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
19, *this->pooling_param_, deterministic, target);
}

// optional .caffe.WindowDataParameter window_data_param = 20;
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
20, *this->window_data_param_, deterministic, target);
}

// optional .caffe.PowerParameter power_param = 21;
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
21, *this->power_param_, deterministic, target);
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
22, *this->memory_data_param_, deterministic, target);
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
23, *this->argmax_param_, deterministic, target);
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
24, *this->eltwise_param_, deterministic, target);
}

// optional .caffe.ThresholdParameter threshold_param = 25;
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
25, *this->threshold_param_, deterministic, target);
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
26, *this->dummy_data_param_, deterministic, target);
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
27, *this->accuracy_param_, deterministic, target);
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
29, *this->hinge_loss_param_, deterministic, target);
}

// optional .caffe.ReLUParameter relu_param = 30;
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
30, *this->relu_param_, deterministic, target);
}

// optional .caffe.SliceParameter slice_param = 31;
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
31, *this->slice_param_, deterministic, target);
}

// repeated .caffe.NetStateRule include = 32;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
32, this->include(static_cast<int>(i)), deterministic, target);
}

// repeated .caffe.NetStateRule exclude = 33;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
33, this->exclude(static_cast<int>(i)), deterministic, target);
}

// optional .caffe.MVNParameter mvn_param = 34;
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
34, *this->mvn_param_, deterministic, target);
}

// repeated float loss_weight = 35;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(35, this->loss_weight_, target);

// optional .caffe.TransformationParameter transform_param = 36;
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
36, *this->transform_param_, deterministic, target);
}

// optional .caffe.TanHParameter tanh_param = 37;
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
37, *this->tanh_param_, deterministic, target);
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
38, *this->sigmoid_param_, deterministic, target);
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
39, *this->softmax_param_, deterministic, target);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
40, *this->contrastive_loss_param_, deterministic, target);
}

// optional .caffe.ExpParameter exp_param = 41;
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
41, *this->exp_param_, deterministic, target);
}

// optional .caffe.LossParameter loss_param = 42;
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
42, *this->loss_param_, deterministic, target);
}

// repeated string param = 1001;
for (int i = 0, n = this->param_size(); i < n; i++) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->param(i).data(), static_cast<int>(this->param(i).length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V1LayerParameter.param");
target = ::google::protobuf::internal::WireFormatLite::
WriteStringToArray(1001, this->param(i), target);
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
1002, this->blob_share_mode_, target);

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V1LayerParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated string bottom = 2;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->bottom_size());
for (int i = 0, n = this->bottom_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->bottom(i));
}

// repeated string top = 3;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->top_size());
for (int i = 0, n = this->top_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->top(i));
}

// repeated .caffe.BlobProto blobs = 6;
{
unsigned int count = static_cast<unsigned int>(this->blobs_size());
total_size += 1UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->blobs(static_cast<int>(i)));
}
}

// repeated float blobs_lr = 7;
{
unsigned int count = static_cast<unsigned int>(this->blobs_lr_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
total_size += data_size;
}

// repeated float weight_decay = 8;
{
unsigned int count = static_cast<unsigned int>(this->weight_decay_size());
size_t data_size = 4UL * count;
total_size += 1 *
::google::protobuf::internal::FromIntSize(this->weight_decay_size());
total_size += data_size;
}

// repeated .caffe.NetStateRule include = 32;
{
unsigned int count = static_cast<unsigned int>(this->include_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->include(static_cast<int>(i)));
}
}

// repeated .caffe.NetStateRule exclude = 33;
{
unsigned int count = static_cast<unsigned int>(this->exclude_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->exclude(static_cast<int>(i)));
}
}

// repeated float loss_weight = 35;
{
unsigned int count = static_cast<unsigned int>(this->loss_weight_size());
size_t data_size = 4UL * count;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->loss_weight_size());
total_size += data_size;
}

// repeated string param = 1001;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->param_size());
for (int i = 0, n = this->param_size(); i < n; i++) {
total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
this->param(i));
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
{
size_t data_size = 0;
unsigned int count = static_cast<unsigned int>(this->blob_share_mode_size());for (unsigned int i = 0; i < count; i++) {
data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
this->blob_share_mode(static_cast<int>(i)));
}
total_size += (2UL * count) + data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string name = 4;
if (has_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->name());
}

// optional .caffe.V0LayerParameter layer = 1;
if (has_layer()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->layer_);
}

// optional .caffe.ConcatParameter concat_param = 9;
if (has_concat_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->concat_param_);
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
if (has_convolution_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->convolution_param_);
}

// optional .caffe.DataParameter data_param = 11;
if (has_data_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->data_param_);
}

// optional .caffe.DropoutParameter dropout_param = 12;
if (has_dropout_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->dropout_param_);
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
if (has_hdf5_data_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hdf5_data_param_);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
if (has_hdf5_output_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hdf5_output_param_);
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional .caffe.ImageDataParameter image_data_param = 15;
if (has_image_data_param()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->image_data_param_);
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
if (has_infogain_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->infogain_loss_param_);
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
if (has_inner_product_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->inner_product_param_);
}

// optional .caffe.LRNParameter lrn_param = 18;
if (has_lrn_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->lrn_param_);
}

// optional .caffe.PoolingParameter pooling_param = 19;
if (has_pooling_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->pooling_param_);
}

// optional .caffe.WindowDataParameter window_data_param = 20;
if (has_window_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->window_data_param_);
}

// optional .caffe.PowerParameter power_param = 21;
if (has_power_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->power_param_);
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
if (has_memory_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->memory_data_param_);
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional .caffe.ArgMaxParameter argmax_param = 23;
if (has_argmax_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->argmax_param_);
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
if (has_eltwise_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->eltwise_param_);
}

// optional .caffe.ThresholdParameter threshold_param = 25;
if (has_threshold_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->threshold_param_);
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
if (has_dummy_data_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->dummy_data_param_);
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
if (has_accuracy_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->accuracy_param_);
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
if (has_hinge_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hinge_loss_param_);
}

// optional .caffe.ReLUParameter relu_param = 30;
if (has_relu_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->relu_param_);
}

// optional .caffe.SliceParameter slice_param = 31;
if (has_slice_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->slice_param_);
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional .caffe.MVNParameter mvn_param = 34;
if (has_mvn_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->mvn_param_);
}

// optional .caffe.TransformationParameter transform_param = 36;
if (has_transform_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->transform_param_);
}

// optional .caffe.TanHParameter tanh_param = 37;
if (has_tanh_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->tanh_param_);
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
if (has_sigmoid_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->sigmoid_param_);
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
if (has_softmax_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->softmax_param_);
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
if (has_contrastive_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->contrastive_loss_param_);
}

// optional .caffe.ExpParameter exp_param = 41;
if (has_exp_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->exp_param_);
}

// optional .caffe.LossParameter loss_param = 42;
if (has_loss_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->loss_param_);
}

}
// optional .caffe.V1LayerParameter.LayerType type = 5;
if (has_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
}

int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V1LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
const V1LayerParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const V1LayerParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V1LayerParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V1LayerParameter)
MergeFrom(*source);
}
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V1LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

bottom_.MergeFrom(from.bottom_);
top_.MergeFrom(from.top_);
blobs_.MergeFrom(from.blobs_);
blobs_lr_.MergeFrom(from.blobs_lr_);
weight_decay_.MergeFrom(from.weight_decay_);
include_.MergeFrom(from.include_);
exclude_.MergeFrom(from.exclude_);
loss_weight_.MergeFrom(from.loss_weight_);
param_.MergeFrom(from.param_);
blob_share_mode_.MergeFrom(from.blob_share_mode_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_name();
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (cached_has_bits & 0x00000002u) {
mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
}
if (cached_has_bits & 0x00000004u) {
mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
}
if (cached_has_bits & 0x00000008u) {
mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
}
if (cached_has_bits & 0x00000010u) {
mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
}
if (cached_has_bits & 0x00000020u) {
mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
}
if (cached_has_bits & 0x00000040u) {
mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
}
if (cached_has_bits & 0x00000080u) {
mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
}
if (cached_has_bits & 0x00000200u) {
mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
}
if (cached_has_bits & 0x00000400u) {
mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
}
if (cached_has_bits & 0x00000800u) {
mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
}
if (cached_has_bits & 0x00001000u) {
mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
}
if (cached_has_bits & 0x00002000u) {
mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
}
if (cached_has_bits & 0x00004000u) {
mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
}
if (cached_has_bits & 0x00008000u) {
mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
}
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
}
if (cached_has_bits & 0x00020000u) {
mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
}
if (cached_has_bits & 0x00040000u) {
mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
}
if (cached_has_bits & 0x00080000u) {
mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
}
if (cached_has_bits & 0x00100000u) {
mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
}
if (cached_has_bits & 0x00200000u) {
mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
}
if (cached_has_bits & 0x00400000u) {
mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
}
if (cached_has_bits & 0x00800000u) {
mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
}
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
}
if (cached_has_bits & 0x02000000u) {
mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
}
if (cached_has_bits & 0x04000000u) {
mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
}
if (cached_has_bits & 0x08000000u) {
mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
}
if (cached_has_bits & 0x10000000u) {
mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
}
if (cached_has_bits & 0x20000000u) {
mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
}
if (cached_has_bits & 0x40000000u) {
mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
}
if (cached_has_bits & 0x80000000u) {
mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
}
}
if (from.has_type()) {
set_type(from.type());
}
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V1LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V1LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {
return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
using std::swap;
bottom_.InternalSwap(&other->bottom_);
top_.InternalSwap(&other->top_);
blobs_.InternalSwap(&other->blobs_);
blobs_lr_.InternalSwap(&other->blobs_lr_);
weight_decay_.InternalSwap(&other->weight_decay_);
include_.InternalSwap(&other->include_);
exclude_.InternalSwap(&other->exclude_);
loss_weight_.InternalSwap(&other->loss_weight_);
param_.InternalSwap(&other->param_);
blob_share_mode_.InternalSwap(&other->blob_share_mode_);
name_.Swap(&other->name_);
swap(layer_, other->layer_);
swap(concat_param_, other->concat_param_);
swap(convolution_param_, other->convolution_param_);
swap(data_param_, other->data_param_);
swap(dropout_param_, other->dropout_param_);
swap(hdf5_data_param_, other->hdf5_data_param_);
swap(hdf5_output_param_, other->hdf5_output_param_);
swap(image_data_param_, other->image_data_param_);
swap(infogain_loss_param_, other->infogain_loss_param_);
swap(inner_product_param_, other->inner_product_param_);
swap(lrn_param_, other->lrn_param_);
swap(pooling_param_, other->pooling_param_);
swap(window_data_param_, other->window_data_param_);
swap(power_param_, other->power_param_);
swap(memory_data_param_, other->memory_data_param_);
swap(argmax_param_, other->argmax_param_);
swap(eltwise_param_, other->eltwise_param_);
swap(threshold_param_, other->threshold_param_);
swap(dummy_data_param_, other->dummy_data_param_);
swap(accuracy_param_, other->accuracy_param_);
swap(hinge_loss_param_, other->hinge_loss_param_);
swap(relu_param_, other->relu_param_);
swap(slice_param_, other->slice_param_);
swap(mvn_param_, other->mvn_param_);
swap(transform_param_, other->transform_param_);
swap(tanh_param_, other->tanh_param_);
swap(sigmoid_param_, other->sigmoid_param_);
swap(softmax_param_, other->softmax_param_);
swap(contrastive_loss_param_, other->contrastive_loss_param_);
swap(exp_param_, other->exp_param_);
swap(loss_param_, other->loss_param_);
swap(type_, other->type_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void V0LayerParameter::InitAsDefaultInstance() {
::caffe::_V0LayerParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_V0LayerParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
::caffe::_V0LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
::caffe::HDF5OutputParameter::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> V0LayerParameter::_default_det_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V0LayerParameter::V0LayerParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsV0LayerParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}
V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
blobs_(from.blobs_),
blobs_lr_(from.blobs_lr_),
weight_decay_(from.weight_decay_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_name()) {
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_type()) {
type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
}
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_source()) {
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
if (from.has_meanfile()) {
meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
}
det_crop_mode_.UnsafeSetDefault(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
if (from.has_det_crop_mode()) {
det_crop_mode_.AssignWithDefault(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
}
if (from.has_weight_filler()) {
weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
} else {
weight_filler_ = NULL;
}
if (from.has_bias_filler()) {
bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
} else {
bias_filler_ = NULL;
}
if (from.has_hdf5_output_param()) {
hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
} else {
hdf5_output_param_ = NULL;
}
::memcpy(&num_output_, &from.num_output_,
static_cast<size_t>(reinterpret_cast<char*>(&det_fg_fraction_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(det_fg_fraction_));
// @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
det_crop_mode_.UnsafeSetDefault(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
::memset(&weight_filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&new_height_) -
reinterpret_cast<char*>(&weight_filler_)) + sizeof(new_height_));
concat_dim_ = 1u;
biasterm_ = true;
group_ = 1u;
stride_ = 1u;
dropout_ratio_ = 0.5f;
local_size_ = 5u;
alpha_ = 1;
beta_ = 0.75f;
scale_ = 1;
k_ = 1;
det_fg_threshold_ = 0.5f;
det_bg_threshold_ = 0.5f;
det_fg_fraction_ = 0.25f;
_cached_size_ = 0;
}

V0LayerParameter::~V0LayerParameter() {
// @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
SharedDtor();
}

void V0LayerParameter::SharedDtor() {
name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
det_crop_mode_.DestroyNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
if (this != internal_default_instance()) delete weight_filler_;
if (this != internal_default_instance()) delete bias_filler_;
if (this != internal_default_instance()) delete hdf5_output_param_;
}

void V0LayerParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsV0LayerParameter();
return *internal_default_instance();
}

V0LayerParameter* V0LayerParameter::New(::google::protobuf::Arena* arena) const {
V0LayerParameter* n = new V0LayerParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V0LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

blobs_.Clear();
blobs_lr_.Clear();
weight_decay_.Clear();
cached_has_bits = _has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*name_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000002u) {
GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*type_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000004u) {
GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*source_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000008u) {
GOOGLE_DCHECK(!meanfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
(*meanfile_.UnsafeRawStringPointer())->clear();
}
if (cached_has_bits & 0x00000010u) {
GOOGLE_DCHECK(!det_crop_mode_.IsDefault(&::caffe::V0LayerParameter::_default_det_crop_mode_.get()));
(*det_crop_mode_.UnsafeRawStringPointer())->assign(*&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
}
if (cached_has_bits & 0x00000020u) {
GOOGLE_DCHECK(weight_filler_ != NULL);
weight_filler_->Clear();
}
if (cached_has_bits & 0x00000040u) {
GOOGLE_DCHECK(bias_filler_ != NULL);
bias_filler_->Clear();
}
if (cached_has_bits & 0x00000080u) {
GOOGLE_DCHECK(hdf5_output_param_ != NULL);
hdf5_output_param_->Clear();
}
}
if (cached_has_bits & 65280u) {
::memset(&num_output_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&mirror_) -
reinterpret_cast<char*>(&num_output_)) + sizeof(mirror_));
}
if (cached_has_bits & 16711680u) {
::memset(&shuffle_images_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&new_height_) -
reinterpret_cast<char*>(&shuffle_images_)) + sizeof(new_height_));
concat_dim_ = 1u;
biasterm_ = true;
}
if (cached_has_bits & 4278190080u) {
group_ = 1u;
stride_ = 1u;
dropout_ratio_ = 0.5f;
local_size_ = 5u;
alpha_ = 1;
beta_ = 0.75f;
scale_ = 1;
k_ = 1;
}
cached_has_bits = _has_bits_[1];
if (cached_has_bits & 7u) {
det_fg_threshold_ = 0.5f;
det_bg_threshold_ = 0.5f;
det_fg_fraction_ = 0.25f;
}
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool V0LayerParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional string name = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_name()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V0LayerParameter.name");
} else {
goto handle_unusual;
}
break;
}

// optional string type = 2;
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_type()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V0LayerParameter.type");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 num_output = 3;
case 3: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
set_has_num_output();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &num_output_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool biasterm = 4 [default = true];
case 4: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
set_has_biasterm();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &biasterm_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter weight_filler = 5;
case 5: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_weight_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.FillerParameter bias_filler = 6;
case 6: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_bias_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 pad = 7 [default = 0];
case 7: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
set_has_pad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &pad_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 kernelsize = 8;
case 8: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
set_has_kernelsize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &kernelsize_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 group = 9 [default = 1];
case 9: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
set_has_group();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &group_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 stride = 10 [default = 1];
case 10: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
set_has_stride();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &stride_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
case 11: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
int value;
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
input, &value)));
if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
} else {
mutable_unknown_fields()->AddVarint(
11, static_cast< ::google::protobuf::uint64>(value));
}
} else {
goto handle_unusual;
}
break;
}

// optional float dropout_ratio = 12 [default = 0.5];
case 12: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
set_has_dropout_ratio();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &dropout_ratio_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 local_size = 13 [default = 5];
case 13: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
set_has_local_size();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &local_size_)));
} else {
goto handle_unusual;
}
break;
}

// optional float alpha = 14 [default = 1];
case 14: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
set_has_alpha();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &alpha_)));
} else {
goto handle_unusual;
}
break;
}

// optional float beta = 15 [default = 0.75];
case 15: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
set_has_beta();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &beta_)));
} else {
goto handle_unusual;
}
break;
}

// optional string source = 16;
case 16: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_source()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V0LayerParameter.source");
} else {
goto handle_unusual;
}
break;
}

// optional float scale = 17 [default = 1];
case 17: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
set_has_scale();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &scale_)));
} else {
goto handle_unusual;
}
break;
}

// optional string meanfile = 18;
case 18: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_meanfile()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->meanfile().data(), static_cast<int>(this->meanfile().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V0LayerParameter.meanfile");
} else {
goto handle_unusual;
}
break;
}

// optional uint32 batchsize = 19;
case 19: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
set_has_batchsize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &batchsize_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 cropsize = 20 [default = 0];
case 20: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
set_has_cropsize();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &cropsize_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool mirror = 21 [default = false];
case 21: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
set_has_mirror();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &mirror_)));
} else {
goto handle_unusual;
}
break;
}

// optional float k = 22 [default = 1];
case 22: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
set_has_k();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &k_)));
} else {
goto handle_unusual;
}
break;
}

// repeated .caffe.BlobProto blobs = 50;
case 50: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blobs()));
} else {
goto handle_unusual;
}
break;
}

// repeated float blobs_lr = 51;
case 51: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
2, 413u, input, this->mutable_blobs_lr())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_blobs_lr())));
} else {
goto handle_unusual;
}
break;
}

// repeated float weight_decay = 52;
case 52: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(165u /* 421 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
2, 421u, input, this->mutable_weight_decay())));
} else if (
static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, this->mutable_weight_decay())));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 rand_skip = 53 [default = 0];
case 53: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
set_has_rand_skip();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &rand_skip_)));
} else {
goto handle_unusual;
}
break;
}

// optional float det_fg_threshold = 54 [default = 0.5];
case 54: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {
set_has_det_fg_threshold();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &det_fg_threshold_)));
} else {
goto handle_unusual;
}
break;
}

// optional float det_bg_threshold = 55 [default = 0.5];
case 55: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(189u /* 445 & 0xFF */)) {
set_has_det_bg_threshold();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &det_bg_threshold_)));
} else {
goto handle_unusual;
}
break;
}

// optional float det_fg_fraction = 56 [default = 0.25];
case 56: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(197u /* 453 & 0xFF */)) {
set_has_det_fg_fraction();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
input, &det_fg_fraction_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 det_context_pad = 58 [default = 0];
case 58: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
set_has_det_context_pad();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &det_context_pad_)));
} else {
goto handle_unusual;
}
break;
}

// optional string det_crop_mode = 59 [default = "warp"];
case 59: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadString(
input, this->mutable_det_crop_mode()));
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
::google::protobuf::internal::WireFormat::PARSE,
"caffe.V0LayerParameter.det_crop_mode");
} else {
goto handle_unusual;
}
break;
}

// optional int32 new_num = 60 [default = 0];
case 60: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
set_has_new_num();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &new_num_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 new_channels = 61 [default = 0];
case 61: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
set_has_new_channels();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &new_channels_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 new_height = 62 [default = 0];
case 62: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
set_has_new_height();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &new_height_)));
} else {
goto handle_unusual;
}
break;
}

// optional int32 new_width = 63 [default = 0];
case 63: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
set_has_new_width();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
input, &new_width_)));
} else {
goto handle_unusual;
}
break;
}

// optional bool shuffle_images = 64 [default = false];
case 64: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
set_has_shuffle_images();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &shuffle_images_)));
} else {
goto handle_unusual;
}
break;
}

// optional uint32 concat_dim = 65 [default = 1];
case 65: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
set_has_concat_dim();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
input, &concat_dim_)));
} else {
goto handle_unusual;
}
break;
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
case 1001: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(74u /* 8010 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_hdf5_output_param()));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.name");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
1, this->name(), output);
}

// optional string type = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.type");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
2, this->type(), output);
}

// optional uint32 num_output = 3;
if (cached_has_bits & 0x00000100u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
}

// optional bool biasterm = 4 [default = true];
if (cached_has_bits & 0x00800000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
}

// optional .caffe.FillerParameter weight_filler = 5;
if (cached_has_bits & 0x00000020u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
5, *this->weight_filler_, output);
}

// optional .caffe.FillerParameter bias_filler = 6;
if (cached_has_bits & 0x00000040u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
6, *this->bias_filler_, output);
}

// optional uint32 pad = 7 [default = 0];
if (cached_has_bits & 0x00000200u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
}

// optional uint32 kernelsize = 8;
if (cached_has_bits & 0x00000400u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
}

// optional uint32 group = 9 [default = 1];
if (cached_has_bits & 0x01000000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
}

// optional uint32 stride = 10 [default = 1];
if (cached_has_bits & 0x02000000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
if (cached_has_bits & 0x00000800u) {
::google::protobuf::internal::WireFormatLite::WriteEnum(
11, this->pool(), output);
}

// optional float dropout_ratio = 12 [default = 0.5];
if (cached_has_bits & 0x04000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
}

// optional uint32 local_size = 13 [default = 5];
if (cached_has_bits & 0x08000000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
}

// optional float alpha = 14 [default = 1];
if (cached_has_bits & 0x10000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
}

// optional float beta = 15 [default = 0.75];
if (cached_has_bits & 0x20000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
}

// optional string source = 16;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.source");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
16, this->source(), output);
}

// optional float scale = 17 [default = 1];
if (cached_has_bits & 0x40000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
}

// optional string meanfile = 18;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->meanfile().data(), static_cast<int>(this->meanfile().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.meanfile");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
18, this->meanfile(), output);
}

// optional uint32 batchsize = 19;
if (cached_has_bits & 0x00001000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
}

// optional uint32 cropsize = 20 [default = 0];
if (cached_has_bits & 0x00002000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
}

// optional bool mirror = 21 [default = false];
if (cached_has_bits & 0x00008000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
}

// optional float k = 22 [default = 1];
if (cached_has_bits & 0x80000000u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
}

// repeated .caffe.BlobProto blobs = 50;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
50, this->blobs(static_cast<int>(i)), output);
}

// repeated float blobs_lr = 51;
for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
51, this->blobs_lr(i), output);
}

// repeated float weight_decay = 52;
for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
::google::protobuf::internal::WireFormatLite::WriteFloat(
52, this->weight_decay(i), output);
}

// optional uint32 rand_skip = 53 [default = 0];
if (cached_has_bits & 0x00020000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
}

cached_has_bits = _has_bits_[1];
// optional float det_fg_threshold = 54 [default = 0.5];
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
}

// optional float det_bg_threshold = 55 [default = 0.5];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
}

// optional float det_fg_fraction = 56 [default = 0.25];
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
}

cached_has_bits = _has_bits_[0];
// optional uint32 det_context_pad = 58 [default = 0];
if (cached_has_bits & 0x00040000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
}

// optional string det_crop_mode = 59 [default = "warp"];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.det_crop_mode");
::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
59, this->det_crop_mode(), output);
}

// optional int32 new_num = 60 [default = 0];
if (cached_has_bits & 0x00080000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
}

// optional int32 new_channels = 61 [default = 0];
if (cached_has_bits & 0x00100000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
}

// optional int32 new_height = 62 [default = 0];
if (cached_has_bits & 0x00200000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
}

// optional int32 new_width = 63 [default = 0];
if (cached_has_bits & 0x00004000u) {
::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
}

// optional bool shuffle_images = 64 [default = false];
if (cached_has_bits & 0x00010000u) {
::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
}

// optional uint32 concat_dim = 65 [default = 1];
if (cached_has_bits & 0x00400000u) {
::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
if (cached_has_bits & 0x00000080u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1001, *this->hdf5_output_param_, output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional string name = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->name().data(), static_cast<int>(this->name().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.name");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
1, this->name(), target);
}

// optional string type = 2;
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->type().data(), static_cast<int>(this->type().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.type");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
2, this->type(), target);
}

// optional uint32 num_output = 3;
if (cached_has_bits & 0x00000100u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
}

// optional bool biasterm = 4 [default = true];
if (cached_has_bits & 0x00800000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
}

// optional .caffe.FillerParameter weight_filler = 5;
if (cached_has_bits & 0x00000020u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
5, *this->weight_filler_, deterministic, target);
}

// optional .caffe.FillerParameter bias_filler = 6;
if (cached_has_bits & 0x00000040u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
6, *this->bias_filler_, deterministic, target);
}

// optional uint32 pad = 7 [default = 0];
if (cached_has_bits & 0x00000200u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
}

// optional uint32 kernelsize = 8;
if (cached_has_bits & 0x00000400u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
}

// optional uint32 group = 9 [default = 1];
if (cached_has_bits & 0x01000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
}

// optional uint32 stride = 10 [default = 1];
if (cached_has_bits & 0x02000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
if (cached_has_bits & 0x00000800u) {
target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
11, this->pool(), target);
}

// optional float dropout_ratio = 12 [default = 0.5];
if (cached_has_bits & 0x04000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
}

// optional uint32 local_size = 13 [default = 5];
if (cached_has_bits & 0x08000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
}

// optional float alpha = 14 [default = 1];
if (cached_has_bits & 0x10000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
}

// optional float beta = 15 [default = 0.75];
if (cached_has_bits & 0x20000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
}

// optional string source = 16;
if (cached_has_bits & 0x00000004u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->source().data(), static_cast<int>(this->source().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.source");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
16, this->source(), target);
}

// optional float scale = 17 [default = 1];
if (cached_has_bits & 0x40000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
}

// optional string meanfile = 18;
if (cached_has_bits & 0x00000008u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->meanfile().data(), static_cast<int>(this->meanfile().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.meanfile");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
18, this->meanfile(), target);
}

// optional uint32 batchsize = 19;
if (cached_has_bits & 0x00001000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
}

// optional uint32 cropsize = 20 [default = 0];
if (cached_has_bits & 0x00002000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
}

// optional bool mirror = 21 [default = false];
if (cached_has_bits & 0x00008000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
}

// optional float k = 22 [default = 1];
if (cached_has_bits & 0x80000000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
}

// repeated .caffe.BlobProto blobs = 50;
for (unsigned int i = 0,
n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
50, this->blobs(static_cast<int>(i)), deterministic, target);
}

// repeated float blobs_lr = 51;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(51, this->blobs_lr_, target);

// repeated float weight_decay = 52;
target = ::google::protobuf::internal::WireFormatLite::
WriteFloatToArray(52, this->weight_decay_, target);

// optional uint32 rand_skip = 53 [default = 0];
if (cached_has_bits & 0x00020000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
}

cached_has_bits = _has_bits_[1];
// optional float det_fg_threshold = 54 [default = 0.5];
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
}

// optional float det_bg_threshold = 55 [default = 0.5];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
}

// optional float det_fg_fraction = 56 [default = 0.25];
if (cached_has_bits & 0x00000004u) {
target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
}

cached_has_bits = _has_bits_[0];
// optional uint32 det_context_pad = 58 [default = 0];
if (cached_has_bits & 0x00040000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
}

// optional string det_crop_mode = 59 [default = "warp"];
if (cached_has_bits & 0x00000010u) {
::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
::google::protobuf::internal::WireFormat::SERIALIZE,
"caffe.V0LayerParameter.det_crop_mode");
target =
::google::protobuf::internal::WireFormatLite::WriteStringToArray(
59, this->det_crop_mode(), target);
}

// optional int32 new_num = 60 [default = 0];
if (cached_has_bits & 0x00080000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
}

// optional int32 new_channels = 61 [default = 0];
if (cached_has_bits & 0x00100000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
}

// optional int32 new_height = 62 [default = 0];
if (cached_has_bits & 0x00200000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
}

// optional int32 new_width = 63 [default = 0];
if (cached_has_bits & 0x00004000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
}

// optional bool shuffle_images = 64 [default = false];
if (cached_has_bits & 0x00010000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
}

// optional uint32 concat_dim = 65 [default = 1];
if (cached_has_bits & 0x00400000u) {
target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
if (cached_has_bits & 0x00000080u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1001, *this->hdf5_output_param_, deterministic, target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V0LayerParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
// repeated .caffe.BlobProto blobs = 50;
{
unsigned int count = static_cast<unsigned int>(this->blobs_size());
total_size += 2UL * count;
for (unsigned int i = 0; i < count; i++) {
total_size +=
::google::protobuf::internal::WireFormatLite::MessageSize(
this->blobs(static_cast<int>(i)));
}
}

// repeated float blobs_lr = 51;
{
unsigned int count = static_cast<unsigned int>(this->blobs_lr_size());
size_t data_size = 4UL * count;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
total_size += data_size;
}

// repeated float weight_decay = 52;
{
unsigned int count = static_cast<unsigned int>(this->weight_decay_size());
size_t data_size = 4UL * count;
total_size += 2 *
::google::protobuf::internal::FromIntSize(this->weight_decay_size());
total_size += data_size;
}

if (_has_bits_[0 / 32] & 255u) {
// optional string name = 1;
if (has_name()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->name());
}

// optional string type = 2;
if (has_type()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->type());
}

// optional string source = 16;
if (has_source()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->source());
}

// optional string meanfile = 18;
if (has_meanfile()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->meanfile());
}

// optional string det_crop_mode = 59 [default = "warp"];
if (has_det_crop_mode()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::StringSize(
this->det_crop_mode());
}

// optional .caffe.FillerParameter weight_filler = 5;
if (has_weight_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->weight_filler_);
}

// optional .caffe.FillerParameter bias_filler = 6;
if (has_bias_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->bias_filler_);
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
if (has_hdf5_output_param()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->hdf5_output_param_);
}

}
if (_has_bits_[8 / 32] & 65280u) {
// optional uint32 num_output = 3;
if (has_num_output()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->num_output());
}

// optional uint32 pad = 7 [default = 0];
if (has_pad()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->pad());
}

// optional uint32 kernelsize = 8;
if (has_kernelsize()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->kernelsize());
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
if (has_pool()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
}

// optional uint32 batchsize = 19;
if (has_batchsize()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->batchsize());
}

// optional uint32 cropsize = 20 [default = 0];
if (has_cropsize()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->cropsize());
}

// optional int32 new_width = 63 [default = 0];
if (has_new_width()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->new_width());
}

// optional bool mirror = 21 [default = false];
if (has_mirror()) {
total_size += 2 + 1;
}

}
if (_has_bits_[16 / 32] & 16711680u) {
// optional bool shuffle_images = 64 [default = false];
if (has_shuffle_images()) {
total_size += 2 + 1;
}

// optional uint32 rand_skip = 53 [default = 0];
if (has_rand_skip()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->rand_skip());
}

// optional uint32 det_context_pad = 58 [default = 0];
if (has_det_context_pad()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->det_context_pad());
}

// optional int32 new_num = 60 [default = 0];
if (has_new_num()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->new_num());
}

// optional int32 new_channels = 61 [default = 0];
if (has_new_channels()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->new_channels());
}

// optional int32 new_height = 62 [default = 0];
if (has_new_height()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::Int32Size(
this->new_height());
}

// optional uint32 concat_dim = 65 [default = 1];
if (has_concat_dim()) {
total_size += 2 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->concat_dim());
}

// optional bool biasterm = 4 [default = true];
if (has_biasterm()) {
total_size += 1 + 1;
}

}
if (_has_bits_[24 / 32] & 4278190080u) {
// optional uint32 group = 9 [default = 1];
if (has_group()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->group());
}

// optional uint32 stride = 10 [default = 1];
if (has_stride()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->stride());
}

// optional float dropout_ratio = 12 [default = 0.5];
if (has_dropout_ratio()) {
total_size += 1 + 4;
}

// optional uint32 local_size = 13 [default = 5];
if (has_local_size()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::UInt32Size(
this->local_size());
}

// optional float alpha = 14 [default = 1];
if (has_alpha()) {
total_size += 1 + 4;
}

// optional float beta = 15 [default = 0.75];
if (has_beta()) {
total_size += 1 + 4;
}

// optional float scale = 17 [default = 1];
if (has_scale()) {
total_size += 2 + 4;
}

// optional float k = 22 [default = 1];
if (has_k()) {
total_size += 2 + 4;
}

}
if (_has_bits_[32 / 32] & 7u) {
// optional float det_fg_threshold = 54 [default = 0.5];
if (has_det_fg_threshold()) {
total_size += 2 + 4;
}

// optional float det_bg_threshold = 55 [default = 0.5];
if (has_det_bg_threshold()) {
total_size += 2 + 4;
}

// optional float det_fg_fraction = 56 [default = 0.25];
if (has_det_fg_fraction()) {
total_size += 2 + 4;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V0LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
const V0LayerParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const V0LayerParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V0LayerParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V0LayerParameter)
MergeFrom(*source);
}
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V0LayerParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

blobs_.MergeFrom(from.blobs_);
blobs_lr_.MergeFrom(from.blobs_lr_);
weight_decay_.MergeFrom(from.weight_decay_);
cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 255u) {
if (cached_has_bits & 0x00000001u) {
set_has_name();
name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
}
if (cached_has_bits & 0x00000002u) {
set_has_type();
type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
}
if (cached_has_bits & 0x00000004u) {
set_has_source();
source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
}
if (cached_has_bits & 0x00000008u) {
set_has_meanfile();
meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
}
if (cached_has_bits & 0x00000010u) {
set_has_det_crop_mode();
det_crop_mode_.AssignWithDefault(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
}
if (cached_has_bits & 0x00000020u) {
mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
}
if (cached_has_bits & 0x00000040u) {
mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
}
if (cached_has_bits & 0x00000080u) {
mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
}
}
if (cached_has_bits & 65280u) {
if (cached_has_bits & 0x00000100u) {
num_output_ = from.num_output_;
}
if (cached_has_bits & 0x00000200u) {
pad_ = from.pad_;
}
if (cached_has_bits & 0x00000400u) {
kernelsize_ = from.kernelsize_;
}
if (cached_has_bits & 0x00000800u) {
pool_ = from.pool_;
}
if (cached_has_bits & 0x00001000u) {
batchsize_ = from.batchsize_;
}
if (cached_has_bits & 0x00002000u) {
cropsize_ = from.cropsize_;
}
if (cached_has_bits & 0x00004000u) {
new_width_ = from.new_width_;
}
if (cached_has_bits & 0x00008000u) {
mirror_ = from.mirror_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 16711680u) {
if (cached_has_bits & 0x00010000u) {
shuffle_images_ = from.shuffle_images_;
}
if (cached_has_bits & 0x00020000u) {
rand_skip_ = from.rand_skip_;
}
if (cached_has_bits & 0x00040000u) {
det_context_pad_ = from.det_context_pad_;
}
if (cached_has_bits & 0x00080000u) {
new_num_ = from.new_num_;
}
if (cached_has_bits & 0x00100000u) {
new_channels_ = from.new_channels_;
}
if (cached_has_bits & 0x00200000u) {
new_height_ = from.new_height_;
}
if (cached_has_bits & 0x00400000u) {
concat_dim_ = from.concat_dim_;
}
if (cached_has_bits & 0x00800000u) {
biasterm_ = from.biasterm_;
}
_has_bits_[0] |= cached_has_bits;
}
if (cached_has_bits & 4278190080u) {
if (cached_has_bits & 0x01000000u) {
group_ = from.group_;
}
if (cached_has_bits & 0x02000000u) {
stride_ = from.stride_;
}
if (cached_has_bits & 0x04000000u) {
dropout_ratio_ = from.dropout_ratio_;
}
if (cached_has_bits & 0x08000000u) {
local_size_ = from.local_size_;
}
if (cached_has_bits & 0x10000000u) {
alpha_ = from.alpha_;
}
if (cached_has_bits & 0x20000000u) {
beta_ = from.beta_;
}
if (cached_has_bits & 0x40000000u) {
scale_ = from.scale_;
}
if (cached_has_bits & 0x80000000u) {
k_ = from.k_;
}
_has_bits_[0] |= cached_has_bits;
}
cached_has_bits = from._has_bits_[1];
if (cached_has_bits & 7u) {
if (cached_has_bits & 0x00000001u) {
det_fg_threshold_ = from.det_fg_threshold_;
}
if (cached_has_bits & 0x00000002u) {
det_bg_threshold_ = from.det_bg_threshold_;
}
if (cached_has_bits & 0x00000004u) {
det_fg_fraction_ = from.det_fg_fraction_;
}
_has_bits_[1] |= cached_has_bits;
}
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V0LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V0LayerParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {
return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
using std::swap;
blobs_.InternalSwap(&other->blobs_);
blobs_lr_.InternalSwap(&other->blobs_lr_);
weight_decay_.InternalSwap(&other->weight_decay_);
name_.Swap(&other->name_);
type_.Swap(&other->type_);
source_.Swap(&other->source_);
meanfile_.Swap(&other->meanfile_);
det_crop_mode_.Swap(&other->det_crop_mode_);
swap(weight_filler_, other->weight_filler_);
swap(bias_filler_, other->bias_filler_);
swap(hdf5_output_param_, other->hdf5_output_param_);
swap(num_output_, other->num_output_);
swap(pad_, other->pad_);
swap(kernelsize_, other->kernelsize_);
swap(pool_, other->pool_);
swap(batchsize_, other->batchsize_);
swap(cropsize_, other->cropsize_);
swap(new_width_, other->new_width_);
swap(mirror_, other->mirror_);
swap(shuffle_images_, other->shuffle_images_);
swap(rand_skip_, other->rand_skip_);
swap(det_context_pad_, other->det_context_pad_);
swap(new_num_, other->new_num_);
swap(new_channels_, other->new_channels_);
swap(new_height_, other->new_height_);
swap(concat_dim_, other->concat_dim_);
swap(biasterm_, other->biasterm_);
swap(group_, other->group_);
swap(stride_, other->stride_);
swap(dropout_ratio_, other->dropout_ratio_);
swap(local_size_, other->local_size_);
swap(alpha_, other->alpha_);
swap(beta_, other->beta_);
swap(scale_, other->scale_);
swap(k_, other->k_);
swap(det_fg_threshold_, other->det_fg_threshold_);
swap(det_bg_threshold_, other->det_bg_threshold_);
swap(det_fg_fraction_, other->det_fg_fraction_);
swap(_has_bits_[0], other->_has_bits_[0]);
swap(_has_bits_[1], other->_has_bits_[1]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PReLUParameter::InitAsDefaultInstance() {
::caffe::_PReLUParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
::caffe::FillerParameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PReLUParameter::PReLUParameter()
: ::google::protobuf::Message(), _internal_metadata_(NULL) {
if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
::protobuf_caffe_2eproto::InitDefaultsPReLUParameter();
}
SharedCtor();
// @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}
PReLUParameter::PReLUParameter(const PReLUParameter& from)
: ::google::protobuf::Message(),
_internal_metadata_(NULL),
_has_bits_(from._has_bits_),
_cached_size_(0) {
_internal_metadata_.MergeFrom(from._internal_metadata_);
if (from.has_filler()) {
filler_ = new ::caffe::FillerParameter(*from.filler_);
} else {
filler_ = NULL;
}
channel_shared_ = from.channel_shared_;
// @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
_cached_size_ = 0;
::memset(&filler_, 0, static_cast<size_t>(
reinterpret_cast<char*>(&channel_shared_) -
reinterpret_cast<char*>(&filler_)) + sizeof(channel_shared_));
}

PReLUParameter::~PReLUParameter() {
// @@protoc_insertion_point(destructor:caffe.PReLUParameter)
SharedDtor();
}

void PReLUParameter::SharedDtor() {
if (this != internal_default_instance()) delete filler_;
}

void PReLUParameter::SetCachedSize(int size) const {
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
::protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PReLUParameter& PReLUParameter::default_instance() {
::protobuf_caffe_2eproto::InitDefaultsPReLUParameter();
return *internal_default_instance();
}

PReLUParameter* PReLUParameter::New(::google::protobuf::Arena* arena) const {
PReLUParameter* n = new PReLUParameter;
if (arena != NULL) {
arena->Own(n);
}
return n;
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
// Prevent compiler warnings about cached_has_bits being unused
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
if (cached_has_bits & 0x00000001u) {
GOOGLE_DCHECK(filler_ != NULL);
filler_->Clear();
}
channel_shared_ = false;
_has_bits_.Clear();
_internal_metadata_.Clear();
}

bool PReLUParameter::MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
::google::protobuf::uint32 tag;
// @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
for (;;) {
::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
tag = p.first;
if (!p.second) goto handle_unusual;
switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
// optional .caffe.FillerParameter filler = 1;
case 1: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
input, mutable_filler()));
} else {
goto handle_unusual;
}
break;
}

// optional bool channel_shared = 2 [default = false];
case 2: {
if (static_cast< ::google::protobuf::uint8>(tag) ==
static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
set_has_channel_shared();
DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
input, &channel_shared_)));
} else {
goto handle_unusual;
}
break;
}

default: {
handle_unusual:
if (tag == 0) {
goto success;
}
DO_(::google::protobuf::internal::WireFormat::SkipField(
input, tag, _internal_metadata_.mutable_unknown_fields()));
break;
}
}
}
success:
// @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
return true;
failure:
// @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const {
// @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.FillerParameter filler = 1;
if (cached_has_bits & 0x00000001u) {
::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
1, *this->filler_, output);
}

// optional bool channel_shared = 2 [default = false];
if (cached_has_bits & 0x00000002u) {
::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
}

if (_internal_metadata_.have_unknown_fields()) {
::google::protobuf::internal::WireFormat::SerializeUnknownFields(
_internal_metadata_.unknown_fields(), output);
}
// @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const {
(void)deterministic; // Unused
// @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = _has_bits_[0];
// optional .caffe.FillerParameter filler = 1;
if (cached_has_bits & 0x00000001u) {
target = ::google::protobuf::internal::WireFormatLite::
InternalWriteMessageToArray(
1, *this->filler_, deterministic, target);
}

// optional bool channel_shared = 2 [default = false];
if (cached_has_bits & 0x00000002u) {
target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
}

if (_internal_metadata_.have_unknown_fields()) {
target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
_internal_metadata_.unknown_fields(), target);
}
// @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PReLUParameter)
size_t total_size = 0;

if (_internal_metadata_.have_unknown_fields()) {
total_size +=
::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
_internal_metadata_.unknown_fields());
}
if (_has_bits_[0 / 32] & 3u) {
// optional .caffe.FillerParameter filler = 1;
if (has_filler()) {
total_size += 1 +
::google::protobuf::internal::WireFormatLite::MessageSize(
*this->filler_);
}

// optional bool channel_shared = 2 [default = false];
if (has_channel_shared()) {
total_size += 1 + 1;
}

}
int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
_cached_size_ = cached_size;
GOOGLE_SAFE_CONCURRENT_WRITES_END();
return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PReLUParameter)
GOOGLE_DCHECK_NE(&from, this);
const PReLUParameter* source =
::google::protobuf::internal::DynamicCastToGenerated<const PReLUParameter>(
&from);
if (source == NULL) {
// @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PReLUParameter)
::google::protobuf::internal::ReflectionOps::Merge(from, this);
} else {
// @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PReLUParameter)
MergeFrom(*source);
}
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PReLUParameter)
GOOGLE_DCHECK_NE(&from, this);
_internal_metadata_.MergeFrom(from._internal_metadata_);
::google::protobuf::uint32 cached_has_bits = 0;
(void) cached_has_bits;

cached_has_bits = from._has_bits_[0];
if (cached_has_bits & 3u) {
if (cached_has_bits & 0x00000001u) {
mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
}
if (cached_has_bits & 0x00000002u) {
channel_shared_ = from.channel_shared_;
}
_has_bits_[0] |= cached_has_bits;
}
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PReLUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PReLUParameter)
if (&from == this) return;
Clear();
MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {
return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
if (other == this) return;
InternalSwap(other);
}
void PReLUParameter::InternalSwap(PReLUParameter* other) {
using std::swap;
swap(filler_, other->filler_);
swap(channel_shared_, other->channel_shared_);
swap(_has_bits_[0], other->_has_bits_[0]);
_internal_metadata_.Swap(&other->_internal_metadata_);
swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
return ::protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe

// @@protoc_insertion_point(global_scope)